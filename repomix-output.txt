This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-28T20:13:53.763Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
assets/
  gedcom/
    filter
  html/
    geneafan/
      advancedModal.html
    index.ejs
  images/
    icons/
      browserconfig.xml
      france.svg
      logo_L50-min.svg
      manifest.json
  other/
    robots.txt
  scripts/
    geneafan/
      common/
        stores/
          authStore.js
          mobx-config.js
          rootPersonStore.js
          state.js
        downloadManager.js
      core/
        app.js
        auth.js
        errorHandler.js
        events.js
        setup.js
      gedcom/
        countryData.js
        departementData.js
        familyTownsStore.js
        gedcomConstantsStore.js
        gedcomDataStore.js
        gedcomFileHandler.js
        gedcomModalUtils.js
        parse.js
        shareFormStore.js
      listeners/
        eventListeners.js
        protectedFeatures.js
        responsiveTabs.js
      tabs/
        ancestorsMap/
          ancestorsMapManager.js
        familyMap/
          googleMapManager.js
          googleMapsStore.js
          markers.worker.js
        familyTree/
          ancestorUtils.js
          familyTreeDataStore.js
          treeUI.js
        fanChart/
          fan.js
          fanChartManager.js
          fanConfigStore.js
          offcanvasManager.js
          personDetailsDisplay.js
          SVGPanZoomManager.js
        statistics/
          services/
            statisticsService.js
          workers/
            statisticsWorker.js
          statisticsManager.js
          statisticsStore.js
        timeline/
          horizontalTimeline.js
          timelineEventsStore.js
          timelineManager.js
          timelineStore.js
        tabManager.js
      utils/
        dates.js
        geo.js
        spinners.js
        tooltips.js
        utils.js
      updateTownsDB.worker.js
    vendor/
      pdfkitFontRegister.js
  scss/
    pages/
      _index.scss
      horizontal-timeline.scss
    vendors/
      _bootstrap.scss
    main.scss
  geneafan.js
locales/
  en.json
  fr.json
.env.development
.env.production
.gitignore
babel.config.js
geneafanCert.crt
LICENSE
package.json
README.md
structure.ini
TODO.md
update.sh
vercel.json
webpack.config.js

================================================================
Repository Files
================================================================

================
File: assets/gedcom/filter
================
<link rel="stylesheet" href="//assets.squarewebsites.org/custom-filter/custom-filter.min.css"/>
<script>
window.customFilterSettings = {
    'targets': [{
        container: '#block-yui_3_17_2_1_1705594241182_2537',// css selector for filter container
        items: '.summary-item',// css selector for items to filter
        settings: {
            position: 'top',//set the position for filter to appear. May be: top, left, right
            align: 'left',// align filter options, may be: left, center, right, space-between
            showItemsCount: false, // show (true) or hide (false) Items count
            collectionUrl: '/produits',// you need to set source collection url slug (like /blog) if your items have external links (not linked to themselves)
            itemsCount: {
                enabled: false, // same as showItemsCount
                text: '', // set the items text before counter, it is Items: by default and you may set your own text
                positionOrder: 1 // items counter position, higher means last
            },
            keepDropdownsOpenOnInit: false, // if set to true, dropdowns will be opened initially
            customClasses: 'lite-dropdowns',
            /* Add any custom classes to filter container if you want to have your own to use in CSS styling,
            available: cf-sort-right (move sorting element right), cf-sort-left (move sort left), lite-dropdowns(gives lighter dropdowns stylings), cf-ctrls-inline (makes dropdowns fit one line space)*/
            view: 'dropdowns', // available: dropdowns, breadcrumbs, modern, buttons, buttons-round, buttons-pill, buttons-inline
            sticky: {// if enabled: true - trying enable sticky position of Filter to be seen on scroll
                enabled: false,
                top: '6%'
            },
            simpleFilter: {
                show: {
                    effect: 'fade',
                    transitionDuration: 300,
                    stagger: 60
                },
                hide: {
                    effect: 'fade',
                    transitionDuration: 100,
                    stagger: 18
                }
            },
            pagination: {
              enabled: true, // enable pagination
              pageSize: 30, // set the page size to 30
            },
            /*----Mobile Panel Section----*/
            mobilePanel: {// control if you want to have separate offscreen panel with filters on small screens
                enabled: true,// if set to false, no filter buttons on mobiles will be showed
                triggerButtonName: 'Filter', // trigger button text
                keepDropdownsOpen: null, // if false it overrides desktop settings, if true - dropdowns opened
                closeOnSelect: false, // mobile panel closed just after user selected something
                closeOnSearch: false, // mobile panel closed if user searced something in searc field
                closeOnOutsideClick: false // if true, mobile panel will be closed if user clicks outside it
            },
            /*----Filters Section----*/
            filter: { // here you define all filters you need and name them
                category: false, // disabling default Category dropdown
                tag: false, // disabling default Tag dropdown
                items: [{
                    name: 'Category', // give the dropdown (fiter entity) name you want
                    multiple: false, // if true, allow to select multiple options
                    logic: 'and', // how to combine dropdown options with other dropdowns logic. Other value is or
                    multipleLogic: 'or',// combine each selected option with OR or AND logic within one dropdown
                    closedSubOptions: false, // works for Products 7.1 subcategories onl
                    sort: 'asc', // may be asc, desc, asAllowed (need define options list in allowedOptions), or your own custom function
                    getAttr: 'categories'// here you say Filter to look for options in items categories
                }, {
                    name: 'Tags',// give the dropdown (fiter entity) name you want
                    multiple: true,//if true, allow to select multiple options
                    getAttr: 'tags'// here you say Filter to look for options in items tags
                }]
            },
            sort: {// define the sorters
                enabled: false,// if false - no sorters visible/working
                //defined: 'date_desc',// select which of defined sorters will work initially
                items: [{
                    name: 'Alphabetical',
                    order: 'asc|desc',
                    orderTexts: 'A-Z|Z-A',
                    hideName: true,
                    sort: '.summary-title-link'
                },{
                    name: 'Date',// name your sorter
                    order: 'asc|desc',// apply the orders you want to use
                    orderTexts: 'Older|Newer',// name the orders in format you need
                    hideName: true,// if true, you will not see Date name
                    sort: '[data-publish-on] parseInt'//if properly configured, each Squarespace item will have publish date as data attribute. parseInt saysFilter operate it as integer number
                }, {
                    name: 'Price',// name your sorter
                    order: 'asc|desc',// define orders
                    hideName: true,// hide the Price name
                    orderTexts: '$-$$$|$$$-$'// define orders naming
                    /* If sorter named as Price, you do not need define sort selectors or function: it will work the same like you defined:
                    sort: '[data-price] parseInt'
                    */
                }]
            },
            search: {
                enabled: true,// if false, no Search input will be showed
                text: 'Search', //set the placeholder to your search field, otherwise Search will be used
            }
        }
    }]
};
</script>
<script src="//assets.squarewebsites.org/custom-filter/custom-filter.min.js"></script>

================
File: assets/html/geneafan/advancedModal.html
================
<div
  class="modal fade"
  id="advancedModal"
  tabindex="-1"
  role="dialog"
  aria-labelledby="advancedModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="advancedModalLabel">Paramètres avancés</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Fermer"
        ></button>
      </div>
      <div class="modal-body">
        <div class="col-12" id="advanced">
          <div class="row g-0">
            <div class="col-6">
              <h5><%= __('geneafan.informations') %></h5>

              <div class="mb-3 row mb-3">
                <label for="max-generations" class="col-form-label col-8"
                  ><%= __('geneafan.generation_count') %></label
                >
                <div class="input-group col-4">
                  <input
                    class="form-control parameter"
                    type="number"
                    id="max-generations"
                    min="1"
                    max="10"
                    value="8"
                    enabled
                  />
                </div>
              </div>

              <div class="mb-3 row">
                <label
                  class="form-check-label col-form-label col-6"
                  for="select-dates"
                  ><%= __('geneafan.dates_format') %></label
                >
                <div class="input-group col-6">
                  <select
                    class="form-select parameter"
                    id="select-dates"
                    disabled
                  >
                    <option value="0" selected>
                      <%= __('geneafan.date_yyyy') %>
                    </option>
                    <option value="1">
                      <%= __('geneafan.date_ddmmyyyy') %>
                    </option>
                  </select>
                </div>
              </div>

              <div class="mb-3 row my-2">
                <div class="col-12">
                  <div class="form-check">
                    <input
                      type="checkbox"
                      class="form-check-input parameter"
                      id="show-invalid-dates"
                      disabled
                    />
                    <label class="form-check-label" for="show-invalid-dates"
                      ><%= __('geneafan.display_invalid_dates') %></label
                    >
                  </div>
                </div>
              </div>

              <div class="mb-3 row mt-4">
                <label
                  class="form-check-label col-form-label col-6"
                  for="select-places"
                  ><%= __('geneafan.places_format') %></label
                >
                <div class="input-group col-6">
                  <select
                    class="form-select parameter"
                    id="select-places"
                    enabled
                  >
                    <option value="0">
                      <%= __('geneafan.places_format_list.full') %>
                    </option>
                    <option selected value="1">
                      <%= __('geneafan.places_format_list.city_only') %>
                    </option>
                    <option value="2">
                      <%= __('geneafan.places_format_list.nothing') %>
                    </option>
                  </select>
                </div>
              </div>
              <!-- Marriages -->

              <div class="mb-3 row mt-4">
                <label
                  class="form-check-label col-form-label col-6"
                  for="select-name-order"
                  ><%= __('geneafan.names_order') %></label
                >
                <div class="input-group col-6">
                  <select
                    class="form-select parameter"
                    id="select-name-order"
                    disabled
                  >
                    <option value="0" selected>
                      <%= __('geneafan.names_order_list.given_surname') %>
                    </option>
                    <option value="1">
                      <%= __('geneafan.names_order_list.surname_given') %>
                    </option>
                  </select>
                </div>
              </div>

              <div class="mb-3 row mt-2">
                <label
                  class="form-check-label col-form-label col-6"
                  for="select-name-display"
                  ><%= __('geneafan.names_to_display') %></label
                >
                <div class="input-group col-6">
                  <select
                    class="form-select parameter"
                    id="select-name-display"
                    disabled
                  >
                    <option value="0">
                      <%= __('geneafan.names_to_display_list.all') %>
                    </option>
                    <option value="1" selected>
                      <%= __('geneafan.names_to_display_list.first') %>
                    </option>
                  </select>
                </div>
              </div>

              <div class="mb-3 row mt-3 mb-3">
                <div class="col-12">
                  <div class="form-check">
                    <input
                      type="checkbox"
                      class="form-check-input parameter"
                      id="substitute-events"
                      enabled
                    />
                    <label class="form-check-label" for="substitute-events"
                      ><%= __('geneafan.substitute_missing_events') %>
                      <i
                        class="fas fa-question-circle"
                        data-bs-toggle="tooltip"
                        title="${__('geneafan.substitute_missing_events_hint')}"
                      ></i
                    ></label>
                  </div>
                </div>
              </div>

              <h5><%= __('geneafan.recent_people') %></h5>

              <div class="mb-3 row my-2">
                <label
                  class="form-check-label col-form-label col-6"
                  for="select-hidden-generations"
                  ><%= __('geneafan.informations_to_hide') %></label
                >
                <div class="input-group col-6">
                  <select
                    class="form-select parameter"
                    id="select-hidden-generations"
                    disabled
                  >
                    <option value="0" selected>
                      <%= __('geneafan.informations_to_hide_list.none') %>
                    </option>
                    <option value="1">
                      <%= __('geneafan.informations_to_hide_list.events') %>
                    </option>
                    <option value="2">
                      <%= __('geneafan.informations_to_hide_list.all_but') %>
                    </option>
                    <option value="3">
                      <%= __('geneafan.informations_to_hide_list.all') %>
                    </option>
                  </select>
                </div>
              </div>

              <div class="mb-3 row mb-2">
                <label
                  for="hidden-generations-count"
                  class="col-form-label col-8"
                  ><%= __('geneafan.affected_generations') %></label
                >
                <div class="input-group col-4">
                  <input
                    class="form-control parameter"
                    type="number"
                    id="hidden-generations-count"
                    min="1"
                    max="8"
                    value="1"
                    disabled
                  />
                </div>
              </div>

              <h5><%= __('geneafan.format') %></h5>

              <div class="mb-3 row mt-2 mb-2"></div>

              <div class="mb-3 row mt-2">
                <div class="col-12">
                  <div class="form-check">
                    <input
                      type="checkbox"
                      class="form-check-input parameter"
                      id="show-chronology"
                      enabled
                    />
                    <label class="form-check-label" for="show-chronology"
                      ><%= __('geneafan.chronology') %></label
                    >
                  </div>
                </div>
              </div>
            </div>

            <div class="col-6">
              <h5 style="display: none"><%=__('geneafan.annotations')%></h5>

              <div class="mb-3 row mb-3" style="display: none">
                <label for="title" class="col-form-label col-6"
                  ><%=__('geneafan.primary_title')%></label
                >
                <div class="input-group col-6">
                  <input
                    class="form-control parameter"
                    type="text"
                    id="title"
                    value=""
                    placeholder="${__('common.none')}"
                    enabled
                  />
                </div>
              </div>

              <h5><%=__('geneafan.measurements')%></h5>
              <h6><%=__('geneafan.title_title')%></h6>

              <div class="mb-3 row mb-2">
                <div class="mb-3 row mb-2">
                  <label for="title-size" class="col-form-label col-6"
                    ><%=__('geneafan.title_size')%></label
                  >
                  <div class="input-group col-6 my-auto">
                    <input
                      type="range"
                      class="form-range parameter"
                      id="title-size"
                      min="50"
                      max="250"
                      value="100"
                      enabled
                    />
                  </div>

                  <label for="title-margin" class="col-form-label col-6"
                    ><%=__('geneafan.title_margin')%></label
                  >
                  <div class="input-group col-6 my-auto">
                    <input
                      type="range"
                      class="form-range parameter"
                      id="title-margin"
                      min="0"
                      max="250"
                      value="25"
                      enabled
                    />
                  </div>
                </div>
              </div>

              <h6><%=__('geneafan.strokes')%></h6>

              <div class="mb-3 row mb-2">
                <label for="stroke-weight" class="col-form-label col-6"
                  ><%=__('geneafan.stroke_weight')%></label
                >
                <div class="input-group col-6 my-auto">
                  <input
                    type="range"
                    class="form-range parameter"
                    id="stroke-weight"
                    min="5"
                    max="30"
                    value="20"
                    enabled
                  />
                </div>
              </div>

              <h6><%=__('geneafan.box_sizes')%></h6>

              <div class="mb-3 row mb-2">
                <label for="weightg1" class="col-form-label col-6"
                  ><%=__('geneafan.box_sizes_list.generation_1')%></label
                >
                <div class="input-group col-6 my-auto">
                  <input
                    type="range"
                    class="form-range parameter"
                    id="weightg1"
                    min="90"
                    max="250"
                    value="100"
                    enabled
                  />
                </div>

                <label for="weightg2" class="col-form-label col-6"
                  ><%=__('geneafan.box_sizes_list.generation_2_4')%></label
                >
                <div class="input-group col-6 my-auto">
                  <input
                    type="range"
                    class="form-range parameter"
                    id="weightg2"
                    min="90"
                    max="250"
                    value="100"
                    enabled
                  />
                </div>

                <label for="weightg3" class="col-form-label col-6"
                  ><%=__('geneafan.box_sizes_list.generation_5_8')%></label
                >
                <div class="input-group col-6 my-auto">
                  <input
                    type="range"
                    class="form-range parameter"
                    id="weightg3"
                    min="90"
                    max="250"
                    value="170"
                    enabled
                  />
                </div>

                <label for="weightg4" class="col-form-label col-6"
                  ><%=__('geneafan.box_sizes_list.generation_9_plus')%></label
                >
                <div class="input-group col-6 my-auto">
                  <input
                    type="range"
                    class="form-range parameter"
                    id="weightg4"
                    min="90"
                    max="250"
                    value="140"
                    enabled
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

================
File: assets/html/index.ejs
================
<!DOCTYPE html>
<html lang="${locale}">

<head>
    <meta charset="UTF-8">
    <title>Geneafan</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="Arbreomatic description">
    <meta name="author" content="Genealog.ie">
    <meta name="robots" content="noindex, follow">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
</head>

<body>
    <header>
        <!-- Header with tabs, tom-select element, dropdowns and fullscreen button -->
        <div class="fixed-top d-flex justify-content-between align-items-center" id="tab-header">
            <!-- Section with tab headers -->
            <div id="left-container" class="left-header" role="tablist">
                <div id="tab-container" class="d-flex">
                    <ul class="nav nav-tabs" id="tab-nav">
                        <li class="nav-item">
                            <a class="nav-link active" href="#tab1" data-bs-toggle="tab">
                                <span class="tab-label">
                                    <%= __('geneafan.view_fan_chart') %>
                                </span>
                                <button class="btn btn-secondary btn-sm spacedS" id="fanParametersDisplay" disabled
                                    data-bs-toggle="tooltip" data-bs-placement="top"
                                    title="<%= __('geneafan.tooltip_fan_parameters') %>">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"
                                        style="width: 1em; height: 1em; fill: currentColor;">
                                        <path
                                            d="M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z" />
                                    </svg>
                                </button>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link disabled" href="#tab2" data-bs-toggle="tab">
                                <span class="tab-label">
                                    <%= __('geneafan.view_family_map') %>
                                </span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link disabled" href="#tab3" data-bs-toggle="tab">
                                <span class="tab-label">
                                    <%= __('geneafan.view_family_tree') %>
                                </span>
                                <button class="btn btn-secondary btn-sm spacedS" id="treeParametersDisplay" disabled
                                    data-bs-toggle="tooltip" data-bs-placement="top"
                                    title="<%= __('geneafan.tooltip_tree_parameters') %>">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"
                                        style="width: 1em; height: 1em; fill: currentColor;">
                                        <path
                                            d="M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z" />
                                    </svg>
                                </button>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link disabled" href="#tab4" data-bs-toggle="tab">
                                <span class="tab-label">
                                    <%= __('geneafan.view_ascendant_timeline') %>
                                </span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link disabled" href="#tab5" data-bs-toggle="tab">
                                <span class="tab-label">
                                    <%= __('geneafan.view_statistics') %>
                                </span>
                            </a>
                        </li>
                    </ul>
                </div>
                <div id="burger-menu" class="burger-menu">
                    <div type="button" id="more-tab-btn" class="more-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 4 18">
                            <path fill="var(--color-dark)" fill-rule="evenodd"
                                d="M0 2a2 2 0 1 0 4 0 2 2 0 0 0-4 0m2 9a2 2 0 1 1 0-4 2 2 0 0 1 0 4m0 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4"
                                clip-rule="evenodd" />
                        </svg>
                    </div>
                    <ul id="more-drawer" class="nav-tabs more-content">
                    </ul>
                </div>
            </div>
            <!-- Section with the tom-select element -->
            <div id="middle-container" class="col-4 d-flex justify-content-center mx-auto align-items-center">
                <div id="undoButton" class="me-2" style="cursor: pointer; width: 1.5em; height: 1.5em;">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"
                        style="width: 100%; height: 100%; fill: currentColor;">
                        <path
                            d="M125.7 160l50.3 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L48 224c-17.7 0-32-14.3-32-32L16 64c0-17.7 14.3-32 32-32s32 14.3 32 32l0 51.2L97.6 97.6c87.5-87.5 229.3-87.5 316.8 0s87.5 229.3 0 316.8s-229.3 87.5-316.8 0c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0c62.5 62.5 163.8 62.5 226.3 0s62.5-163.8 0-226.3s-163.8-62.5-226.3 0L125.7 160z" />
                    </svg>
                </div>
                <select id="individual-select" class="form-control disabled mx-3"></select>
                <div id="redoButton" class="mx-2" style="cursor: pointer; width: 1.5em; height: 1.5em;">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"
                        style="width: 100%; height: 100%; fill: currentColor;">
                        <path
                            d="M386.3 160L336 160c-17.7 0-32 14.3-32 32s14.3 32 32 32l128 0c17.7 0 32-14.3 32-32l0-128c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 51.2L414.4 97.6c-87.5-87.5-229.3-87.5-316.8 0s-87.5 229.3 0 316.8s229.3 87.5 316.8 0c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0c-62.5 62.5-163.8 62.5-226.3 0s-62.5-163.8 0-226.3s163.8-62.5 226.3 0L386.3 160z" />
                    </svg>
                </div>
            </div>
            <!-- Section with dropdowns and the fullscreen button -->
            <div id="right-container" class="col-4 d-flex justify-content-end">
                <div class="dropdown spacedS">
                    <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="gedcomMenu"
                        data-bs-toggle="dropdown" aria-expanded="false">
                        GEDCOM
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="gedcomMenu">
                        <!-- Upload a new GEDCOM file -->
                        <li>
                            <a class="dropdown-item" href="#">
                                <div class="input-file-container text-center">
                                    <%= __('geneafan.your_gedcom_file') %>
                                        <input type="file" name="file" id="file" accept=".ged,.gedcom">
                                </div>
                            </a>
                        </li>

                        <!-- My GEDCOM Files -->
                        <li>
                            <a class="dropdown-item protected-feature" data-action="fetchGedcomFiles" href="#"
                                id="myGedcomFilesMenuItem">
                                Mes fichiers Gedcom enregistrés
                            </a>
                        </li>

                        <!-- Separator -->
                        <li>
                            <hr class="dropdown-divider">
                        </li>

                        <!-- Use the sample GEDCOM file -->
                        <li>
                            <a class="dropdown-item remote-file" href="#" id="sample-toggle"
                                data-link="https://files.genealog.ie/demo.ged">
                                <%= __('geneafan.or_try_sample') %>
                            </a>
                        </li>
                    </ul>
                </div>

                <div class="dropdown spacedS">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="download-menu"
                        data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" disabled>
                        <%= __('common.download') %>
                    </button>
                    <div class="dropdown-menu" aria-labelledby="download-menu">
                        <a class="dropdown-item" id="download-pdf-watermark" href="#">
                            <%= __('geneafan.file_type_list.pdf_watermark') %>
                        </a>
                        <a class="dropdown-item protected-feature" data-action="downloadPdf" id="download-pdf" href="#">
                            <%= __('geneafan.file_type_list.pdf') %>
                        </a>
                        <a class="dropdown-item" id="download-svg" href="#">
                            <%= __('geneafan.file_type_list.svg') %>
                        </a>
                        <a class="dropdown-item" id="download-png-transparency" href="#">
                            <%= __('geneafan.file_type_list.png_transparent') %>
                        </a>
                        <a class="dropdown-item" id="download-png-background" href="#">
                            <%= __('geneafan.file_type_list.png_white_background') %>
                        </a>
                    </div>
                </div>
                <div style="display: flex;">
                    <button class="btn btn-secondary" id="fullscreenButton" disabled data-bs-toggle="tooltip"
                        data-bs-placement="top" title="<%= __('geneafan.tooltip_full_screen') %>">
                        <i class="bi bi-arrows-fullscreen"></i>
                    </button>
                </div>

                <!-- Element for the sign-in button or the user button -->
                <div id="user-controls">
                    <button id="sign-in-button" class="btn btn-primary">Sign In</button>
                    <div id="user-button" style="display: none;"></div>
                </div>



                <!--
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="lang-menu" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa fa-globe" aria-hidden="true"></i>
                    </button>
                    <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                        <h6 class="dropdown-header">
                            <%=__('common.language')%>
                        </h6>
                        <a class="dropdown-item ${lang === 'fr' ? 'active' : ''}" href="${urlGeneratorLang('fr', 'geneafan')}">Français</a>
                        <a class="dropdown-item ${lang === 'en' ? 'active' : ''}" href="${urlGeneratorLang('en', 'geneafan')}">English</a>
                    </div>
                </div>
                -->
            </div>
        </div>

        <div id="overlay">
            <div id="loading">
                <div class="spinner-border custom-spinner" role="status">
                </div>
                <h2 id="loading-text">
                    <%= __('common.loading_ellipsis') %>
                </h2>
                <em>
                    <%= __('common.please_wait') %>
                </em>
            </div>
        </div>

        <div class="alert alert-primary alert-dismissible fade d-none" id="alert" role="alert">
            <span id="alert-content"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>

    </header>
    <main>

        <div class="container">

            <!-- Tab content -->
            <div class="tab-content">
                <div class="tab-pane fade show active" id="tab1">
                    <div class="row position-relative" id="fanDisplay">
                        <div id="initial-group">
                            <div>
                                <h5>
                                    <strong>
                                        <%=__('geneafan.privacy')%>
                                    </strong>
                                </h5>
                            </div>
                        </div>
                        <!-- Fan container class="col-12 container-fluid"-->
                        <div id="fanContainer" class="col-12 container-fluid">
                            <svg id="fan"></svg>
                        </div>
                        <!-- Offcanvas for fan settings -->
                        <div class="offcanvas offcanvas-start" tabindex="-1" id="fanParameters"
                            aria-labelledby="fanParametersLabel">
                            <div class="offcanvas-header">
                                <h5 class="offcanvas-title" id="fanParametersLabel">Paramètres de l'éventail</h5>
                                <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas"
                                    aria-label="Close"></button>
                            </div>
                            <div class="offcanvas-body">
                                <div class="container-fluid">
                                    <div class="row col-12 mx-auto">
                                        <!-- Paramètre de l'angle du fan -->
                                        <div class="mb-3 parameter-row">
                                            <label class="form-label">Angle de l'éventail</label>
                                            <div class="btn-group" role="group" aria-label="Angle de l'éventail">
                                                <input type="radio" class="btn-check parameter" name="fanAngle"
                                                    id="fan-angle-270" value="270" checked>
                                                <label class="btn btn-outline-primary" for="fan-angle-270">270°</label>
                                                <input type="radio" class="btn-check parameter" name="fanAngle"
                                                    id="fan-angle-360" value="360">
                                                <label class="btn btn-outline-primary" for="fan-angle-360">360°</label>
                                            </div>
                                        </div>

                                        <!-- Paramètre du nombre de générations -->
                                        <div class="mb-3 parameter-row">
                                            <label class="form-label">Nombre de générations</label>
                                            <div class="btn-group" role="group" aria-label="Nombre de générations">
                                                <input type="radio" class="btn-check parameter" name="max-generations"
                                                    id="max-generations-7" value="7">
                                                <label class="btn btn-outline-primary" for="max-generations-7">7</label>
                                                <input type="radio" class="btn-check parameter" name="max-generations"
                                                    id="max-generations-8" value="8" checked>
                                                <label class="btn btn-outline-primary" for="max-generations-8">8</label>
                                            </div>
                                        </div>

                                        <!-- Paramètre d'affichage des mariages -->
                                        <div class="mb-3 parameter-row">
                                            <label class="form-label">Affichage des mariages</label>
                                            <div class="btn-group" role="group" aria-label="Affichage des mariages">
                                                <input type="radio" class="btn-check parameter" name="showMarriages"
                                                    id="showMarriages-true" value="true" checked>
                                                <label class="btn btn-outline-primary"
                                                    for="showMarriages-true">Oui</label>
                                                <input type="radio" class="btn-check parameter" name="showMarriages"
                                                    id="showMarriages-false" value="false">
                                                <label class="btn btn-outline-primary"
                                                    for="showMarriages-false">Non</label>
                                            </div>
                                        </div>

                                        <!-- Autres paramètres -->
                                        <div class="mb-3 parameter-row">
                                            <label class="form-label">Orientation dynamique du texte</label>
                                            <div class="btn-group" role="group"
                                                aria-label="Orientation dynamique du texte">
                                                <input type="radio" class="btn-check parameter" name="invert-text-arc"
                                                    id="invert-text-arc-true" value="true" checked>
                                                <label class="btn btn-outline-primary"
                                                    for="invert-text-arc-true">Oui</label>
                                                <input type="radio" class="btn-check parameter" name="invert-text-arc"
                                                    id="invert-text-arc-false" value="false">
                                                <label class="btn btn-outline-primary"
                                                    for="invert-text-arc-false">Non</label>
                                            </div>
                                        </div>
                                        <div class="mb-3 parameter-row">
                                            <label class="form-label">Affichage des cases vides</label>
                                            <div class="btn-group" role="group" aria-label="Affichage des cases vides">
                                                <input type="radio" class="btn-check parameter" name="showMissing"
                                                    id="showMissing-true" value="true" checked>
                                                <label class="btn btn-outline-primary"
                                                    for="showMissing-true">Oui</label>
                                                <input type="radio" class="btn-check parameter" name="showMissing"
                                                    id="showMissing-false" value="false">
                                                <label class="btn btn-outline-primary"
                                                    for="showMissing-false">Non</label>
                                            </div>
                                        </div>
                                        <!-- Coloriage de l'éventail -->
                                        <div class="mb-3 parameter-row">
                                            <label class="form-label">Coloriage de l'éventail</label>
                                            <div class="btn-group" role="group" aria-label="Coloriage de l'éventail">
                                                <input type="radio" class="btn-check parameter" name="fanColor"
                                                    id="fan-color-none" value="none" checked>
                                                <label class="btn btn-outline-primary" for="fan-color-none">Non</label>
                                                <input type="radio" class="btn-check parameter" name="fanColor"
                                                    id="fan-color-departement" value="departement">
                                                <label class="btn btn-outline-primary"
                                                    for="fan-color-departement">Géographique</label>
                                                <input type="radio" class="btn-check parameter" name="fanColor"
                                                    id="fan-color-individual" value="individual">
                                                <label class="btn btn-outline-primary"
                                                    for="fan-color-individual">Individuel</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="tab-pane fade" id="tab2">
                    <div class="row flex-nowrap" id="familyMap"></div>
                </div>
                <div class="tab-pane fade" id="tab3">
                    <div class="row position-relative" id="treeDisplay"></div>
                    <!-- Tree container -->
                    <div class="col-12 container-fluid align-items-center mt-2" id="treeContainer"
                        style="height: 95vh;"></div>
                    <!-- Offcanvas for tree settings -->
                    <div class="offcanvas offcanvas-start" tabindex="-1" id="treeParameters"
                        aria-labelledby="treeParametersLabel">
                        <div class="offcanvas-header">
                            <h5 class="offcanvas-title" id="treeParametersLabel">Paramètres de l'arbre</h5>
                            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas"
                                aria-label="Close"></button>
                        </div>
                        <div class="offcanvas-body">
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-12 mx-auto" id="treeParametersDisplay">
                                        <div class="mb-3 parameter-row">
                                            <label for="commonAncestor" class="form-label">Recherche</label>
                                            <div class="btn-group" role="group">
                                                <button type="button" id="commonAncestor"
                                                    class="btn btn-primary">Ancêtre
                                                    commun</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="tab4">
                    <div class="horizontal-timeline" id="ascendantTimeline"></div>
                </div>
                <!-- Container for the Statistics tab -->
                <div class="tab-pane fade statistics-container" id="tab5" role="tabpanel">
                    <!-- Sticky Overview Section -->
                    <div class="sticky-overview">
                        <div class="container-fluid">
                            <!-- Quick Navigation -->
                            <div class="row mb-3">
                                <div class="col-12">
                                    <nav class="nav nav-pills nav-fill small">
                                        <a class="nav-link" href="#demography-section">Démographie</a>
                                        <a class="nav-link" href="#geography-section">Géographie</a>
                                        <a class="nav-link" href="#family-section">Relations Familiales</a>
                                        <a class="nav-link" href="#timeline-section">Chronologie</a>
                                    </nav>
                                </div>
                            </div>
                
                            <!-- Overview Cards -->
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="card mb-3">
                                        <div class="card-body">
                                            <h6 class="card-title text-muted mb-0">Nombre total d'individus</h6>
                                            <h2 class="display-6 fw-bold mb-0" id="total-individuals">-</h2>
                                            <small class="text-muted">personnes recensées</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="card mb-3">
                                        <div class="card-body">
                                            <h6 class="card-title text-muted mb-0">Nombre de mariages</h6>
                                            <h2 class="display-6 fw-bold mb-0" id="total-marriages">-</h2>
                                            <small class="text-muted">unions enregistrées</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="card mb-3">
                                        <div class="card-body">
                                            <h6 class="card-title text-muted mb-0">Moyenne d'enfants</h6>
                                            <h2 class="display-6 fw-bold mb-0" id="avg-children">-</h2>
                                            <small class="text-muted">par couple marié</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="card mb-3">
                                        <div class="card-body">
                                            <h6 class="card-title text-muted mb-0">Espérance de vie</h6>
                                            <h2 class="display-6 fw-bold mb-0" id="avg-lifespan">-</h2>
                                            <small class="text-muted">moyenne globale</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Scrollable Content -->
                    <div class="statistics-content">
                        <div class="container-fluid">
                            <!-- Demography Section -->
                            <div class="row mb-5" id="demography-section">
                                <div class="col-12">
                                    <h4 class="section-title">
                                        <i class="bi bi-people-fill me-2"></i>
                                        Démographie
                                    </h4>
                                </div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="card-title mb-0">Distribution des âges au décès</h5>
                                        </div>
                                        <div class="card-body">
                                            <div id="age-chart" class="chart-container"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="card-title mb-0">Évolution de l'espérance de vie</h5>
                                        </div>
                                        <div class="card-body">
                                            <div id="lifespan-chart" class="chart-container"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Geography Section -->
                            <div class="row mb-5" id="geography-section">
                                <div class="col-12">
                                    <h4 class="section-title">
                                        <i class="bi bi-geo-alt-fill me-2"></i>
                                        Géographie
                                    </h4>
                                </div>
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="card-title mb-0">Distribution géographique des naissances et
                                                migrations</h5>
                                        </div>
                                        <div class="card-body">
                                            <div id="birth-death-places-chart" class="chart-container"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Family Relations Section -->
                            <div class="row mb-5" id="family-section">
                                <div class="col-12">
                                    <h4 class="section-title">
                                        <i class="bi bi-diagram-3-fill me-2"></i>
                                        Relations Familiales
                                    </h4>
                                </div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="card-title mb-0">Distribution des mariages par décennie</h5>
                                        </div>
                                        <div class="card-body">
                                            <div id="marriages-timeline-chart" class="chart-container"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="card-title mb-0">Taille des familles</h5>
                                        </div>
                                        <div class="card-body">
                                            <div id="family-size-chart" class="chart-container"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Timeline Section -->
                            <div class="row mb-5" id="timeline-section">
                                <div class="col-12">
                                    <h4 class="section-title">
                                        <i class="bi bi-calendar-event-fill me-2"></i>
                                        Chronologie
                                    </h4>
                                </div>
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="card-title mb-0">Distribution temporelle des événements</h5>
                                        </div>
                                        <div class="card-body">
                                            <div id="events-timeline-chart" class="chart-container"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Modals -->
                <div class="modal fade" id="emailModal" tabindex="-1" role="dialog" aria-labelledby="emailModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="emailModalLabel">Saisissez l'adresse à laquelle vous
                                    souhaitez
                                    recevoir le PDF de l'éventail sans filigrane.</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">

                                </button>
                            </div>
                            <div class="modal-body">
                                <input type="email" class="form-control" id="userEmailInput"
                                    placeholder="Votre adresse de courriel">
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" id="email">Valider</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog"
                    aria-labelledby="confirmationModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">

                                </button>
                            </div>
                            <div class="modal-body">
                                Le fichier PDF de votre éventail sera envoyé dans quelques minutes à l'adresse indiquée.
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal de Connexion -->
                <div class="modal fade" id="signInModal" tabindex="-1" aria-labelledby="signInModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="signInModalLabel">Se Connecter</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                    aria-label="Fermer"></button>
                            </div>
                            <div class="modal-body">
                                <div id="sign-in"></div> <!-- Conteneur pour le formulaire de connexion -->
                            </div>
                        </div>
                    </div>
                </div>


                <!-- Élément pour le contenu dynamique (formulaire de connexion, commutateur d'organisations, etc.) -->


                <!-- Offcanvas for individuals -->
                <div class="offcanvas offcanvas-end" tabindex="-1" id="personDetails"
                    aria-labelledby="personDetailsLabel">
                    <div class="offcanvas-header">
                        <h5 id="personDetailsLabel">name</h5>
                        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas"
                            aria-label="Close"></button>
                    </div>
                    <div id="offCanvasBody" class="text-start" style="overflow-y: auto;">
                        <div id="individualTimeline" class="text-start"></div>
                    </div>
                </div>

                <div class="offcanvas offcanvas-start map-width" tabindex="-1" id="individualMapContainer"
                    aria-labelledby="individualMapLabel">
                    <div class="offcanvas-header">
                        <h5 id="individualMapLabel">Carte</h5>
                        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas"
                            aria-label="Close"></button>
                    </div>
                    <div class="offcanvas-body">
                        <div class="row flex-nowrap" id="individualMap"></div>
                    </div>
                </div>
    </main>
    <!-- Scripts -->
    <script>
        var isReady = true;
        window.onerror = function errorHandler(msg, url, line) {
            isReady = false;
            var e = document.getElementById('loading');
            e.innerHTML = "<h2><i class=\"fas fa-exclamation-triangle\" aria-hidden=\"true\"></i> ${__('geneafan.an_error_occurred')}</h2>${__('geneafan.your_browser_is_incompatible')}";
            return false;
        };
    </script>

</body>

</html>

================
File: assets/images/icons/browserconfig.xml
================
<?xml version="1.0" encoding="utf-8"?>
<browserconfig><msapplication><tile><square70x70logo src="img/icon/ms-icon-70x70.png"/><square150x150logo src="img/icon/ms-icon-150x150.png"/><square310x310logo src="img/icon/ms-icon-310x310.png"/><TileColor>#ffffff</TileColor></tile></msapplication></browserconfig>

================
File: assets/images/icons/france.svg
================
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 667 578" xml:space="preserve">
<g class="region region-01" data-nom="Guadeloupe" data-code_insee="01">
<path data-nom="Guadeloupe" data-numerodepartement="971" class="region-01 departement departement-971 departement-guadeloupe" d="M35.87,487.13l0.7,7.2l-4.5-1.1l-2,1.7l-5.8-0.6l-1.7-1.2l4.9,0.5l3.2-4.4L35.87,487.13z M104.87,553.63 l-4.4-1.8l-1.9,0.8l0.2,2.1l-1.9,0.3l-2.2,4.9l0.7,2.4l1.7,2.9l3.4,1.2l3.4-0.5l5.3-5l-0.4-2.5L104.87,553.63z M110.27,525.53 l-6.7-2.2l-2.4-4.2l-11.1-2.5l-2.7-5.7l-0.7-7.7l-6.2-4.7l-5.9,5.5l-0.8,2.9l1.2,4.5l3.1,1.2l-1,3.4l-2.6,1.2l-2.5,5.1l-1.9-0.2 l-1,1.9l-4.3-0.7l1.8-0.7l-3.5-3.7l-10.4-4.1l-3.4,1.6l-2.4,4.8l-0.5,3.5l3.1,9.7l0.6,12l6.3,9l0.6,2.7c3-1.2,6-2.5,9.1-3.7l5.9-6.9 l-0.4-8.7l-2.8-5.3l0.2-5.5l3.6,0.2l0.9-1.7l1.4,3.1l6.8,2l13.8-4.9L110.27,525.53z"></path>
</g>
<g class="region region-02" data-nom="Martinique" data-code_insee="02">
<path data-nom="Martinique" data-numerodepartement="972" class="region-02 departement departement-972 departement-martinique" d="m44.23,433.5l1.4-4.1l-6.2-7.5l0.3-5.8l4.8-4 l4.9-0.9l17,9.9l7,8.8l9.4-5.2l1.8,2.2l-2.8,0.8l0.7,2.6l-2.9,1l-2.2-2.4l-1.9,1.7l0.6,2.5l5.1,1.6l-5.3,4.9l1.6,2.3l4.5-1.5 l-0.8,5.6l3.7,0.2l7.6,19l-1.8,5.5l-4.1,5.1h-2.6l-2-3l3.7-5.7l-4.3,1.7l-2.5-2.5l-2.4,1.2l-6-2.8l-5.5,0.1l-5.4,3.5l-2.4-2.1 l0.2-2.7l-2-2l2.5-4.9l3.4-2.5l4.9,3.4l3.2-1.9l-4.4-4.7l0.2-2.4l-1.8,1.2l-7.2-1.1l-7.6-7L44.23,433.5z"></path>
</g>
<g class="region region-03" data-nom="Guyane" data-code_insee="03">
<path data-nom="Guyane" data-numerodepartement="973" class="region-03 departement departement-973 departement-guyane" d="m95.2,348.97l-11.7,16.4l0.3,2.4l-7.3,14.9 l-4.4,3.9l-2.6,1.3l-2.3-1.7l-4.4,0.8l0.7-1.8l-10.6-0.3l-4.3,0.8l-4.1,4.1l-9.1-4.4l6.6-11.8l0.3-6l4.2-10.8l-8.3-9.6l-2.7-8 l-0.6-11.4l3.8-7.5l5.9-5.4l1-4l4.2,0.5l-2.3-2l24.7,8.6l9.2,8.8l3.1,0.3l-0.7,1.2l6.1,4l1.4,4.1l-2.4,3.1l2.6-1.6l0.1-5.5l4,3.5 l2.4,7L95.2,348.97z"></path>
</g>
<g class="region region-04" data-nom="La Réunion" data-code_insee="04">
<path data-nom="La Réunion" data-numerodepartement="974" class="region-04 departement departement-974 departement-la-reunion" d="m41.33,265.3l-6.7-8.5l1.3-6l4.1-2.4l0.7-7.9 l3.3,0.4l7.6-6.1l5.7-0.8l21,4l5,5.3v4.1l7.3,10.1l6.7,4.5l1,3.6l-3.3,7.9l0.9,9.6l-3.4,3.5l-17.3,2.9l-19.6-6.5l-3.8-3.6l-4.7-1.2 l-0.9-2.5l-3.6-2.3L41.33,265.3z"></path>
</g>
<g class="region region-06" data-nom="Mayotte" data-code_insee="06">
<path data-nom="Mayotte" data-numerodepartement="976" class="region-06 departement departement-976 departement-mayotte" d="m57.79,157.13l11.32,5.82l-3.24,7.46l-5.66,7.52l5.66,8.37l-4.04,5.7l-5.66,8.01l5.66,4.37l-7.28,4.37l-8.09-2.73l-4.04-5.04v-4.85l-3.24-6.55l7.28,3.88l4.04,1.13v-7.14l-4.85-8.43v-14.8l-8.09-2.61l-3.24-2.67v-5.76l8.9-6.79l7.28,10.19L57.79,157.13z M78.07,164.38l-5.56,3.42l4.81,5.59l3.93-4.79L78.07,164.38z"></path>
</g>
<g class="region region-11" data-nom="Île-de-France" data-code_insee="11">
<path data-nom="Paris" data-numerodepartement="75" class="region-11 departement departement-75 departement-paris" d="M641.8,78.3l-0.2,3.8l-1,2.6l-8.3-1.7l-6-0.6l-5.2,3h-4l-2.5-0.3l-0.4-0.1l-13.5-5l-3-3.8l-4.3-1.9l-0.5-0.2 l0.4-1.9l1.3-3.1l2.7-2.1l2.9-1.1l3.9,0.5h0.1l0.9-2.2l7.1-4.6l14-0.1l1.8,3.6l1.8,2.4l0.6,0.9l0.1,0.4L631,68l0.4,5.4l0.4,1.8v0.1 l-0.3,0.8l0.1,3.6l0.6-0.5l1.6-1.6l2-0.5l2-0.5L641.8,78.3z M396.8,154.7l-3.2-0.5l-2.5,1.7l3,3.5l5.3-0.1l-1.8-1.9L396.8,154.7z"></path>
<path data-nom="Seine-et-Marne" data-numerodepartement="77" class="region-11 departement departement-77 departement-seine-et-marne" d="m441.1,176.1l-2.9,0.8l0.4,8.5l-15.4,3 l-0.2,5.8l-3.9,5.4l-11.2,2.7l-9.2-0.7l2.6-1.5l0.6-2.7l-4.2-4.3L397,190l3.4-4.8l4-17.2l-0.5-1l1.1-4.1l-0.3-2.9v-0.1l-1.3-4.7 l1.3-2.5l-1.7-5.1l0.1-0.1l1.7-2.3l-0.2-2l6.9,1l2-2.2l2.5,1.6l8.1-2.9l2.6,0.7l1.8,2.5l-0.7,2.8l3.9,4.2l9.3,6l-0.4,2l-2.6,2.2 l3.5,8.3l2.6,1.7L441.1,176.1z"></path>
<path data-nom="Yvelines" data-numerodepartement="78" class="region-11 departement departement-78 departement-yvelines" d="m364.1,158.1l-3.6-6.6l-1.8-5.8l2.3-2.6 l3.8,0.1l9.5,0.8l9,3.6l5.5,6.1l-2,3.1l3.2,5.2l-7.1,5.4l-1.6,2.6l0.7,2.9l-4.6,8.6l-3.1,0.7L372,180l-1.2-5.6l-6.2-5.4L364.1,158.1z"></path>
<path data-nom="Essonne" data-numerodepartement="91" class="region-11 departement departement-91 departement-essonne" d="m401.6,164.8l2.3,2.2l0.5,1l-4,17.2L397,190 l-3.7-0.6l-2.8,1.8l-1.5-2.7l-1.9,2.9l-6.9,0.7l-2.8-10.6l4.6-8.6l-0.7-2.9l1.6-2.6l7.1-5.4v-0.1l3.7,1.6l5.1,2.1L401.6,164.8z"></path>
<path data-nom="Hauts-de-Seine" data-numerodepartement="92" class="region-11 departement departement-92 departement-hauts-de-seine" d="M391.1,155.9l3,3.5l-0.4,4.1l-3.7-1.6v0.1l-3.2-5.2l2-3.1l3.6-2.6l1.3,2l-0.1,1.1L391.1,155.9z M612.6,54.1 l1.6-0.7l0.7-1.9l0.5-1.8l-0.1-1.1l-0.2-1.4l-4.6-1.9l-4.6-0.9l-4,1.3l-7.6,5.6l-6.1,5.8l-5.3,3l-1,1l-3.75,7.4l1.79,7.17 l-0.06,0.07l0.01,0.06l-2.74,3.23l0.68,2.44l2.5,4.8l3.3-0.5l1,5.2l3.9-0.3l1.4,3.5l3.4,1.6l0.5,2.1l5.3,4.2l4.3,1.3l-0.1,4.9 l5.7,3.5l3.15-5.91l-0.7-5.46l0.72-1.2l0.4-1.3l0.7-2.1l-1.4-1.9l0.3-1.2l0.8-2.8l-1-2.6l0.5-0.3l0.5-0.3l0.9-0.5l0.7-1.1l-0.4-0.1 l-13.5-5l-3-3.8l-4.3-1.9l-0.5-0.2l0.3-1.9l1.4-3.1l2.7-2.1l2.8-1.1h0.1l3.9,0.5l0.9-2.2l7.2-4.6l-0.7-2l-0.6-2l1.4-0.7L612.6,54.1z"></path>
<path data-nom="Seine-Saint-Denis" data-numerodepartement="93" class="region-11 departement departement-93 departement-seine-saint-denis" d="M404.7,152.7l-1.3,2.5l1.3,4.7v0.1l-7.1-2.6l-0.8-2.7l-3.2-0.5l0.1-1.1l-1.3-2l3.3-1.3l2.6,1.1 c1.6-1.1,3.2-2.2,4.7-3.3L404.7,152.7z M663.2,73.89l0.06-0.08l-0.02-0.04l2.61-3.38l-3.95-0.3l-1.6-5.9l0.06-0.06l-0.02-0.06 l6.36-6.56l0.1-5.42l1.1-4l-1.2-3.4l-5.1-8l0.07-0.08l-0.03-0.04l2.65-3.33l-0.89-4.04l-4.5-2.9l-4.1,1.7l-6.4,8.8l-8.2,6.2 l-0.7-0.2l-7.8-1.1l-1.9,1l-5.1-4.6l-1.3-0.2l-1.9-0.7l-5.1,3l-1.6,2.7l-1-1.2l-5.9-2.1l-1.96,2.25v0.2l0.66,2.45l3.9,0.8l4.7,1.9 l0.1,1.4l0.1,1.1l-0.2,0.9l-0.3,0.9l-0.7,1.9l-1.6,0.7l-0.3,0.8l-1.4,0.7l0.6,2l0.7,2l13.9-0.2l0.1,0.1l1.8,3.6l1.8,2.4l0.6,0.8 l0.1,0.5L631,68l0.4,5.4l0.4,1.8l5.9-0.5l0.5-0.3c0.1,0,0.1,0,0.2,0l6.3-2.8l2.9,0.4l0.7,1.3l3,1.5l4,2.9c0,0.1,0.1,0.2,0.2,0.2 l0.7,0.5l6,6.2l0.8,0.6c0.1,0,0.2,0.1,0.3,0.1l3.6,2.6l0.04-0.13l0.43-1.3l0.23-0.68l-1.8-6L663.2,73.89z"></path>
<path data-nom="Val-de-Marne" data-numerodepartement="94" class="region-11 departement departement-94 departement-val-de-marne" d="M404.7,160l0.3,2.9l-1.1,4.1l-2.3-2.2l-2.8,0.8l-5.1-2.1l0.4-4.1l5.3-0.1l-1.8-1.9L404.7,160z M668.09,102.2 h0.06l-0.02-0.12l3.31-0.19l-1.55-3.58l-3.69-2.41l0.8-8h-0.1l-3.6-2.6c-0.1,0-0.2-0.1-0.3-0.1l-0.8-0.6l-6-6.2l-0.7-0.5 c-0.1,0-0.2-0.1-0.2-0.2l-4-2.9l-3-1.5l-0.7-1.3l-2.9-0.4l-6.3,2.8c-0.1,0-0.1,0-0.2,0l-0.5,0.3l-5.9,0.5v0.1l-0.3,0.8l0.1,3.6 l0.6-0.5l1.6-1.7l2-0.4l2-0.5l4,1.7l-0.2,3.8l-1,2.6l-8.3-1.7l-6-0.6l-5.2,3h-4l-2.5-0.3l-0.6,1.1h-0.1l-0.9,0.5l-0.5,0.3l-0.5,0.3 l1,2.5v0.1l-0.8,2.8l-0.3,1.2l1.4,1.9l-0.7,2.1l-0.4,1.3l-0.7,1.2l0.78,5.38h0.06l2.1,0.2l4.7,2.8l3.1-2.2l0.1,5.5l3.3,2.4l4.9-1.8 l0.7,2.5l5.2-2.3l0.5,1.3l1.7,1.7l4.6-3.6l2.1-0.5l5.2-1.8l1.9,6.8l1.7,2.5l3.3,1.8l5.44,1.88l-0.68-5.05l0.05-0.08l-0.01-0.04 l2.5-4.2l2.73-2.74l-1.38-3.64l0.07-0.06l-0.03-0.07l2.35-1.96L668.09,102.2z"></path>
<path data-nom="Val-d’Oise" data-numerodepartement="95" class="region-11 departement departement-95 departement-val-doise" d="m374.3,144l-9.5-0.8l4-9.5l1.6,3.2l5.6,1.1 l6.3-1.8l9.2,2.2l2.2-1.6l10.9,6.4l0.2,2l-1.7,2.3l-0.1,0.1c-1.5,1.1-3.1,2.2-4.7,3.3l-2.6-1.1l-3.3,1.3l-3.6,2.6l-5.5-6.1 L374.3,144z"></path>
</g>
<g class="region region-24" data-nom="Centre-Val de Loire" data-code_insee="24">
<path data-nom="Cher" data-numerodepartement="18" class="region-24 departement departement-18 departement-cher" d="m385.3,235.4l5-2.4l13.5,3.1l3.9,4.8l9-1.7l2,6.5l-1.7,5.8l2.7,2.1 l3.1,7.6l0.3,5.9l2.2,2l-0.2,5.8l-1.3,8.9h-0.1h-4l-4.8,3.7l-8.4,2.9l-2.3,1.9l1.7,5.3l-1.7,2.4l-8.7,1l-3.5,5.9v0.1l-4.9-0.2 l1.5-3.5l-0.9-8.9l-4.7-7.9l1.4-2.7l-2.3-2.2l2.5-5.1l-2.3-11.7l-11.6-1.6l2.8-5.5l2.8,0.1l0.6-2.8l9.7-2l-2.1-5.9l5.9-4.1 L385.3,235.4z"></path>
<path data-nom="Eure-et-Loir" data-numerodepartement="28" class="region-24 departement departement-28 departement-eure-et-loir" d="m333.1,200.9l-2.1-3.8l-1.1-7.5l7.5-5.1 l-0.5-4.6l0.2-4.5l-4.8-4.4l-0.1-3.2l2.4-2.6l6-1.1l5.3-3.2l2.8,1.6l6-1.3l-0.2-2.8l6-6.9l3.6,6.6l0.5,10.9l6.2,5.4l1.2,5.6l2.3,2.2 l3.1-0.7l2.8,10.6l-0.5,1.5l-4.8,10.8l-8.5,0.6l-6,2.8l0.2,2.8l-3.3-1.9l-5.5,3.5L339,201.4l-6.3,1.3L333.1,200.9z"></path>
<path data-nom="Indre" data-numerodepartement="36" class="region-24 departement departement-36 departement-indre" d="m357.8,308.5l-2.8,2.9l-1.7-2.5l-5.8,1.1 l-2.6-1.1l1.5-2.8l-2.5-1.3l-2.6-5.4h-2.9l-4.6-4.4l0.8-5.8l-2.1-3l5.6-0.5l-1-2.7l3.3-11.9l5.1-2.7l2.3,1.7l2.6-3.5l2.5-2.1l-1-4.9 l6-3.2l2.5,1.3l1.5-2.6l6.4-0.9l5.2,3.5l-2.8,5.5l11.6,1.6l2.3,11.7l-2.5,5.1l2.3,2.2l-1.4,2.7l4.7,7.9l0.9,8.9l-1.5,3.5l-2.7,0.8 l-13.2-2.7l-1.9,2.5L357.8,308.5z"></path>
<path data-nom="Indre-et-Loire" data-numerodepartement="37" class="region-24 departement departement-37 departement-indre-et-loire" d="m303.9,263l-5.5-3.2v-0.1l5.8-15.3l1.7-9.3 l0.7-2.4l6.1,2.6l-0.5-3.3l2.8,0.3l7.7-4.5l10.5,0.5l-0.2,5.5l2.2-1.8l6,3.4l-0.7,2.7l3.4,5.1l-1.2,9.1l2.4,1.9l2.6-1.3l4.2,6.7 l1,4.9l-2.5,2.1l-2.6,3.5l-2.3-1.7l-5.1,2.7l-3.3,11.9l1,2.7l-5.6,0.5l-7.1-10l-0.3-3.1l-5.3-3l1.4,2.9l-10,0.4l-2.8-1.4l-1.3-6.1 l-2.9,0.3L303.9,263z"></path>
<path data-nom="Loir-et-Cher" data-numerodepartement="41" class="region-24 departement departement-41 departement-loir-et-cher" d="m357.9,256.4l-6,3.2l-4.2-6.7l-2.6,1.3 l-2.4-1.9l1.2-9.1l-3.4-5.1l0.7-2.7l-6-3.4l-2.2,1.8l0.2-5.5l-10.5-0.5l0.6-3.5l3.2-1.1l6.3-10.6l-0.4-5.5l-1.7-2.2l2-2.1v-0.1 l6.3-1.3l12.8,10.8l5.5-3.5l3.3,1.9l2.5,7.1l-1.8,3.2l1.7,5.6l3-1.3l2.4,1.5l1.1,3.8l2.9,0.6l1.9-2.3l15.2,1.6l0.8,2.6l-5,2.4 l5.1,7.6l-5.9,4.1l2.1,5.9l-9.7,2l-0.6,2.8l-2.8-0.1l-5.2-3.5l-6.4,0.9l-1.5,2.6L357.9,256.4z"></path>
<path data-nom="Loiret" data-numerodepartement="45" class="region-24 departement departement-45 departement-loiret" d="m393.3,189.4l3.7,0.6l0.7,3.1l4.2,4.3l-0.6,2.7 l-2.6,1.5l9.2,0.7l11.2-2.7l6.7,7.5l0.4,5.8l-4.6,4.9l1.1,2.9l-1.6,2.4l-5.3,3.3l3,2.8l2.2,6.9l-2.8,0.7l-1.5,2.4l-9,1.7l-3.9-4.8 l-13.5-3.1l-0.8-2.6l-15.2-1.6l-1.9,2.3l-2.9-0.6l-1.1-3.8l-2.4-1.5l-3,1.3l-1.7-5.6l1.8-3.2l-2.5-7.1l-0.2-2.8l6-2.8l8.5-0.6 l4.8-10.8l0.5-1.5l6.9-0.7l1.9-2.9l1.5,2.7L393.3,189.4z"></path>
</g>
<g class="region region-27" data-nom="Bourgogne-Franche-Comté" data-code_insee="27">
<path data-nom="Côte-d’Or" data-numerodepartement="21" class="region-27 departement departement-21 departement-cote-dor" d="m523.6,241.7l3.9,8.2l-1.2,1.3l-1.8,8.2 l-6.2,6.8l-1.1,4.1v-0.1l-15,1.5l-8.8,4.2l-5.6-6.3l-5.5-1.9l-1.3-2.6l-5.7-1.7l-2.4-2.6V260l0.4-3.2l-3.7-1.2l-1.3-6h0.1l-1.3-2.7 l1.3-8.1l6.7-10.4l-1.7-2.3l2.8-2.1l0.3-3.7l-3.1-3.9l1.9-3.1l2.2-2l6.1-0.9l4.7-3.9l3.9,0.5l3.5,0.7l0.5,2.7l2.6,1l-0.3,2.9 l2.9,0.3l1.8,2.2l1,3.1l-2.8,2.4l2.3,4.8l9.2,2l3,1.6v2.8l4.8-1.9h0.1l2.7-1.6l2,3l0.1,3.2l-4.6,4.1L523.6,241.7z"></path>
<path data-nom="Doubs" data-numerodepartement="25" class="region-27 departement departement-25 departement-doubs" d="m590.1,245.2l-2.4,2.2l0.4,3l-4.8,6.2l-4.8,4 l-0.4,2.9l-2.5,2.7l-5.7,1.7l-0.3,0.3l-1.7,2.3l0.9,2.7l-0.7,4.5l0.5,2.5l-9.5,8.8l-2.9,5.2l-0.22,0.69l-3.68-3.49l3.6-7.4l2.1-2.3 l-4.2-4.1l-2.9-0.5l-5.8-10.1l-3,0.8l-1.5-2.5l-2,2.1l-1.2-2.5l3-5.1l-5.2-7.8l22.3-10.2l3-4.7l5.6-1.9l2.8,0.9l1.8-2.2l3.2-0.4 l0.5-2.8l5.9,0.8l0.2-0.1h0.1l5.9,2.7l-1.4,2.5l1.4,2.4l0.41-0.46l-0.11,0.16l-2.2,4.9l7-0.7L590.1,245.2z"></path>
<path data-nom="Jura" data-numerodepartement="39" class="region-27 departement departement-39 departement-jura" d="m552.3,291.4l3.68,3.49L553.4,303l-5.3,7.2 l-5.5,3.2l-3.8,0.2l-0.4-2.8l-3.4-1.6l-4,4.4l-2.9,0.1l-0.1-3h-2.9l-4.3-7.7l2.8-1.1l-0.8-5.3l2.8-5l-2.2-8.7l-2.5-1.6l5-3.7 l-8.3-4.4l-0.4-2.9l1.1-4.1l6.2-6.8l1.8-8.2l1.2-1.3l2.3,2l5.4,0.1l5.2,7.8l-3,5.1l1.2,2.5l2-2.1l1.5,2.5l3-0.8l5.8,10.1l2.9,0.5 l4.2,4.1l-2.1,2.3L552.3,291.4z"></path>
<path data-nom="Nièvre" data-numerodepartement="58" class="region-27 departement departement-58 departement-nievre" d="m462.8,250l5.5-0.4l1.3,6l3.7,1.2l-0.4,3.2v0.8 l-1.1,0.3l-2.7,0.4v1.3l-2.8,1l0.3,5.9l-2.1,1.7l4,7l-1.9,2.1l0.7,2.9l-11.3,5.7l-7-2.8l-5.9,6l-4.4-3.7l-2.8,1.7l-6.4-0.2l-5.7-6.3 l1.3-8.9l0.2-5.8l-2.2-2l-0.3-5.9l-3.1-7.6l-2.7-2.1l1.7-5.8l-2-6.5l1.5-2.4l2.8-0.7v0.1h3.4l7.4,4.8h6l4.6-4.3l3.9,5.6l5.5,3 l5.8-0.9l0.9,3.7l2.8-0.9L462.8,250z"></path>
<path data-nom="Haute-Saône" data-numerodepartement="70" class="region-27 departement departement-70 departement-haute-saone" d="m579.1,225.9l1.4,5.5l-0.2,0.1l-5.9-0.8 l-0.5,2.8l-3.2,0.4l-1.8,2.2l-2.8-0.9l-5.6,1.9l-3,4.7L535.2,252l-5.4-0.1l-2.3-2l-3.9-8.2l-2.6-1.4l4.6-4.1l-0.1-3.2l-2-3l-2.7,1.6 h-0.1l1.2-2.5l6.6-3.9l2.1,1.8l3.2-1l0.3-8.3l2-2.4l2.9,0.3l2.3-3.2l-0.2-1.4l8-5.8l7,4.3l5.8-1.6l4.9,3.6l5.1-2.2l8.4,6.6l-2.3,5.7 L579.1,225.9z"></path>
<path data-nom="Saône-et-Loire" data-numerodepartement="71" class="region-27 departement departement-71 departement-saone-et-loire" d="m517.2,270.2v0.1l0.4,2.9l8.3,4.4l-5,3.7 l2.5,1.6l2.2,8.7l-2.8,5l0.8,5.3l-2.8,1.1l-4.8-3.3l-5.4,1.3l-5.9-1.5l-5.9,20.9l-5.7-7.7l-1.6,2.3l-2.5-1.5l-2.2,1.6l-2.2-1.7 l-2.3,1.9l-0.29,2.91L482,318.2v0.1l-5.7,3.8l-2.1-2.1l-8,1.5l-5.2-3.3v-3l3.7-4.6l0.5-5.5l-1.6-2.4l-7.9-2.9l-6.7-13.5l7,2.8 l11.3-5.7l-0.7-2.9l1.9-2.1l-4-7l2.1-1.7l-0.3-5.9l2.8-1l2.7-1.7l1.1-0.3l2.4,2.6l5.7,1.7l1.3,2.6l5.5,1.9l5.6,6.3l8.8-4.2 L517.2,270.2z"></path>
<path data-nom="Yonne" data-numerodepartement="89" class="region-27 departement departement-89 departement-yonne" d="m425.8,207.1l-6.7-7.5l3.9-5.4l0.2-5.8l15.4-3 l3.6,1.5l4.5,5.5l2.5,8.3l2-2.2l3.6,4.1l5,10.9l12.6-1.6l2.9,1.4l-1.9,3.1l3.1,3.9l-0.3,3.7l-2.8,2.1l1.7,2.3l-6.7,10.4l-1.3,8.1 l1.3,2.7h-0.1l-5.5,0.4l-1.5-2.8l-2.8,0.9l-0.9-3.7l-5.8,0.9l-5.5-3l-3.9-5.6l-4.6,4.3h-6l-7.4-4.8H421v-0.1l-2.2-6.9l-3-2.8 l5.3-3.3l1.6-2.4l-1.1-2.9l4.6-4.9L425.8,207.1z"></path>
<path data-nom="Territoire de Belfort" data-numerodepartement="90" class="region-27 departement departement-90 departement-territoire-de-belfort" d="m580.3,215.9l0.9-0.6l7.6,5l0.5,9l2.8-0.2l2,5 l-0.1,0.1l-2.79,0.39l-1.11-0.39l-3.19,4.34L586.5,239l-1.4-2.4l1.4-2.5l-5.9-2.7h-0.1l-1.4-5.5l-1.1-4.3L580.3,215.9z"></path>
</g>
<g class="region region-28" data-nom="Normandie" data-code_insee="28">
<path data-nom="Calvados" data-numerodepartement="14" class="region-28 departement departement-14 departement-calvados" d="m316.9,148l-0.7,2.2l-5.6-1l-7,1.7l-7.2,5.4 l-2.9,0.3l-5.7-1.1l-2.6,1.7l-4.9-3l-6.4,2.3l-2.7-1.3l-0.9,2.7l-5.4,2.9l-9.7-2.1l-1.8-2.4l4.5-5.3l-1.6-2.3l8.1-4.9l-2.2-8.2 l2-2.6l-8.4-3.1l-0.5-6.6v-0.1l0.1-0.7l1.8,0.8l1.9-2.1l3.4-0.3l9.4,3.3l13.9,1.5l6.9,3.4l5.7-0.7l4.7-2.5l4.1-3.7l5.1-1.1l0.3,8.3 h2.9l-2.3,2.1l2.8,9.4l-1.4,3L316.9,148z"></path>
<path data-nom="Eure" data-numerodepartement="27" class="region-28 departement departement-27 departement-eure" d="m316.4,153.4l-0.2-3.2l0.7-2.2l-2.3-4.1l1.4-3l-2.8-9.4l2.3-2.1h-2.9 l-0.3-8.3l1.7-0.4l0.28-0.1h1.52l-0.9-0.2l0.8-0.3l-1.29-0.3l5.89-2.4l7.6,5l3.4-0.7l4.9,3l-1.9,2.4l2.1,2.1l5.4,2.4l1.4-2.7 l8.2-2.5l4.8-7l13.1,3.3l3.5,8.4l-4,2.6l-4,9.5l-3.8-0.1l-2.3,2.6l1.8,5.8l-6,6.9l0.2,2.8l-6,1.3l-2.8-1.6l-5.3,3.2l-6,1.1l-2.4,2.6 l-3.4-2.1l1.7-2.3l-7.8-9.5L316.4,153.4z"></path>
<path data-nom="Manche" data-numerodepartement="50" class="region-28 departement departement-50 departement-manche" d="m255.2,158.7l9.7,2.1l4.1,4.2l-1.8,6.7 l-3.6,4.5h-0.1l-8.6-0.8l-5.4-2.3l-7.1,4.8l-2.7-1l-4.7-9.6l1.9-0.2l4.8,0.4l2.5-1.1l0.5-2.2l-2.4,1.3l-5.1-5.6l-0.3-5.3l2-6.1 l-0.3-4.9l-1.8-3.6l0.4-7.4l1.5-2l-2.5,0.3l-2-5l0.3-2.2l-2.4-1.2l-2.9-4.1l-0.7-5.9l-1.4-1.9l1.8-1.8l0.1-2.8l-0.5-2.3l-2.2-1.1 l-1-2.5l2.1-0.2l11.9,4.2h2.4l4-2.6l5.1,0.6l1.8,1.7l0.9,2.7l-3.2,5.2l4,6.5l1.1,4.3l-0.1,0.7v0.1l0.5,6.6l8.4,3.1l-2,2.6l2.2,8.2 l-8.1,4.9l1.6,2.3l-4.5,5.3L255.2,158.7z"></path>
<path data-nom="Orne" data-numerodepartement="61" class="region-28 departement departement-61 departement-orne" d="m266.9,179.9l-3.3-3.7l3.6-4.5l1.8-6.7 l-4.1-4.2l5.4-2.9l0.9-2.7l2.7,1.3l6.4-2.3l4.9,3l2.6-1.7l5.7,1.1l2.9-0.3l7.2-5.4l7-1.7l5.6,1l0.2,3.2l6.3,0.5l7.8,9.5l-1.7,2.3 l3.4,2.1l0.1,3.2l4.8,4.4l-0.2,4.5l0.5,4.6l-7.5,5.1l1.1,7.5l-3.2-0.7l-3.1-3.5l-2.9,1l-7.2-5l-1.6-8.4l-2.8-1.5l-11,5.9l-3-0.1 v-0.1v-2.9l-3.3-1.6l-1.9-6l-2.7-0.2l-0.7,2.7h-9.1l-6.7,3.3l-2.5-1.7L266.9,179.9z"></path>
<path data-nom="Seine-Maritime" data-numerodepartement="76" class="region-28 departement departement-76 departement-seine-maritime" d="m314.41,119.8l-7.61-1.8l-1.2-2l-0.1-2.3 l4.4-9.7l13.8-7.4L326,95l10.3-2.1l4.8-1.8l2.4,0.3L352,87l5.11-4.09l11.79,9.99l3.4,8.4l-3.1,4.7l1.4,8.7l-1.3,8l-13.1-3.3l-4.8,7 l-8.2,2.5l-1.4,2.7l-5.4-2.4l-2.1-2.1l1.9-2.4l-4.9-3l-3.4,0.7l-7.6-5L314.41,119.8z"></path>
</g>
<g class="region region-32" data-nom="Hauts-de-France" data-code_insee="32">
<path data-nom="Aisne" data-numerodepartement="02" class="region-32 departement departement-02 departement-aisne" d="m450.3,82.6l16.7,4.6l2.91,0.94L470.6,94l-1.3,3.5l1.3,3.1l-5,7.2 l-2.7,0.3l0.3,14.3l-1,2.8l-5.3-1.8l-8,4l-1.2,2.6l3.2,8l-5.5,2.3l1.6,2.4l-0.8,2.7l2.5,1.3l-7.7,10.2l-9.3-6l-3.9-4.2l0.7-2.8 l-1.8-2.5l-2.6-0.7l2.1-1.7l-0.5-2.8l-2.9-1.1l-2.4,1.5l-0.7-2.9l3,0.2l-2.9-4.5l2.6-1.7l2.4-5.7l2.6-1.1l-2.2-1.8l0.8-4.5 l-0.4-10.2l-2.3-7l3.9-8.1l0.4-3.8l12.6-0.6l2.6-2.2l2.3,1.7L450.3,82.6z"></path>
<path data-nom="Nord" data-numerodepartement="59" class="region-32 departement departement-59 departement-nord" d="m384.33,25.06l0.87-0.26l2,0.8l1.1-2.1l7.9-2.1 l2.9,0.3l4.4-1.9v-0.1l1.2,4.8l2.3,3.7l-1.6,1.9l0.6,0.8l1.2,5.8h3.4l2.7,5.1l3.1,1.5h2.1l0.6-2.4l8.1-3l3.8,7.5l0.1,1l1.3,5.2 l2,3.5h0.1l2.8,0.6l2.1-1.4l2.4-0.2l-0.5,2.2l2.2-0.7l2.8,1l1.8,4.4l-0.6,2.3l0.7,2.3l1.4,1.9l1.1-2.6l4.6-0.3l2.4,1.1L462,64l5.5,6 l2.3,0.2l-2.1,2.4l-1.4,4.7l2.6,0.2l1.4,3.3l-3.5,3.9l0.2,2.5l-16.7-4.6l-5.2,1.8l-2.3-1.7l-2.6,2.2l-12.6,0.6l-3.3-2.6l3.5-10.6 l-1.8-2.4l-3-0.4l0.7-2.7l-3.9-5.2l3.1-1.6l-3.8-5.3l-5.9-1l1-6.1l-1.3-2.5l-1.7,2.2l-11.6-0.5l-4.1-4.2l0.6-2.8l-5.5-2.6 L384.33,25.06z"></path>
<path data-nom="Oise" data-numerodepartement="60" class="region-32 departement departement-60 departement-oise" d="m372.8,131.1l-3.5-8.4l1.3-8l-1.4-8.7l3.1-4.7 l4.1,3.7l3.1-1.2l14.4,2.2l12.8,6.7l8.6-6.8l10.3-1.5l0.4,10.2l-0.8,4.5l2.2,1.8l-2.6,1.1l-2.4,5.7l-2.6,1.7l2.9,4.5l-3-0.2l0.7,2.9 l2.4-1.5l2.9,1.1l0.5,2.8l-2.1,1.7l-8.1,2.9l-2.5-1.6l-2,2.2l-6.9-1l-10.9-6.4l-2.2,1.6l-9.2-2.2L376,138l-5.6-1.1l-1.6-3.2 L372.8,131.1z"></path>
<path data-nom="Pas-de-Calais" data-numerodepartement="62" class="region-32 departement departement-62 departement-pas-de-calais" d="m379.8,68.9l7.1,5.8l12-2.5l-2.6,5.7L398,81 l2.5-3.1l8.4,3.5l0.8-2.8l2.8,4.6l2.4-1.7l0.8,3.2l8.6-1.8l3.5-10.6l-1.8-2.4l-3-0.4l0.7-2.7l-3.9-5.2l3.1-1.6l-3.8-5.3l-5.9-1 l1-6.1l-1.3-2.5l-1.7,2.2l-11.6-0.5l-4.1-4.2l0.6-2.8l-5.5-2.6l-6.27-12.14L372.6,28.5l-6.4,5.4l0.9,5.6l-1.7,4.6l0.6,6.7l2,4.2 l-1.7-1.4l-0.3,9.7l2.27,1.58l10.53,1.02L379.8,68.9z"></path>
<path data-nom="Somme" data-numerodepartement="80" class="region-32 departement departement-80 departement-somme" d="m424.3,82.9l3.3,2.6l-0.4,3.8l-3.9,8.1l2.3,7 l-10.3,1.5l-8.6,6.8l-12.8-6.7l-14.4-2.2l-3.1,1.2l-4.1-3.7l-3.4-8.4l-11.79-9.99L359.5,81l3.4-6.6l1.9-1.1l0.1-0.1l1.4,1.8l3.5,0.3 l-5.6-6l1.2-5.1l2.9,0.7l-0.03-0.02l10.53,1.02l1,3l7.1,5.8l12-2.5l-2.6,5.7L398,81l2.5-3.1l8.4,3.5l0.8-2.8l2.8,4.6l2.4-1.7 l0.8,3.2L424.3,82.9z"></path>
</g>
<g class="region region-44" data-nom="Grand Est" data-code_insee="44">
<path data-nom="Ardennes" data-numerodepartement="08" class="region-44 departement departement-08 departement-ardennes" d="m469.91,88.14l0.79,0.26l9.8,0.4l7.3-3.2l1.1-6 l4-3.8l2.8-0.2v3.8L494,81l-0.6,5.2l3.3,4.5l-1,2.4l0.6,3.1l1.4,1.9l3.3-0.9l4.3,2.4l2.8,3.8l4.9,0.6l2,1.7l-0.9,2.4l2.1-0.13 l-1.6,1.13l-2,2.7l-5.7-2.1l-1.9,2l0.8,8.8l-3.2,5.1l1.4,2.5l-4.2,3.6v0.1l-20.1-1.9l-9.8-6.6l-6.7-0.9l-0.3-14.3l2.7-0.3l5-7.2 l-1.3-3.1l1.3-3.5L469.91,88.14z"></path>
<path data-nom="Aube" data-numerodepartement="10" class="region-44 departement departement-10 departement-aube" d="m442.2,186.9l-3.6-1.5l-0.4-8.5l2.9-0.8l3-5 l3.2,4.5l9,1.2v-3.3l9.5-7.6l6.5-0.9l3.1,0.5l0.4,6.1l2.6,2c1.9,0.8,3.8,1.5,5.6,2.3l2.5-1.5l3.3,1.1l-0.6,3.4l2.4,5.2l5.6,3 l0.5,9.9l-0.1,2.7l-5.6,2.5l0.2,4.8l-3.9-0.5l-4.7,3.9l-6.1,0.9l-2.2,2l-2.9-1.4l-12.6,1.6l-5-10.9l-3.6-4.1l-2,2.2l-2.5-8.3 L442.2,186.9z"></path>
<path data-nom="Marne" data-numerodepartement="51" class="region-44 departement departement-51 departement-marne" d="m440.6,158.9l0.4-2l7.7-10.2l-2.5-1.3l0.8-2.7 l-1.6-2.4l5.5-2.3l-3.2-8l1.2-2.6l8-4l5.3,1.8l1-2.8l6.7,0.9l9.8,6.6l20.1,1.9l2.2,9l-1,4.1l2.6,1.3l-0.6,3.9l-3.1,1.1l-1.1,5.8 l3.2,4.6l0.5,4.1l-8.6,2.2l2.2,2.5l-2.3,2.2l0.7,2.9h-4.7l-3.3-1.1l-2.5,1.5c-1.8-0.8-3.7-1.5-5.6-2.3l-2.6-2l-0.4-6.1l-3.1-0.5 l-6.5,0.9l-9.5,7.6v3.3l-9-1.2l-3.2-4.5l-2.6-1.7l-3.5-8.3L440.6,158.9z"></path>
<path data-nom="Haute-Marne" data-numerodepartement="52" class="region-44 departement departement-52 departement-haute-marne" d="m493.9,167.9l8.6-2.2l3.4,5.2l16.9,10.4 l-2.4,2.3l12.7,9.5l-1.7,8.6l5.5,4.7l0.2,3.1l2.7-1.1l1.3,2.5v0.1l0.2,1.4l-2.3,3.2l-2.9-0.3l-2,2.4l-0.3,8.3l-3.2,1l-2.1-1.8 l-6.6,3.9l-1.2,2.5l-4.8,1.9v-2.8l-3-1.6l-9.2-2l-2.3-4.8l2.8-2.4l-1-3.1l-1.8-2.2l-2.9-0.3l0.3-2.9l-2.6-1l-0.5-2.7l-3.5-0.7 l-0.2-4.8l5.6-2.5l0.1-2.7l-0.5-9.9l-5.6-3l-2.4-5.2l0.6-3.4h4.7l-0.7-2.9l2.3-2.2L493.9,167.9z"></path>
<path data-nom="Meurthe-et-Moselle" data-numerodepartement="54" class="region-44 departement departement-54 departement-meurthe-et-moselle" d="m588.2,170.9l1.9,1.3l-1.5,0.4l-10.6,7.6l-6.1-1.6l-1.6-2.7l-5.3,3.8 l-6,1l-2.4-1.8l-5.4,2l-1.1,2.8l-5.7,0.7l-4.1-4.8l0.1-2.9l-5.8-0.6l0.2-2.9l-2.5-2l1.7-2.8l-1.3-8.6l2.2-13.8l0.9-2.7l-4.9-11.5 l1.5-5.9l-1.2-2.7l-4.4-4.8l-5.3,2l-0.7-5.3l4.8-1.7l2-1.9h6.8l2.54,2.31L539.6,124l2.5,1.6l1.2,3.6l-1.7,3.1l1,5.6l-2.8,0.1 l4.3,7.5l11.5,4l-0.3,2.9l2.7,5.1l8.5,1.5l5.3,3.9l14.4,5.3L588.2,170.9z"></path>
<path data-nom="Meuse" data-numerodepartement="55" class="region-44 departement departement-55 departement-meuse" d="m516.2,107.97l1.2-0.07l1.5,1.6l1.9,5.6 l0.7,5.3l5.3-2l4.4,4.8l1.2,2.7l-1.5,5.9l4.9,11.5l-0.9,2.7l-2.2,13.8l1.3,8.6l-1.7,2.8l2.5,2l-0.2,2.9l-1.9,2.3l-3-0.5l-6.9,3.4 l-16.9-10.4l-3.4-5.2l-0.5-4.1l-3.2-4.6l1.1-5.8l3.1-1.1l0.6-3.9l-2.6-1.3l1-4.1l-2.2-9v-0.1l4.2-3.6l-1.4-2.5l3.2-5.1l-0.8-8.8 l1.9-2l5.7,2.1l2-2.7L516.2,107.97z"></path>
<path data-nom="Moselle" data-numerodepartement="57" class="region-44 departement departement-57 departement-moselle" d="m539.6,124l-2.65-10.19l0.65,0.59h2.4l1.5,2.1 l2.3,0.7l2.3-0.5l1-2.3l2-1.2l2.2-0.2l4.5,2.3l4.9-0.1l3.1,3.8l2.3,1.9l-0.5,2l3.7,3.2l2.8,4.5v2.3l4.2,0.7l1.2-1.9l-0.3-2.4 l2.6-0.2l3.8,1.8l1.4,3.5l2.1-1.5l2.5,1.9l5.8-0.4l5.3-4.2l2.2,1.4l0.5,2.1l2.4,2.4l3.2,1.5h0.03l-1.73,4.4l-1.4,2.6l-8.9,0.3 l-9.1-4.6l-0.8-2.8l-5,10.8l5.5,2.4l-1.6,2.5l2.3,1.7l1.3-2.5l3,0.3l4.3,3.4l-3,13.3l-2.3,1.8l-3.4-0.3l-2-2.7l-14.4-5.3l-5.3-3.9 l-8.5-1.5l-2.7-5.1l0.3-2.9l-11.5-4l-4.3-7.5l2.8-0.1l-1-5.6l1.7-3.1l-1.2-3.6L539.6,124z"></path>
<path data-nom="Bas-Rhin" data-numerodepartement="67" class="region-44 departement departement-67 departement-bas-rhin" d="m631.8,140.7l-2.8,9.4l-7.8,10.5l-2,1.5l-1.4,3.3l0.3,4.9l-2.4,7.2 l0.7,3.6l-1.5,2l-1.2,5.5l-3.16,6.23L605.9,193l-0.3-2.8l-8.5-5.6l-3.1-0.2l-5.2-2.2l1.3-10l-1.9-1.3l3.4,0.3l2.3-1.8l3-13.3 l-4.3-3.4l-3-0.3l-1.3,2.5l-2.3-1.7l1.6-2.5l-5.5-2.4l5-10.8l0.8,2.8l9.1,4.6l8.9-0.3l1.4-2.6l1.73-4.4l8.87,0.6l2.4-0.6 L631.8,140.7z"></path>
<path data-nom="Haut-Rhin" data-numerodepartement="68" class="region-44 departement departement-68 departement-haut-rhin" d="m605.9,193l4.64,1.83l-0.04,0.07v5.3l1.6,1.9 l0.2,3.4l-2.2,11.1l0.1,6.7l1.8,1.5l0.6,3.5l-2.2,2l-0.2,2.3l-3.1,0.9l0.5,2.2l-1.5,1.6h-2.7l-3.8,1.4l-3-1.1l0.3-2.5l-2.4-1.1 l-0.4,0.1l-2-5l-2.8,0.2l-0.5-9l-7.6-5l2.8-2.4v-6.2l4.8-7.8l4.1-13.5l1.1-1l3.1,0.2l8.5,5.6L605.9,193z"></path>
<path data-nom="Vosges" data-numerodepartement="88" class="region-44 departement departement-88 departement-vosges" d="m520.4,183.6l2.4-2.3l6.9-3.4l3,0.5l1.9-2.3 l5.8,0.6l-0.1,2.9l4.1,4.8l5.7-0.7l1.1-2.8l5.4-2l2.4,1.8l6-1l5.3-3.8l1.6,2.7l6.1,1.6l10.6-7.6l1.5-0.4l-1.3,10l5.2,2.2l-1.1,1 l-4.1,13.5l-4.8,7.8v6.2l-2.8,2.4l-0.9,0.6l-8.4-6.6l-5.1,2.2l-4.9-3.6l-5.8,1.6l-7-4.3l-8,5.8v-0.1l-1.3-2.5l-2.7,1.1l-0.2-3.1 l-5.5-4.7l1.7-8.6L520.4,183.6z"></path>
</g>
<g class="region region-52" data-nom="Pays de la Loire" data-code_insee="52">
<path data-nom="Loire-Atlantique" data-numerodepartement="44" class="region-52 departement departement-44 departement-loire-atlantique" d="m213.1,265.2l1.8-1l-2.8-4.1l-7.8-3l3-1.3 l0.6-2.2l-0.5-2.5l1.4-2.1l5.8-1.1l-5.5-0.7l-6.6,3.7l-4.1-3.2l-2.2,1l-2.2-1.2l-0.5-4.9l0.9-2.5l3-0.5l-0.9-2.2l-0.18-0.31 l13.18-3.89l0.4-6l5.2-3.4l13.2-0.4l1.6-2.9l9-3.9l6.8,3.6l7.2,13.3l-2.7-0.4l-1.9,2.4l8.5,3.3l0.3,5.9l-14.3,2.1l-2.9,2.2l3,0.8 l3.6,4.7l0.8,2.8l-2.8,4.5l2.8,1.4l0.4,3l-4.8-3.5l-1.5,2.4l-3.2,0.7l0.5,3l-2.4,2.1l-2.3-1.7v-3.1l-3.4,0.2l-0.2,9.5l-11.7-5 L213.1,265.2z"></path>
<path data-nom="Maine-et-Loire" data-numerodepartement="49" class="region-52 departement departement-49 departement-maine-et-loire" d="m270.6,269.2l-12.3,0.8l-10.6-3.8l-0.4-3 l-2.8-1.4l2.8-4.5l-0.8-2.8l-3.6-4.7l-3-0.8l2.9-2.2l14.3-2.1l-0.3-5.9l-8.5-3.3l1.9-2.4l2.7,0.4l-7.2-13.3l0.4-2.2l10.5,3.5 l2.1-1.9l8.7,3.6l3,0.4l5.9-2.7l5.1,1.7l0.6,2.7l6.7-0.2l0.2,3.5l2,2l3.1-1.3l5.2,3.3l7.4,0.1l-0.7,2.4l-1.7,9.3l-5.8,15.3v0.1 l-6.6,5.9l-2.3-2.3l-9.6,0.2l-5.6,0.8L270.6,269.2z"></path>
<path data-nom="Mayenne" data-numerodepartement="53" class="region-52 departement departement-53 departement-mayenne" d="m256.6,221.5l-10.5-3.5l3.6-8.6l5.5-2.2 l-1.9-17.3l1.5-2.4l0.1-12.1l8.6,0.8h0.1l3.3,3.7l2.4-1.6l2.5,1.7l6.7-3.3h9.1l0.7-2.7l2.7,0.2l1.9,6l3.3,1.6v2.9v0.1l-4.3,2.7 l0.3,6.9l-4.4,4l1.2,2.9l-5,4.6l1.4,3.4l-5.5,7.7l1.5,5.6l-5.1-1.7l-5.9,2.7l-3-0.4l-8.7-3.6L256.6,221.5z"></path>
<path data-nom="Sarthe" data-numerodepartement="72" class="region-52 departement departement-72 departement-sarthe" d="m312.7,235.3l-6.1-2.6l-7.4-0.1l-5.2-3.3 l-3.1,1.3l-2-2l-0.2-3.5l-6.7,0.2l-0.6-2.7l-1.5-5.6l5.5-7.7l-1.4-3.4l5-4.6l-1.2-2.9l4.4-4l-0.3-6.9l4.3-2.7l3,0.1l11-5.9l2.8,1.5 l1.6,8.4l7.2,5l2.9-1l3.1,3.5l3.2,0.7l2.1,3.8l-0.4,1.8v0.1l-2,2.1l1.7,2.2l0.4,5.5l-6.3,10.6l-3.2,1.1l-0.6,3.5l-7.7,4.5l-2.8-0.3 L312.7,235.3z"></path>
<path data-nom="Vendée" data-numerodepartement="85" class="region-52 departement departement-85 departement-vendee" d="m269.3,305.1l0.2-7.4l-4.7-17.9l-4.2-4.1l-2.3-5.7l-10.6-3.8l-4.8-3.5l-1.5,2.4l-3.2,0.7 l0.5,3l-2.4,2.1l-2.3-1.7v-3.1l-3.4,0.2l-0.2,9.5l-11.7-5l-5.6-5.6l-0.3,0.1l-0.8,2.6l-3.4,4.3l-1.2,2.3l0.2,2.4l8.7,9.5l2.7,5.6 l1.2,5.3l8,5.4l3.4,0.5l3.9,4.3l2.9-0.1l2,1.2l1.8,2.5l-0.9-2.1l3.9,3.3l0.5-2.7l2.4,0.3l7.1-2.7l-1.4,2.9l6.5-0.3l2.4,1.8l9.1-4.5 L269.3,305.1z"></path>
</g>
<g class="region region-53" data-nom="Bretagne" data-code_insee="53">
<path data-nom="Côtes-d’Armor" data-numerodepartement="22" class="region-53 departement departement-22 departement-cotes-darmor" d="m208.7,188.9l-4.9,7.1l-2.9,1.1l-1.5-2.7 l-3.5-0.9l-6.2,7.5l-1.8-6l-3,0.9l-12.9-6.5l-7.9,3l-12.46-3.29l2.06-4.11l-2.5-9.3l2.5-8.3l-3.6-4.7l1.1-4.3l1.2,1.4l3.2-0.4 l1.1-7.7l1.5-1.6l2.2-0.6l1.9,1.4h2.5l2.1-1l2.2,0.3l1.5-1.8l0.9,2L170,153l3-3.6l2.9-0.8l-0.1,2.3l-1.2,4.4l1.7-3.1l2.6-0.5l-1.1,2 l7.2,7.8l2.2,5.4l3,2l0.8,3.7l0.7-2.2l3-1l2.4-2.7l8.1-3.3l2.7-0.2l-2,2.5l2.9-1.1l1.8,4.4l1.3-1.9l2.5,0.2v-0.09l1.6,3.99h-0.3h0.3 l2.5,0.3l0.7,0.2l0.4,1.7l-1.9,13L208.7,188.9z"></path>
<path data-nom="Finistère" data-numerodepartement="29" class="region-53 departement departement-29 departement-finistere" d="m151.6,210.1l2,3.4l-0.8,1.4l-5.5-1.2l-1.2-1.9 l2.2-0.7l-3,0.8l-0.3-2.7v2.7l-2.5,0.7l-2.2-1l-4.2-6.1l-0.8,2.5l-2.3,0.2l-3.5-3.1l1.6-4.6l-2.4,4.3l1.3,1.9l-2.2,1l-1,2.8 l-5.9-0.2l-2.1-1.6l1.5-1.6l-1.5-5.5l-2.4-3.1l-2.8-1.8l1.6-1.7l-2.1,1.4l-7.5-2.2l2.2-1.3l12.5-1.8l1.8,1.8l2-1.3l0.7-2.5l-1.6-3.6 l-6.8-2.5l-1.5,2.6l-2.6-4.2l1.3-1.8l-0.3-2.2l1.7,2.3l4.9,1l4.6-0.8l2.1,3.1l5.4,1l-3.7-0.9l-2.8-2l2.2-0.5l-4.2-2l2-1.5l-2.6-0.2 l-2.7,0.8l-0.8-2.2l7.1-4.5l-4.4,2.2l-2.3,0.1l-7.5,2.9l-2.7-1.2l-2.7,1.2l-1.5-1.8l0.6-5.3l2.5-1.6l-2.2-0.9l0.8-2.6l1.8-1.6 l2.1-0.8l5.1,1.5l-1.9-1.1l2.5-1.2l1.6,1.4l-1.9-1.7l1.2-1.9l2.9-0.1l3.8-2l2.3,2.6l6.7-3.1l3,1.6l1-2.2l2.9-0.5l0.4,5l2.2-1.5 l1.3,2.5l1.2-4.5l4.7,0.3l1.2,1.7l-1.1,4.3l3.6,4.7l-2.5,8.3l2.5,9.3l-2.06,4.11l-0.04-0.01v0.1l-6.8,3.2l0.5,3.5l3.4,5.5l8.1,1.3 l0.1,5.4l-2.5,2.8L151.6,210.1z"></path>
<path data-nom="Ille-et-Vilaine" data-numerodepartement="35" class="region-53 departement departement-35 departement-ille-et-vilaine" d="m255.2,207.2l-5.5,2.2l-3.6,8.6l-0.4,2.2 l-6.8-3.6l-9,3.9l-1.6,2.9l-13.2,0.4l-5.2,3.4l-1-5.8l3-0.7l-2.8-1.5l2.4-2.2l1-3.2l-2.4-1.7l1.6-2.6l-1.2-2.5l-5.1-2.8l-0.5-2.8 l3.5-0.9l-3.6-0.1l-1-4.4l4.9-7.1l9-2.5l1.9-13l-0.4-1.7l-0.7-0.2l-2.5-0.3l-1.6-3.99l0.05-0.86l0.05-0.85l0.7-0.1h2.1v0.1l1.7,4.4 l1.3,2l-0.5,2.1l1.4-2.1l-2.3-5.1l0.7-2.5l2.2-1.5l2.3-0.6l2.2,1l-1.5,2.3l2.9,2.4l7.3-0.6l4.7,9.6l2.7,1l7.1-4.8l5.4,2.3l-0.1,12.1 l-1.5,2.4L255.2,207.2z"></path>
<path data-nom="Morbihan" data-numerodepartement="56" class="region-53 departement departement-56 departement-morbihan" d="M167.7,242.6l2.9,1.2l-1.1,2.1l-5.1-1.2l-1.3-2.7l0.4-3l2.1,1.4L167.7,242.6z M209.1,219.2l2.4-2.2l1-3.2 l-2.4-1.7l1.6-2.6l-1.2-2.5l-5.1-2.8l-0.5-2.8l3.5-0.9l-3.6-0.1l-1-4.4l-2.9,1.1l-1.5-2.7l-3.5-0.9l-6.2,7.5l-1.8-6l-3,0.9 l-12.9-6.5l-7.9,3l-12.46-3.29l-0.04,0.09l-6.8,3.2l0.5,3.5l3.4,5.5l8.1,1.3l0.1,5.4l-2.5,2.8l-2.8-0.8l2,3.4l0.1,1.5l2.9,4.4 l2.3-0.2l1.5-1.7l-0.8-5.1l0.6,2.4l1.7,1.7l1.9-1.7l-2.5,4.2l2.2,1.4l-2.3-0.6l3.2,1.9l0.1,0.1l1.6,1l1.7-2.5l-1.6,3.1l2.1,2.6 l0.6,3.5l-0.9,2.8l2.1,1.1l-1.2-3l0.5-3.8l2.2,1.6l5.1,0.1l-0.7-5l1.4,2l2.1,1.5l4.8-0.5l2.1,2.4l-1,2.2l-2.1-0.6l-4.8,0.4l3.8,3.3 l12.9-0.9l3.1,1.5l-3.4,0.1l1.42,2.39l13.18-3.89l0.4-6l-1-5.8l3-0.7L209.1,219.2z"></path>
</g>
<g class="region region-75" data-nom="Nouvelle-Aquitaine" data-code_insee="75">
<path data-nom="Charente" data-numerodepartement="16" class="region-75 departement departement-16 departement-charente" d="m294.8,379.2l-2,2v-0.1l-6.3-6.3l-6-1.2l1.7-3l-2.3-2l2.4-1.7l-1.5-2.6 l1.7-2.6l-2.4-1.7l-0.3-3l-5-3.1l2.2-2.1l-3.2-5.6l8.1-3.3l2.3,2l2.7-0.1l2.7-11.6l2.7-1.6l0.3-3l5.8-2.5l3.5,0.4l0.8-0.8h0.1l9.1,3 l2.9-0.8l-1.4-2.4l2.2-1.8l4.1,3.9l3.8-1.4l1.3-2.5l4.8,0.6l-0.2,5.1l4.7,3.6l-0.6,3.2l-2.6,1.1l-4,8l-2.8,0.6l-3.4,3.8h0.1 l-5.7,6.1l-2.1,5.3l-7.9,5.9l-0.7,5.7l-4.1,5.8L294.8,379.2z"></path>
<path data-nom="Charente-Maritime" data-numerodepartement="17" class="region-75 departement departement-17 departement-charente-maritime" d="M242.8,341.1l-1.4-5l-3.5-3l-1.3-2.3l1.5-3.6l1.7,1.8l2.9,0.5l1.4,8.4L242.8,341.1z M241.9,318.9l-5.8-4.5 l-4.4-1.5l-0.6,2.9l2.7,0.1l4.8,3.3L241.9,318.9z M286.5,374.8l-6-1.2l1.7-3l-2.3-2l2.4-1.7l-1.5-2.6l1.7-2.6l-2.4-1.7l-0.3-3 l-5-3.1l2.2-2.1l-3.2-5.6l8.1-3.3l2.3,2l2.7-0.1l2.7-11.6l-3.6-4.7l-17.4-6.7l-5.9-6.5v-3.7l-2.4-1.8l-6.5,0.3l1.4-2.9l-7.1,2.7 l0.5,0.1l-0.6,3.4l-4.5,5.9l2.4,0.3l2.2,1.7l3,7.2l-1.5,1.9l-0.2,5.1l-3.3,3.1l-0.1,2.6l-2.2,0.4l-1.5,1.7l1.1,4.3l9,6.5l1.5,2.6 l4.3,2.7l3.7,4.8l1.81,7.3l3.79-0.5l0.7,2.8l6.4,1.7l0.6,5.8l6.1,4.3l9.4,1l2-5l0.1-0.4v-0.1L286.5,374.8z"></path>
<path data-nom="Corrèze" data-numerodepartement="19" class="region-75 departement departement-19 departement-correze" d="m363.6,392.3l-8.1,0.8l-3.5-7l-3.2-0.7l-0.2-3 l-2.3-1.5l2-1.8l-1.7-3l3.6-4.6l-2.9-4.7l1.6-2.7l2.5,1.2l4.7-4l5.7-1.3l4.9-4.6l8.7-4l7-3.4l11.2,5.2l2.3-2.6l2.7,0.8l2.4-2.4 l1.2,5.6l-1.7,2.4l1.2,7.9l0.7,6l-6.2-2l-0.6,3.5l-7.6,9.5l1.8,2.2l-2.3,1.9l-0.3,3.5l-3.1,1.1l1.5,3.4l-3.2,1.9h-0.1l-6.7-0.2 l-5.3,2.7L363.6,392.3z"></path>
<path data-nom="Creuse" data-numerodepartement="23" class="region-75 departement departement-23 departement-creuse" d="m396.6,343.5l4.4,5.5l-2.4,2.4l-2.7-0.8 l-2.3,2.6l-11.2-5.2l-7,3.4l-0.6-5.9l-4.7-3l-6.4-0.5l-0.1-2.8l-2.9-1.5l0.9-3.4l-1.8-5.2l-6.6-9.8l3-5.3l-1.2-2.6l2.8-2.9l11.5-1.1 l1.9-2.5l13.2,2.7l2.7-0.8l4.9,0.2l1.1,3.9c2.5,1.6,4.9,3.2,7.4,4.8l3.6,8.4l-0.5,4.1l2.3,6.7L396.6,343.5z"></path>
<path data-nom="Dordogne" data-numerodepartement="24" class="region-75 departement departement-24 departement-dordogne" d="m307.7,414.3l-2.8-6.4l-1-1.3l0.9-2.9l-2.4-2.6l-2,3.2l-9.8-2.3l2-2 l0.2-5.7l2.8-5.5l-1.2-2.8l-3.7,0.6l2-5l0.1-0.4l2-2l5.5-0.7l4.1-5.8l0.7-5.7l7.9-5.9l2.1-5.3l5.7-6.1l6.2,3l-0.1,4.7l9.5-1.1 l7.2,5.6l-2,2.7l5.7,2.2l2.9,4.7l-3.6,4.6l1.7,3l-2,1.8l2.3,1.5l0.2,3l3.2,0.7l3.5,7l-0.7,5l-1.4,5.3l-4.5,3.2l0.6,3.6l-6,3.4 l-4.7,6.5l-4.2-4.2l-5.4,2.7l-1.5-6l-6.1,1l-2.2-1.8l-2.8,2L307.7,414.3z"></path>
<path data-nom="Gironde" data-numerodepartement="33" class="region-75 departement departement-33 departement-gironde" d="m243.9,420.1l-5.8,2.6v-4.6l2.2-3.2l0.5-2.3 l1.9-1.7l1.8,1.4l3.1-0.2l-1.1-4.6l-3.5-3.4l-2.8,4l-1.2,3.8l6.2-50l0.9-2.8l3.3-3.4l1.4,4.7l9,9l2.8,7.6l1.7-3.1l-0.59-2.4 l3.79-0.5l0.7,2.8l6.4,1.7l0.6,5.8l6.1,4.3l9.4,1l3.7-0.6l1.2,2.8l-2.8,5.5l-0.2,5.7l-2,2l9.8,2.3l2-3.2l2.4,2.6l-0.9,2.9l1,1.3 l-3.1-0.1l-1.2,2.5l-2.7-0.9l-1.1,3.3l2.9,1.4l-8.5,8.6l-0.6,8.9l-3,2.3l1.5,2.5l-4.5,4l-2.1-2.7l-1.6,3.6h-6.4l-0.6-4.7l-11-7.7 l0.4-2.8l-17.2,0.7l1.5-5.4L243.9,420.1z"></path>
<path data-nom="Landes" data-numerodepartement="40" class="region-75 departement departement-40 departement-landes" d="m222.32,481.21l1.08-1.51l3.9-7.1l8.8-37.8 l2-11.7v-0.4l5.8-2.6l3.7,1.3l-1.5,5.4l17.2-0.7l-0.4,2.8l11,7.7l0.6,4.7h6.4l1.6-3.6l2.1,2.7l0.4,4.6l11.7,2.9l-3.6,5.2l0.7,2.6 l-0.4,2.9l-2.5,1.3l-0.6-3l-9.4,2.7l0.5,6.4l-4.2,11.1l1.6,2.7l-8.6,1.5l-3.3-1.1l-4.8,1.9l-2.2-2l-2.3,1.5l-2.5-2.3l-9.8,2 l-1.6,2.2l-2.5-1.4l-2.7,1.3l-1.2-2.8l-11,2.5L222.32,481.21z"></path>
<path data-nom="Lot-et-Garonne" data-numerodepartement="47" class="region-75 departement departement-47 departement-lot-et-garonne" d="m293.8,455.6v0.1l-0.7-2.6l3.6-5.2L285,445 l-0.4-4.6l4.5-4l-1.5-2.5l3-2.3l0.6-8.9l8.5-8.6l-2.9-1.4l1.1-3.3l2.7,0.9l1.2-2.5l3.1,0.1l2.8,6.4l8.9-0.5l2.8-2l2.2,1.8l6.1-1 l1.5,6l5.4-2.7l4.2,4.2l-3.4,3.1l2.7,9.1l-7.5,2v2.9l2.4,1.4l-4.4,5.5l1.3,2.7l-2.8-0.2l-3.6,4.7l-2.7,1.3l-8.6-1l-5,2.9l-8.3-0.7 l-1.4,2.5L293.8,455.6z"></path>
<path data-nom="Pyrénées-Atlantiques" data-numerodepartement="64" class="region-75 departement departement-64 departement-pyrenees-atlantiques" d="m276.9,513.4l3.4-0.8l-0.4-2.9l8-9.3l-0.8-3.1 l2.7-1.4l-0.5-7.2h-2.9l1.5-2.8l-2.5-5.8l-6.6-0.3l-8.6,1.5l-3.3-1.1l-4.8,1.9l-2.2-2l-2.3,1.5l-2.5-2.3l-9.8,2l-1.6,2.2l-2.5-1.4 l-2.7,1.3l-1.2-2.8l-11,2.5l-3.98-1.89l-3.52,4.89l-2.7,1.9l-4.5,0.9l1.9,4.5l4.5-0.2l0.2,2.2l2.4,1l2.2-2.1l2.4,1.3l2.5,0.1 l1.4,2.8l-2.5,6.7l-2.1,2.2l1.3,2.2l4.3-0.1l0.7-3.4l2.3-0.1l-1.3,2.4l5.9,2.3l1.5,1.8h2.5l6.1,3.8l5.8,0.4l2.3-1l1.4,2.1l0.3,2.8 l2.7,1.3l3.9,4l2.1,0.9l1.1-2.1l2.7,2.1l3.6-1.1l0.19-0.16l1.41-9.34L276.9,513.4z"></path>
<path data-nom="Deux-Sèvres" data-numerodepartement="79" class="region-75 departement departement-79 departement-deux-sevres" d="m292.3,331.6l-2.7,1.6l-3.6-4.7l-17.4-6.7 l-5.9-6.5v-3.7l9.1-4.5l-2.5-2l0.2-7.4l-4.7-17.9l-4.2-4.1l-2.3-5.7l12.3-0.8l3.7-4.8l5.6-0.8l9.6-0.2l2.3,2.3l3.4,9l-0.8,3l2.7,1.2 l-4.5,14.1l2.7-0.9l1.5,3l-3.4,5.5l0.5,5.8l2.1,2l-0.1,2.8l6.4,0.2l-3.2,8.5l4.5,3l-0.8,2.8h-0.1l-0.8,0.8l-3.5-0.4l-5.8,2.5 L292.3,331.6z"></path>
<path data-nom="Vienne" data-numerodepartement="86" class="region-75 departement departement-86 departement-vienne" d="m329.6,320.8v3.5l-4.8-0.6l-1.3,2.5l-3.8,1.4 l-4.1-3.9l-2.2,1.8l1.4,2.4l-2.9,0.8l-9.1-3l0.8-2.8l-4.5-3l3.2-8.5l-6.4-0.2l0.1-2.8l-2.1-2l-0.5-5.8l3.4-5.5l-1.5-3l-2.7,0.9 l4.5-14.1l-2.7-1.2l0.8-3l-3.4-9l6.6-5.9l5.5,3.2l0.3,3.2l2.9-0.3l1.3,6.1l2.8,1.4l10-0.4l-1.4-2.9l5.3,3l0.3,3.1l7.1,10l2.1,3 l-0.8,5.8l4.6,4.4h2.9l2.6,5.4l2.5,1.3l-1.5,2.8l-0.8-0.3l-1.3,2.4l-3.3-0.9l-1.3,3l-5.6,2.7L329.6,320.8z"></path>
<path data-nom="Haute-Vienne" data-numerodepartement="87" class="region-75 departement departement-87 departement-haute-vienne" d="m348.9,364.1l-1.6,2.7l-5.7-2.2l2-2.7l-7.2-5.6 l-9.5,1.1l0.1-4.7l-6.2-3h-0.1l3.4-3.8l2.8-0.6l4-8l2.6-1.1l0.6-3.2l-4.7-3.6l0.2-5.1v-3.5l3-5l5.6-2.7l1.3-3l3.3,0.9l1.3-2.4 l0.8,0.3l2.6,1.1l5.8-1.1l1.7,2.5l1.2,2.6l-3,5.3l6.6,9.8l1.8,5.2l-0.9,3.4l2.9,1.5l0.1,2.8l6.4,0.5l4.7,3l0.6,5.9l-8.7,4l-4.9,4.6 l-5.7,1.3l-4.7,4L348.9,364.1z"></path>
</g>
<g class="region region-76" data-nom="Occitanie" data-code_insee="76">
<path data-nom="Ariège" data-numerodepartement="09" class="region-76 departement departement-09 departement-ariege" d="m369.82,543.59l0.78-0.89l-2.6-1.1l-2-2.1 l-3.7-0.1l-1.7-1.7l-2.8,0.4l-1.3,2.1l-2.4-0.8l-2.8-5.9l-10-0.6l-1.3-2.8l-13.2-3.9l-0.5-1.4l3.8-5.2l2.8-1v-5.9l3.9-4l2.8-1.1 l6.2,4.1l-0.4-5.6l5.4-1.6l-3-4.8l2.8-1.1l3.4,5.5l2.8-0.5l0.6-2.8l5.7,2.2l2-2.3l2.2,5.5l8.7,3.9l2.2,5.2l0.2,3.1l-2.2,2.3l2.4,2.5 l-1.2,3l-3.2,0.6l0.8,5.7l3.4,1.5l3.3-1.2l4.8,5.6l-7.4,0.2l-1.3,2.6L369.82,543.59z"></path>
<path data-nom="Aude" data-numerodepartement="11" class="region-76 departement departement-11 departement-aude" d="m435.07,504.37l-1.47,1.53l-5.2,9.3l-0.9,3.5 l0.15,9.57l-9.45-5.57l-8.2,5.4l-13.6-1l-2.7,1.4l1.4,6l-8.6,3.9l-4.8-5.6l-3.3,1.2l-3.4-1.5l-0.8-5.7l3.2-0.6l1.2-3l-2.4-2.5 l2.2-2.3l-0.2-3.1l-2.2-5.2l-8.7-3.9l-2.2-5.5l8.4-10l1.4,2.7l5.2-1.8l0.5-0.8l1.8,2.3l6.3,0.9l1.1-3.3l2.8-0.5l12,1.4l-0.5,2.8 l3.5,5l2.5-1.6l1.4,2.9l3.1-0.8l3.8-5.3l1,2.9l13.8,4.7l1.7,2L435.07,504.37z"></path>
<path data-nom="Aveyron" data-numerodepartement="12" class="region-76 departement departement-12 departement-aveyron" d="m430.8,440.7l9.4,4.5l-2,3.9l-2.8,1.1l8.4,4.1 l-4.3,5.3l0.3,1.5l-3.7,1l-3,5.3l-6.3-1.3l-0.1,8.7l-5.7-0.1l-1.3-2.8l-11.1-1.3l-4.2-5l-4.3-11.5l-4.8-4.3L385,444l-6.1,2.8 l-4.3-3.6l2.3-2.4l-3.1-2.7l0.4-3l-0.8-9.1l7.6-5l5.9-1.4l1.7-1.5h0.1l5.1-3.2l6.4,1.5l3.8-4.8l3-9.1l4.7-4.2l5.2,4l1.3,4.2l2.4,1.6 l-0.5,3l2.6,5.1v0.1l4.2,4.5l2.9,8.8l-0.5,8.7L430.8,440.7z"></path>
<path data-nom="Gard" data-numerodepartement="30" class="region-76 departement departement-30 departement-gard" d="m480,487.2l-2.8-0.6l-1.9-1.6l-1.1-3.4h-0.1 l3.3-4.4l-1.5-3l-6.1-6.7l-3-0.2l-0.2-3l-6.8-1.4l0.9-2.7l-1.9-2.6l-3.9,0.6l-4.2,3.9l-0.1,2.8l-5.3-2.5l-2.2,1.7l-0.4-2.9l-2.9-0.1 l-0.3-1.5l4.3-5.3l-8.4-4.1l2.8-1.1l2-3.9l7.8,3.4l3.9-0.5l0.1-3.3l8.7,2.2l6.3-1.8l-1.4-3l1.2-2.9l-3.9-7.7l3.6-2.5l1.1-2.1 l2.7,5.9l7.8,5l7.1-4.3l0.1,3.1l2.5-2.3h2.8l6,3.5l2.6,4.4l0.2,5.5l6.3,6.4l-4.5,5l-3.9,4.1l-1.9,10.6l-3.3-0.9l-4.2,4.8l1,2.7 l-5.8,1.8L480,487.2z"></path>
<path data-nom="Haute-Garonne" data-numerodepartement="31" class="region-76 departement departement-31 departement-haute-garonne" d="m326.8,526.2l-5.5-1.5l-1.2,2.4l0.2,7.6 l-8.8-0.7l-1.7,0.3l-0.6-7l5.5-3.2l2.6-5.3l-0.8-2.7l-3.1,0.3l0.6-3.5l-4.6-4l7.1-11.2l3.1-1.1l3.5-5.3l11.4,2.5l0.7-5.8l6.5-6.1 l-9.1-13.3l9.9-0.9l1.7,2.3l5.8-2.5l-2.2-2.3l11.7-4.3l1.4,6.3l2.6,1.2l0.2,2.8l2.3,2.1l-0.7,5.4l14.3,9.3l1,2.8l-0.5,0.8l-5.2,1.8 l-1.4-2.7l-8.4,10l-2,2.3l-5.7-2.2l-0.6,2.8l-2.8,0.5l-3.4-5.5l-2.8,1.1l3,4.8l-5.4,1.6l0.4,5.6l-6.2-4.1l-2.8,1.1l-3.9,4v5.9 l-2.8,1l-3.8,5.2L326.8,526.2z"></path>
<path data-nom="Gers" data-numerodepartement="32" class="region-76 departement departement-32 departement-gers" d="m330.6,461.7l2,6.9l9.1,13.3l-6.5,6.1l-0.7,5.8 l-11.4-2.5l-3.5,5.3l-3.1,1.1l-12.4-2.2l-1.4-3l-5.5,0.6l-2.6-8.7l-3.3-1.3l-2-3.5l-3.9,0.5l-6.6-0.3l-1.6-2.7l4.2-11.1l-0.5-6.4 l9.4-2.7l0.6,3l2.5-1.3l0.4-2.9v-0.1l3.7,0.7l1.4-2.5l8.3,0.7l5-2.9l8.6,1l2.7-1.3l5.3,1.7l-3.3,4.6L330.6,461.7z"></path>
<path data-nom="Hérault" data-numerodepartement="34" class="region-76 departement departement-34 departement-herault" d="m474.1,481.6l-2.4-0.1l-5.9,2.6l-3.6,3.2 l-7.2,4.6l-4.3,4.2l2.1-3.5l-4.3,6.6h-6.8l-5.5,4l-1.13,1.17l-0.17-0.17l-1.7-2l-13.8-4.7l-1-2.9l-3.8,5.3l-3.1,0.8l-1.4-2.9 l-2.5,1.6l-3.5-5l0.5-2.8l3.4-2l0.8-3l-0.7-9.7l6.1,2.2c2.3-1.5,4.6-2.9,6.8-4.4l5.7,0.1l0.1-8.7l6.3,1.3l3-5.3l3.7-1l2.9,0.1 l0.4,2.9l2.2-1.7l5.3,2.5l0.1-2.8l4.2-3.9l3.9-0.6l1.9,2.6l-0.9,2.7l6.8,1.4l0.2,3l3,0.2l6.1,6.7l1.5,3L474.1,481.6z"></path>
<path data-nom="Lot" data-numerodepartement="46" class="region-76 departement departement-46 departement-lot" d="m385.4,413.1l3.3,5h-0.1l-1.7,1.5L381,421 l-7.6,5l0.8,9.1l-6.2,0.8l-7.5,5.5l-2.6-2.3l-8.7,2.5l-0.5-4l-2.4,1.5l-2.7-1l-4.5-4l2.1-2.3l-3.1,0.5l-2.7-9.1l3.4-3.1l4.7-6.5 l6-3.4l-0.6-3.6l4.5-3.2l1.4-5.3l0.7-5l8.1-0.8l6.7,6.1l5.3-2.7l6.7,0.2l1,5.4l3.8,6L385.4,413.1z"></path>
<path data-nom="Lozère" data-numerodepartement="48" class="region-76 departement departement-48 departement-lozere" d="m463.4,418.7l4.2,8.3l-1.1,2.1l-3.6,2.5 l3.9,7.7l-1.2,2.9l1.4,3l-6.3,1.8l-8.7-2.2l-0.1,3.3l-3.9,0.5l-7.8-3.4l-9.4-4.5l-1.5-2.4l0.5-8.7l-2.9-8.8l-4.2-4.5v-0.1l6.9-15.9 l1.7,2.3l6.8-5.7l1-1l2.3,1.7l1.5,5.7l6.4,1.2l0.1-2.8l2.9,0.2l9,7.7L463.4,418.7z"></path>
<path data-nom="Hautes-Pyrénées" data-numerodepartement="65" class="region-76 departement departement-65 departement-hautes-pyrenees" d="m314.7,524.1l-5.5,3.2l0.6,7l-0.7,0.2l-2.3-1.6 l-2.4,1.8l-2.5-0.5l-1.9-1.7l-3.9-0.3l-6.9,2.1l-2.2-0.9l-2.1-1.7l-1.1-2.5l-7.8-5.5l-2.11,1.84l1.41-9.34l1.6-2.8l3.4-0.8l-0.4-2.9 l8-9.3l-0.8-3.1l2.7-1.4l-0.5-7.2h-2.9l1.5-2.8l-2.5-5.8l3.9-0.5l2,3.5l3.3,1.3l2.6,8.7l5.5-0.6l1.4,3l12.4,2.2l-7.1,11.2l4.6,4 l-0.6,3.5l3.1-0.3l0.8,2.7L314.7,524.1z"></path>
<path data-nom="Pyrénées-Orientales" data-numerodepartement="66" class="region-76 departement departement-66 departement-pyrenees-orientales" d="m427.65,528.27l0.25,15.63l3.9,3.3l1.9,3.8 h-2.3l-8.1-2.7l-6.9,3.9l-3-0.2l-2.4,1.1l-0.6,2.4l-2.1,1.2l-2.4-0.7l-2.9,1l-4-3.1l-7-2.9l-2.5,1.4h-3l-1,2.1l-4.6,2l-1.9-1.7 l-1.7-4.8l-7.5-2l-2-2.1l2.02-2.31l7.98-2.39l1.3-2.6l7.4-0.2l8.6-3.9l-1.4-6l2.7-1.4l13.6,1l8.2-5.4L427.65,528.27z"></path>
<path data-nom="Tarn" data-numerodepartement="81" class="region-76 departement departement-81 departement-tarn" d="m419.7,471.9l1.3,2.8c-2.2,1.5-4.5,2.9-6.8,4.4 l-6.1-2.2l0.7,9.7l-0.8,3l-3.4,2l-12-1.4l-2.8,0.5l-1.1,3.3l-6.3-0.9l-1.8-2.3l-1-2.8l-14.3-9.3l0.7-5.4l-2.3-2.1l-0.2-2.8l-2.6-1.2 l-1.4-6.3l0.5-2.8l4.8-3.2l1-2.7L364,450l3-1.1l2.7,1.1l9.2-3.2l6.1-2.8l10.3,5.8l4.8,4.3l4.3,11.5l4.2,5L419.7,471.9z"></path>
<path data-nom="Tarn-et-Garonne" data-numerodepartement="82" class="region-76 departement departement-82 departement-tarn-et-garonne" d="m360,458.1l-0.5,2.8l-11.7,4.3l2.2,2.3 l-5.8,2.5l-1.7-2.3l-9.9,0.9l-2-6.9l-5.1-4.1l3.3-4.6l-5.3-1.7l3.6-4.7l2.8,0.2l-1.3-2.7l4.4-5.5l-2.4-1.4v-2.9l7.5-2l3.1-0.5 l-2.1,2.3l4.5,4l2.7,1l2.4-1.5l0.5,4l8.7-2.5l2.6,2.3l7.5-5.5l6.2-0.8l-0.4,3l3.1,2.7l-2.3,2.4l4.3,3.6l-9.2,3.2l-2.7-1.1l-3,1.1 l1.8,2.2l-1,2.7L360,458.1z"></path>
</g>
<g class="region region-84" data-nom="Auvergne-Rhône-Alpes" data-code_insee="84">
<path data-nom="Ain" data-numerodepartement="01" class="region-84 departement departement-01 departement-ain" d="m542,347l-5.7,6.7l-11.2-15.2l-2.8,0.7l-3,5.1 l-6-2l-6.4,0.5l-3.7-5.7l-2.8,0.5l-3.1-9.2l1.5-8l5.9-20.9l5.9,1.5l5.4-1.3l4.8,3.3l4.3,7.7h2.9l0.1,3l2.9-0.1l4-4.4l3.4,1.6 l0.4,2.8l3.8-0.2l5.5-3.2l5.3-7.2l4.5,2.7l-1.8,4.7l0.3,2.5l-4.4,1.5l-1.9,2l0.2,2.8l0.46,0.19l-4.36,4.71h-2.9l0.8,9.3L542,347z"></path>
<path data-nom="Allier" data-numerodepartement="03" class="region-84 departement departement-03 departement-allier" d="m443.1,292.3l5.9-6l6.7,13.5l7.9,2.9l1.6,2.4l-0.5,5.5l-3.7,4.6 l-3.9,1.3l-0.5,3l1.5,12.4l-5.5,4.8l-3.5-4.3l-6.4-0.4l-1.4-3.2l-13.1-0.5l-1.6-2.5l-3.3,0.5l-4.4-4.5l1.2-2.8l-2.3-1.7l-11.2,8 l-2.5-1.2l-3.6-8.4c-2.5-1.6-4.9-3.2-7.4-4.8L392,307v-0.1l3.5-5.9l8.7-1l1.7-2.4l-1.7-5.3l2.3-1.9l8.4-2.9l4.8-3.7h4h0.1l5.7,6.3 l6.4,0.2l2.8-1.7L443.1,292.3z"></path>
<path data-nom="Ardèche" data-numerodepartement="07" class="region-84 departement departement-07 departement-ardeche" d="m496.5,434.2l0.1,3.7l-6-3.5h-2.8l-2.5,2.3 l-0.1-3.1l-7.1,4.3l-7.8-5l-2.7-5.9l-4.2-8.3l-2.1-9.1l6.7-6.4l5.9-1.9l3.4-5.9l3.4-0.4l-0.7-2.8l2.6-2.3l1.5-5.2l2.6,1.2v-3.1 l0.9-4.1l3.5-0.8l3.2-4.9l5-2.7l2,4.2l0.5,10.3l3.8,11.3l-1.5,6.2l-3.5,4.5l1,7.1l-3,5.9L496.5,434.2z"></path>
<path data-nom="Cantal" data-numerodepartement="15" class="region-84 departement departement-15 departement-cantal" d="m435.6,387.9l3.5,8l-1,1l-6.8,5.7l-1.7-2.3 l-6.9,15.9l-2.6-5.1l0.5-3l-2.4-1.6l-1.3-4.2l-5.2-4l-4.7,4.2l-3,9.1l-3.8,4.8l-6.4-1.5l-5.1,3.2l-3.3-5l1.7-5.8l-3.8-6l-1-5.4h0.1 l3.2-1.9l-1.5-3.4l3.1-1.1l0.3-3.5l2.3-1.9l-1.8-2.2l7.6-9.5l0.6-3.5l6.2,2l-0.7-6l7.5,3.5l1.5,2.5l6.7,0.3l6.5,5.4l3.7-4.1v3.9 l5.5,1.5l3.3,8.7l2.6,1.1L435.6,387.9z"></path>
<path data-nom="Drôme" data-numerodepartement="26" class="region-84 departement departement-26 departement-drome" d="m535.1,404.4l-3,0.5l-0.8-17.5l-3,1.7l-8.2-1.9 l-2.7,1l1.1-6.3l-3.3-7.8l-4.9-2.7l-9,3.1l0.5,10.3l3.8,11.3l-1.5,6.2l-3.5,4.5l1,7.1l-3,5.9l-2.1,14.4l5.9,0.7l3.5,4.2l8.7-3.9 l2.4,1.4l2.5-2.2l0.5,5.8l9.3,0.9l0.1,2.8l5.2,2.3l4.3-4.8l2.3-0.1l1-0.2l0.2-4.7l-10-5.7l-1.5-2.6l3.2-5.1l4.2,1.4l2.5-2.5l-3-2.3 l2.5-6.7l5.8-0.3l0.3-3.4l-5.9-0.8L535.1,404.4z"></path>
<path data-nom="Isère" data-numerodepartement="38" class="region-84 departement departement-38 departement-isere" d="m513.6,349.4l-0.3-7.1l6,2l3-5.1l2.8-0.7 l11.2,15.2l6.5,10.5l6.2,0.2l0.3-2.8l9.4,2.1l2.7,6.3l-2.3,5.5l1,5.4l5.2,1.5l-1.6,3.8l1.8,4.2l4.4,3.1l-0.4,5.8l-3.1-1.1l-12.6,3.9 l-0.9,2.8l-5.5,1.2l-1,3.1l-5.9-0.8l-5.4-4l-3,0.5l-0.8-17.5l-3,1.7l-8.2-1.9l-2.7,1l1.1-6.3l-3.3-7.8l-4.9-2.7l-9,3.1l-2-4.2v-4.4 l-0.2-1.1h0.1l4.4-3.9l-1.9-2.5l2.5-2.5l6.9-1.5L513.6,349.4z"></path>
<path data-nom="Loire" data-numerodepartement="42" class="region-84 departement departement-42 departement-loire" d="m499.3,365.9v4.4l-5,2.7l-3.2,4.9l-3.5,0.8 l-2.2-2.4l-2.6,1l-0.7-5.5l-6-2.2l-6.2,3l-2.8,0.4l-2.3-2l-2.8,0.8l3-7.1l-2.7-7.5l-4.6-3.8l-4.7-7.7l2.1-6.3l-2.5-2.7l5.5-4.8 l-1.5-12.4l0.5-3l3.9-1.3v3l5.2,3.3l8-1.5l2.1,2.1l5.7-3.8l0.01-0.09l2.09,2.99l-4.9,3.5l-1.6,8.6l5.2,6.7l-1.7,5.9l2.3,1.6 l-1.3,2.5l1.1,3l4.6,4.1l5.9,2.1l0.9,3l4.6,2.6h-0.1L499.3,365.9z"></path>
<path data-nom="Haute-Loire" data-numerodepartement="43" class="region-84 departement departement-43 departement-haute-loire" d="m485.4,376.3l2.2,2.4l-0.9,4.1v3.1l-2.6-1.2 l-1.5,5.2l-2.6,2.3l0.7,2.8l-3.4,0.4l-3.4,5.9l-5.9,1.9l-6.7,6.4l-9-7.7l-2.9-0.2l-0.1,2.8l-6.4-1.2l-1.5-5.7l-2.3-1.7l-3.5-8 l3.4-0.2l-2.6-1.1l-3.3-8.7l-5.5-1.5v-3.9v-0.1l9.6-3.2l8.5,0.1l5.2,3.2l11.1-0.7l2.8-0.8l2.3,2l2.8-0.4l6.2-3l6,2.2l0.7,5.5 L485.4,376.3z"></path>
<path data-nom="Puy-de-Dôme" data-numerodepartement="63" class="region-84 departement departement-63 departement-puy-de-dome" d="m449.1,332.4l3.5,4.3l2.5,2.7l-2.1,6.3l4.7,7.7 l4.6,3.8l2.7,7.5l-3,7.1l-11.1,0.7l-5.2-3.2l-8.5-0.1l-9.6,3.2v0.1l-3.7,4.1l-6.5-5.4l-6.7-0.3l-1.5-2.5l-7.5-3.5l-1.2-7.9l1.7-2.4 L401,349l-4.4-5.5l9.3-8.6l-2.3-6.7l0.5-4.1l2.5,1.2l11.2-8l2.3,1.7l-1.2,2.8l4.4,4.5l3.3-0.5l1.6,2.5l13.1,0.5l1.4,3.2L449.1,332.4z"></path>
<path data-nom="Rhône" data-numerodepartement="69" class="region-84 departement departement-69 departement-rhone" d="m493.1,312.7l5.7,7.7l-1.5,8l3.1,9.2l2.8-0.5 l3.7,5.7l6.4-0.5l0.3,7.1l-2.5,5l-6.9,1.5l-2.5,2.5l1.9,2.5l-4.4,3.9l-4.6-2.6l-0.9-3l-5.9-2.1l-4.6-4.1l-1.1-3l1.3-2.5l-2.3-1.6 l1.7-5.9l-5.2-6.7l1.6-8.6l4.9-3.5l-2.09-2.99l0.29-2.91l2.3-1.9l2.2,1.7l2.2-1.6l2.5,1.5L493.1,312.7z"></path>
<path data-nom="Savoie" data-numerodepartement="73" class="region-84 departement departement-73 departement-savoie" d="m603.7,362l-1,10.3l-3.1,1.4l-2.2,0.7l-4.5,3.4 l-1.5,2.4l-2.5-1.4l-5.1,1.3l-2,1.8v0.1l-6.8,1.9l-2,2l-7.7-3.5l-5.2-1.5l-1-5.4l2.3-5.5l-2.7-6.3l-9.4-2.1l-0.3,2.8l-6.2-0.2 l-6.5-10.5l5.7-6.7l2.3-13.6l2.7,6.7l2.7,0.9l1.3,2.5l3,1.7l2.6-1.6l3.2,0.8l4.6,3.6l9.4-13.9l2.4,1.6l-0.6,3l2.3,1.8l6.2,2.3 l2.2-1.5l0.62-0.76l1.88,4.66l2.7,1.1l1.5,1.9l2.8,0.4l-0.7,3l1.3,5.2l5.1,4L603.7,362z"></path>
<path data-nom="Haute-Savoie" data-numerodepartement="74" class="region-84 departement departement-74 departement-haute-savoie" d="m547,340.1l-2.7-6.7l-0.8-9.3h2.9l4.36-4.71 l2.24,0.91l2.3-1l2.3,0.1l3.4-3.5l2.1-1l1-2.3l-2.8-1.3l1.8-5.1l2.4-0.8l2.3,1l3.6-2.9l9.5-1.3l3.2,0.6l-0.5,2.7l4.2,4.1l-2.1,6.4 l-0.6,1.5l4.6,1.7l-0.1,4.8l2-1.4l4.6,6.6l-1.3,5l-2.5,1.7l-4.9,0.9l-0.6,3.7l0.02,0.04l-0.62,0.76l-2.2,1.5l-6.2-2.3l-2.3-1.8 l0.6-3l-2.4-1.6l-9.4,13.9l-4.6-3.6l-3.2-0.8l-2.6,1.6l-3-1.7l-1.3-2.5L547,340.1z"></path>
</g>
<g class="region region-93" data-nom="Provence-Alpes-Côte d'Azur" data-code_insee="93">
<path data-nom="Alpes-de-Haute-Provence" data-numerodepartement="04" class="region-93 departement departement-04 departement-alpes-de-haute-provence" d="m596.5,409.9l0.57-0.5l-0.37,4.5l-2.2,1.5 l-0.6,2.9l3.5,4l-1.8,4.8l0.19,0.21L589,435.1l-2,5.3l4.3,8.5l7,7.7l-5.2-0.6l-5.2,3.8l1.2,2.6l-3,1.4l-9.8,0.4l-1.2,3.5l-5.9-3.6 l-10.1,8.5l-4-4.8l-2.7,1.8l-5.3-0.2l-6.1-6l-3.4-1.1l1.7-2.5l-3.7-5.2l1.2-3l-2.2-5.4l4.3-4.8l2.3-0.1l1-0.2l5.9-1.4l3.8,1 l-3.4-4.9l3.9,1.1l1.4-8.6l5.3-4l3.3-0.7l3.5,4.5l0.7-3.8l3.8-4.2l11.1,3.3l9-10.2L596.5,409.9z"></path>
<path data-nom="Hautes-Alpes" data-numerodepartement="05" class="region-93 departement departement-05 departement-hautes-alpes" d="m597.1,409l-0.03,0.4l-0.57,0.5l-6,3.3l-9,10.2 l-11.1-3.3l-3.8,4.2l-0.7,3.8l-3.5-4.5l-3.3,0.7l-5.3,4l-1.4,8.6l-3.9-1.1l3.4,4.9l-3.8-1l-5.9,1.4l0.2-4.7l-10-5.7l-1.5-2.6 l3.2-5.1l4.2,1.4l2.5-2.5l-3-2.3l2.5-6.7l5.8-0.3l0.3-3.4l1-3.1l5.5-1.2l0.9-2.8l12.6-3.9l3.1,1.1l0.4-5.8l-4.4-3.1l-1.8-4.2 l1.6-3.8l7.7,3.5l2-2l6.8-1.9l1.8,4.5l2.4,0.6l1.1,2l0.4,3l1.2,2.2l3,2.3l5.7,0.5l2.2,1.3l-0.7,2.1l3.2,4.7l-3,1.5L597.1,409z"></path>
<path data-nom="Alpes-Maritimes" data-numerodepartement="06" class="region-93 departement departement-06 departement-alpes-maritimes" d="m605.3,477.1l-3.2-0.1l-1.3,1.8l-0.1,2.2 l-0.42,0.77l-2.18-3.97l0.8-2.9l-5.6-2.6l-1.7-5.6l-5.5-2.9l3-1.4l-1.2-2.6l5.2-3.8l5.2,0.6l-7-7.7l-4.3-8.5l2-5.3l6.79-7.79 l6.91,7.79l6.9,1.6l4.2,2.8l2.5-0.4l1.8,1.4l10.3-2.4l2.7-1.8l-0.3,2.6l1.5,2.2l0.3,3.2l-1.6,1.9l-0.2,2.3l-2.7,1.6l-3.3,5l-0.5,1.6 l1.1,2.7l-1.1,2.7l-3.5,2.9l-2.3,0.5l-0.9,2.4l-3-0.9l-1.5,2.1l-2.3,0.5L609,472l0.1,2.8l-2.4,0.6L605.3,477.1z"></path>
<path data-nom="Bouches-du-Rhône" data-numerodepartement="13" class="region-93 departement departement-13 departement-bouches-du-rhone" d="m545,500.2l2.5-2l-2.2-6.3l1.1-2.6l2.7-0.5 l-5.5-9.1l2-5.3l3.3-0.8l-1.9-3.8l-0.1-0.1l-6.6,4.3l-3.2,0.2l-12-4.8l-3.5,0.7l-4.5-2.3l-5.5-5.7l-10.4-2.9l-3.9,4.1l-1.9,10.6 l-3.3-0.9l-4.2,4.8l1,2.7l-5.8,1.8l-3.1,4.9l0.2,0.1h13.2l2.2,0.9l1,2.2l-1.6,1.5l2.2,1.4l7.4,0.1l3.2,1.3l1.8-1.7l-1.5-2.8l0.4-2.4 l4.9,1l3,5.3l10-0.8l2.6-1.1l1.8,2l-0.2,2.5l1,2l-1.2,2.2h9.2l1.3,2l2.2-0.8l1.7,0.2L545,500.2z"></path>
<path data-nom="Var" data-numerodepartement="83" class="region-93 departement departement-83 departement-var" d="m600.28,481.77l-1.38,2.53l-6.8,1.7l-0.7,2.5 l-5.5,5.7l5,0.7l-2,4.8l-4,0.2l-4.8,2.5l-3.5,1.1l0.1,2.7l-4.9-1.5l-2.7,0.5l-1.6,1.6l-0.4,2.3l-2.2,1.6l1.4-1.8l-2.4-1.7l-2.2,0.7 l-1.6-1.6l-3.1,0.1l0.9,2.2l-2.3-0.4l-1.5,1.7l-3-1.1l0.6-2.3l-6.4-4.1l-0.5-0.1l0.2-2.1l2.5-2l-2.2-6.3l1.1-2.6l2.7-0.5l-5.5-9.1 l2-5.3l3.3-0.8l-1.9-3.8l0.1-0.4l5.3,0.2l2.7-1.8l4,4.8l10.1-8.5l5.9,3.6l1.2-3.5l9.8-0.4l5.5,2.9l1.7,5.6l5.6,2.6l-0.8,2.9 L600.28,481.77z"></path>
<path data-nom="Vaucluse" data-numerodepartement="84" class="region-93 departement departement-84 departement-vaucluse" d="m541,463.4l6.1,6l-0.1,0.4l-0.1-0.1l-6.6,4.3 l-3.2,0.2l-12-4.8l-3.5,0.7l-4.5-2.3l-5.5-5.7l-10.4-2.9l4.5-5l-6.3-6.4l-0.2-5.5l-2.6-4.4l-0.1-3.7l5.9,0.7l3.5,4.2l8.7-3.9 l2.4,1.4l2.5-2.2l0.5,5.8l9.3,0.9l0.1,2.8l5.2,2.3l2.2,5.4l-1.2,3l3.7,5.2l-1.7,2.5L541,463.4z"></path>
</g>
<g class="region region-94" data-nom="Corse" data-code_insee="94">
<path data-nom="Corse-du-Sud" data-numerodepartement="2A" class="region-94 departement departement-2A departement-corse-du-sud" d="m640.5,554.2l3.2-1.7l0.7,8.4l-0.15,0.54 l-1.85,4.86l-2.7,1.9l3.3,0.4l-5.8,14.7l-3.1-1.2l-1.2-2.8l-11.2-3.4l-4.8-4.4l0.2-3l4.9-3.3l-9.5-1.9l2.7-7l-0.9-5.8l-7.3,2.6 l3-8.4l2.6-1.6l-7.9-4.4l-1.1-5.5l5.3-3.8l-3.8-4.2l-2.6,1l0.5-2.7l13.6,2.1l1.2,3.5l6,3.4l6,5.9l0.5,3.2l2.7,1.1l3.7,11 L640.5,554.2z"></path>
<path data-nom="Haute-Corse" data-numerodepartement="2B" class="region-94 departement departement-2B departement-haute-corse" d="m643.7,551.5v1l-3.2,1.7l-3.8-0.5l-3.7-11 l-2.7-1.1l-0.5-3.2l-6-5.9l-6-3.4l-1.2-3.5l-13.6-2.1v-0.2l3.9-5l-0.3-3.4l2.2-2.8l2.8-0.3l0.9-2.9l10.7-4.2l3.5-4.9l8.6,1.3 l-0.5-17.4l2.4-2l2.9,1.1l0.18,0.89l1.52,8.21l-0.5,10.6l4,5.6l3.8,26l-5.4,11.9V551.5L643.7,551.5z"></path>
</g></svg>

================
File: assets/images/icons/logo_L50-min.svg
================
<svg width="188.985" height="38.831" font-family="Helvetica, Arial, serif" xmlns="http://www.w3.org/2000/svg"><g aria-label="Genealogies" style="font-size:40px;line-height:1.25;font-family:Montserrat;-inkscape-font-specification:Montserrat;white-space:pre;shape-inside:url(#rect32540);fill:#32273b;fill-opacity:1;stroke-width:.487243" transform="translate(-89.14 -55.5) scale(.84182)"><path d="M120.649 95.847q-3.2 0-5.92-1.04-2.68-1.08-4.68-3-1.96-1.92-3.08-4.52-1.08-2.6-1.08-5.68 0-3.08 1.08-5.68 1.12-2.6 3.12-4.52 2-1.92 4.68-2.96 2.72-1.08 5.92-1.08 3.2 0 5.84 1 2.68 1 4.56 3.04l-1.84 1.88q-1.76-1.76-3.88-2.52t-4.56-.76q-2.6 0-4.8.88-2.16.84-3.8 2.44-1.6 1.56-2.52 3.68-.88 2.08-.88 4.6 0 2.48.88 4.6.92 2.12 2.52 3.72 1.64 1.56 3.8 2.44 2.2.84 4.76.84 2.4 0 4.52-.72 2.16-.72 3.96-2.44l1.68 2.24q-2 1.76-4.68 2.68-2.68.88-5.6.88zm7.44-3.92v-10.32h2.84v10.68zM147.626 95.807q-3.28 0-5.76-1.36-2.48-1.4-3.88-3.8-1.4-2.44-1.4-5.56 0-3.12 1.32-5.52 1.36-2.4 3.68-3.76 2.36-1.4 5.28-1.4 2.96 0 5.24 1.36 2.32 1.32 3.64 3.76 1.32 2.4 1.32 5.56 0 .2-.04.44v.44h-18.28v-2.12h16.76l-1.12.84q0-2.28-1-4.04-.96-1.8-2.64-2.8-1.68-1-3.88-1-2.16 0-3.88 1-1.72 1-2.68 2.8-.96 1.8-.96 4.12v.44q0 2.4 1.04 4.24 1.08 1.8 2.96 2.84 1.92 1 4.36 1 1.92 0 3.56-.68 1.68-.68 2.88-2.08l1.6 1.84q-1.4 1.68-3.52 2.56-2.08.88-4.6.88zM173.567 74.407q2.56 0 4.48 1 1.96.96 3.04 2.96 1.12 2 1.12 5.04v12.2h-2.84v-11.92q0-3.32-1.68-5-1.64-1.72-4.64-1.72-2.24 0-3.92.92-1.64.88-2.56 2.6-.88 1.68-.88 4.08v11.04h-2.84v-21h2.72v5.76l-.44-1.08q1-2.28 3.2-3.56 2.2-1.32 5.24-1.32zM198.798 95.807q-3.28 0-5.76-1.36-2.48-1.4-3.88-3.8-1.4-2.44-1.4-5.56 0-3.12 1.32-5.52 1.36-2.4 3.68-3.76 2.36-1.4 5.28-1.4 2.96 0 5.24 1.36 2.32 1.32 3.64 3.76 1.32 2.4 1.32 5.56 0 .2-.04.44v.44h-18.28v-2.12h16.76l-1.12.84q0-2.28-1-4.04-.96-1.8-2.64-2.8-1.68-1-3.88-1-2.16 0-3.88 1-1.72 1-2.68 2.8-.96 1.8-.96 4.12v.44q0 2.4 1.04 4.24 1.08 1.8 2.96 2.84 1.92 1 4.36 1 1.92 0 3.56-.68 1.68-.68 2.88-2.08l1.6 1.84q-1.4 1.68-3.52 2.56-2.08.88-4.6.88zM226.554 95.607v-4.64l-.12-.76v-7.76q0-2.68-1.52-4.12-1.48-1.44-4.44-1.44-2.04 0-3.88.68-1.84.68-3.12 1.8l-1.28-2.12q1.6-1.36 3.84-2.08 2.24-.76 4.72-.76 4.08 0 6.28 2.04 2.24 2 2.24 6.12v13.04zm-7.24.2q-2.36 0-4.12-.76-1.72-.8-2.64-2.16-.92-1.4-.92-3.2 0-1.64.76-2.96.8-1.36 2.56-2.16 1.8-.84 4.8-.84h7.24v2.12h-7.16q-3.04 0-4.24 1.08-1.16 1.08-1.16 2.68 0 1.8 1.4 2.88 1.4 1.08 3.92 1.08 2.4 0 4.12-1.08 1.76-1.12 2.56-3.2l.64 1.96q-.8 2.08-2.8 3.32-1.96 1.24-4.96 1.24zM236.987 95.607v-29.68h2.84v29.68zM256.329 95.807q-3.04 0-5.48-1.36-2.4-1.4-3.8-3.8-1.4-2.44-1.4-5.56 0-3.16 1.4-5.56 1.4-2.4 3.8-3.76 2.4-1.36 5.48-1.36 3.12 0 5.52 1.36 2.44 1.36 3.8 3.76 1.4 2.4 1.4 5.56 0 3.12-1.4 5.56-1.36 2.4-3.8 3.8-2.44 1.36-5.52 1.36zm0-2.52q2.28 0 4.04-1 1.76-1.04 2.76-2.88 1.04-1.88 1.04-4.32 0-2.48-1.04-4.32-1-1.84-2.76-2.84-1.76-1.04-4-1.04t-4 1.04q-1.76 1-2.8 2.84-1.04 1.84-1.04 4.32 0 2.44 1.04 4.32 1.04 1.84 2.8 2.88 1.76 1 3.96 1zM281.807 103.567q-2.88 0-5.52-.84-2.64-.84-4.28-2.4l1.44-2.16q1.48 1.32 3.64 2.08 2.2.8 4.64.8 4 0 5.88-1.88 1.88-1.84 1.88-5.76v-5.24l.4-3.6-.28-3.6v-6.36h2.72v18.44q0 5.44-2.68 7.96-2.64 2.56-7.84 2.56zm-.52-8.76q-3 0-5.4-1.28-2.4-1.32-3.8-3.64-1.36-2.32-1.36-5.32 0-3 1.36-5.28 1.4-2.32 3.8-3.6 2.4-1.28 5.4-1.28 2.8 0 5.04 1.16t3.56 3.44q1.32 2.28 1.32 5.56t-1.32 5.56q-1.32 2.28-3.56 3.48-2.24 1.2-5.04 1.2zm.28-2.52q2.32 0 4.12-.96 1.8-1 2.84-2.72 1.04-1.76 1.04-4.04 0-2.28-1.04-4-1.04-1.72-2.84-2.68-1.8-1-4.12-1-2.28 0-4.12 1-1.8.96-2.84 2.68-1 1.72-1 4 0 2.28 1 4.04 1.04 1.72 2.84 2.72 1.84.96 4.12.96z" style="fill:#32273b;fill-opacity:1;stroke-width:.487243"/><path d="M301.729 81.328q1.599 0 2.689 1.123 1.09 1.122 1.09 2.694 0 1.572-1.09 2.62-1.09 1.122-2.69 1.122-1.598 0-2.689-1.048-1.09-1.048-1.09-2.62 0-1.646 1.09-2.768 1.018-1.123 2.69-1.123z" style="fill:#fff;fill-opacity:1;stroke:#32273b;stroke-width:.276232;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"/><path d="M303.149 91.055v21h-2.84v-21zM320.944 95.807q-3.28 0-5.76-1.36-2.48-1.4-3.88-3.8-1.4-2.44-1.4-5.56 0-3.12 1.32-5.52 1.36-2.4 3.68-3.76 2.36-1.4 5.28-1.4 2.96 0 5.24 1.36 2.32 1.32 3.64 3.76 1.32 2.4 1.32 5.56 0 .2-.04.44v.44h-18.28v-2.12h16.76l-1.12.84q0-2.28-1-4.04-.96-1.8-2.64-2.8-1.68-1-3.88-1-2.16 0-3.88 1-1.72 1-2.68 2.8-.96 1.8-.96 4.12v.44q0 2.4 1.04 4.24 1.08 1.8 2.96 2.84 1.92 1 4.36 1 1.92 0 3.56-.68 1.68-.68 2.88-2.08l1.6 1.84q-1.4 1.68-3.52 2.56-2.08.88-4.6.88z" style="fill:#32273b;fill-opacity:1;stroke-width:.487243"/></g></svg>

================
File: assets/images/icons/manifest.json
================
{
 "name": "Geneafan",
 "icons": [
  {
   "src": "img\/icon\/android-icon-36x36.png",
   "sizes": "36x36",
   "type": "image\/png",
   "density": "0.75"
  },
  {
   "src": "img\/icon\/android-icon-48x48.png",
   "sizes": "48x48",
   "type": "image\/png",
   "density": "1.0"
  },
  {
   "src": "img\/icon\/android-icon-72x72.png",
   "sizes": "72x72",
   "type": "image\/png",
   "density": "1.5"
  },
  {
   "src": "img\/icon\/android-icon-96x96.png",
   "sizes": "96x96",
   "type": "image\/png",
   "density": "2.0"
  },
  {
   "src": "img\/icon\/android-icon-144x144.png",
   "sizes": "144x144",
   "type": "image\/png",
   "density": "3.0"
  },
  {
   "src": "img\/icon\/android-icon-192x192.png",
   "sizes": "192x192",
   "type": "image\/png",
   "density": "4.0"
  }
 ]
}

================
File: assets/other/robots.txt
================
User-agent: *
Allow: /

================
File: assets/scripts/geneafan/common/stores/authStore.js
================
// authStore.js

import { makeAutoObservable, runInAction } from './mobx-config';
import { Clerk } from '@clerk/clerk-js';

class AuthStore {
    clerk = null;
    userInfo = null;
    isClerkLoaded = false;
    isLoading = false;
    error = null;
    authenticationListener = null;

    constructor() {
        makeAutoObservable(this, {
            clerk: false // Do not observe clerk directly
        });
    }

    setError(error) {
        runInAction(() => {
            this.error = error;
        });
    }

    setLoading(status) {
        runInAction(() => {
            this.isLoading = status;
        });
    }

    async initializeClerk(publishableKey) {
        if (this.clerk) return; // Avoid double initialization

        try {
            this.setLoading(true);
            this.clerk = new Clerk(publishableKey);
            this.clerk.navigate = () => {};
            
            await this.clerk.load();
            
            runInAction(() => {
                this.isClerkLoaded = true;
                if (this.clerk.user) {
                    this.userInfo = this.extractUserInfo(this.clerk.user);
                }
            });
        } catch (error) {
            this.setError(error);
            console.error("Error loading Clerk:", error);
        } finally {
            this.setLoading(false);
        }
    }

    // Extract user info into a separate method
    extractUserInfo(user) {
        if (!user) return null;
        return {
            id: user.id,
            email: user.primaryEmailAddress?.emailAddress,
            fullName: user.fullName,
            firstName: user.firstName,
            lastName: user.lastName,
            profileImageUrl: user.profileImageUrl,
        };
    }

    setupAuthenticationListener(onAuthChange) {
        this.removeAuthenticationListener(); // Clean up previous listener

        this.authenticationListener = this.clerk.addListener(({ session }) => {
            const userInfo = this.clerk.user ? this.extractUserInfo(this.clerk.user) : null;
            runInAction(() => {
                this.userInfo = userInfo;
            });
            if (onAuthChange) onAuthChange(userInfo);
        });
    }

    removeAuthenticationListener() {
        if (this.authenticationListener) {
            this.authenticationListener();
            this.authenticationListener = null;
        }
    }

    async accessFeature(onAuthenticated, onUnauthenticated) {
        if (!this.clerk) {
            this.setError(new Error("Clerk not initialized"));
            return;
        }

        try {
            if (this.userInfo) {
                onAuthenticated(this.userInfo);
                return;
            }

            if (this.clerk.user) {
                const userInfo = this.extractUserInfo(this.clerk.user);
                runInAction(() => {
                    this.userInfo = userInfo;
                });
                onAuthenticated(userInfo);
                return;
            }

            this.showSignInForm(this.clerk, onUnauthenticated);
            this.setupAuthenticationListener((userInfo) => {
                if (userInfo) onAuthenticated(userInfo);
            });
        } catch (error) {
            this.setError(error);
            onUnauthenticated?.();
        }
    }

    async handleUserAuthentication(clerk, callback) {
        if (!clerk?.loaded) {
            try {
                await clerk.load();
            } catch (error) {
                this.setError(error);
                callback(null);
                return;
            }
        }

        const userInfo = clerk.user ? this.extractUserInfo(clerk.user) : null;
        callback(userInfo);
        
        this.setupAuthenticationListener(callback);
    }

    showSignInForm(clerk, onUnauthenticated) {
        if (!clerk) return;
        if (this.userInfo) return; // Early return si l'utilisateur est déjà connecté
    
        const handleClose = () => {
            if (!clerk.user && onUnauthenticated) {
                onUnauthenticated();
            }
            this.removeAuthenticationListener();
        };
    
        clerk.navigate = () => {
            const signInButton = document.getElementById('sign-in-button');
            const userButtonDiv = document.getElementById('user-button');
    
            if (signInButton) signInButton.style.display = 'none';
            if (userButtonDiv) {
                userButtonDiv.style.display = 'block';
                if (!userButtonDiv.hasChildNodes()) {
                    clerk.mountUserButton(userButtonDiv);
                    clerk.navigate = () => {
                        onUnauthenticated?.();
                        if (signInButton) signInButton.style.display = 'block';
                        userButtonDiv.style.display = 'none';
                    };
                }
            }
        };
    
        clerk.openSignIn();
    }

    async logout() {
        if (!this.clerk) return;

        try {
            this.setLoading(true);
            await this.clerk.signOut();
            this.removeAuthenticationListener();
            
            runInAction(() => {
                this.userInfo = null;
            });

            this.cleanupData();
        } catch (error) {
            this.setError(error);
        } finally {
            this.setLoading(false);
        }
    }

    cleanupData() {
        // Clean up data
        runInAction(() => {
            this.userInfo = null;
            this.error = null;
        });
    }

    get isAuthenticated() {
        return !!this.userInfo;
    }
}

const authStore = new AuthStore();
export default authStore;

================
File: assets/scripts/geneafan/common/stores/mobx-config.js
================
import { configure, comparer, computed, makeAutoObservable, makeObservable, runInAction, autorun, reaction, action, observable, toJS } from 'mobx';

configure({
    enforceActions: 'never'
});

export {
    makeAutoObservable,
    makeObservable,
    runInAction,
    autorun,
    reaction,
    toJS,
    action,
    computed,
    comparer,
    observable
};

================
File: assets/scripts/geneafan/common/stores/rootPersonStore.js
================
import { makeAutoObservable, action, reaction, runInAction } from 'mobx';
import TomSelect from 'tom-select';
import { updateFilename } from "../downloadManager.js";
import { FanChartManager } from "../../tabs/fanChart/fanChartManager.js";
import { draw } from "../../tabs/fanChart/fan.js";
import { buildHierarchy } from '../../gedcom/parse.js';
import gedcomDataStore from '../../gedcom/stores/gedcomDataSore.js';
import { DownloadManager } from "../downloadManager.js"; 

class RootPersonStore {
    root = null;
    rootPersonName = "";
    tomSelect = null;
    configHistory = [];
    currentConfigIndex = -1;
    downloadManager = null;
    _skipNextDraw = false;

    constructor() {
        makeAutoObservable(this, {
            setRoot: action,
            setRootPersonName: action,
            initializeTomSelect: action,
            setTomSelectValue: action,
            undo: action,
            redo: action,
            resetHistory: action,
            handleRootChange: action,

            // Non-observables
            tomSelect: false,
            configHistory: false,
            downloadManager: false
        });

        // Réagir aux changements de root
        // Reaction pour le changement de root
        reaction(
            () => ({
                root: this.root,
                hasCache: gedcomDataStore.individualsCache.size > 0
            }),
            async ({ root, hasCache }) => {
                if (!root || !hasCache) return;
                
                try {
                    console.group('🔄 Root Change Reaction');
                    console.log('👉 Triggering buildHierarchy for root:', root);
                    
                    // 1. Mettre à jour la hiérarchie
                    const newHierarchy = buildHierarchy(root);
                    console.log('✅ Hierarchy built and stored');
                    console.groupEnd();
                    
                    gedcomDataStore.setHierarchy(newHierarchy);
        
                    // 2. Mettre à jour l'affichage si nécessaire
                    if (!this._skipNextDraw) {
                        const drawResult = await FanChartManager.drawFanForRoot(root, false);
                        if (drawResult?.rootPersonName) {
                            const formattedName = this.formatName(drawResult.rootPersonName);
                            runInAction(() => {
                                this.rootPersonName = formattedName;
                            });
                        }
                    }
        
                    // 3. Mettre à jour l'historique
                    this.updateHistory(root);
                    document.getElementById('initial-group').style.display = 'none';
        
                } catch (error) {
                    console.error("Error handling root change:", error);
                    console.groupEnd();
                } finally {
                    this._skipNextDraw = false;
                }
            },
            {
                name: 'RootPersonStore-MainReaction'
            }
        );

        // Reaction pour le DownloadManager
        reaction(
            () => this.rootPersonName,
            (newRootPersonName) => {
                if (!newRootPersonName) return;

                runInAction(() => {
                    if (this.downloadManager) {
                        this.downloadManager.updateRootPersonName(newRootPersonName);
                    } else {
                        this.downloadManager = new DownloadManager(newRootPersonName);
                    }

                    // Mettre à jour le nom de fichier
                    const filename = (__("Éventail généalogique de ") +
                        newRootPersonName +
                        " créé sur genealog.ie"
                    ).replace(/[|&;$%@"<>()+,]/g, "");
                    updateFilename(filename);
                });
            },
            {
                name: 'RootPersonStore-DownloadManagerUpdate'
            }
        );

    }

    setRoot = action((newRoot, options = {}) => {
        if (options.skipDraw) {
            this._skipNextDraw = true;
        }
        this.root = newRoot;
        this.updateHistory(newRoot);
        
        // Émettre l'événement de changement de root
        document.dispatchEvent(new Event('rootChange'));
    });

    setRootPersonName = action((name) => {
        this.rootPersonName = name;
    });

    handleRootChange = action(async (newRoot) => {
        if (!newRoot) {
            console.warn("Attempting to handle root change with undefined root");
            return false;
        }

        try {
            console.log('Starting fan drawing process with new root:', newRoot);

            // S'assurer que le root est mis à jour avant d'appeler draw
            this.root = newRoot;

            const svgElement = document.querySelector('#fan');
            if (svgElement && FanChartManager.panZoomInstance) {
                FanChartManager.panZoomInstance.destroy();
                FanChartManager.panZoomInstance = null;
            }

            // Passer le root en paramètre à draw()
            const drawResult = draw(this.root);
            if (!drawResult) {
                console.error("Failed to draw fan");
                return false;
            }

            console.log('Fan drawn successfully, displaying');
            await FanChartManager.displayFan();

            if (drawResult.rootPersonName) {
                // Mise à jour du nom de fichier
                const rootPersonName = this.formatName(drawResult.rootPersonName);
                const filename = (__("Éventail généalogique de ") +
                    rootPersonName +
                    " créé sur genealog.ie"
                ).replace(/[|&;$%@"<>()+,]/g, "");

                updateFilename(filename);
                this.setRootPersonName(rootPersonName);
            }

            // Mise à jour de l'interface
            document.getElementById('initial-group').style.display = 'none';
            document.getElementById("loading").style.display = "none";
            document.getElementById("overlay").classList.add("overlay-hidden");

            return true;
        } catch (error) {
            console.error("Error in handleRootChange:", error);
            return false;
        }
    });

    initializeTomSelect() {
        this.tomSelect = new TomSelect("#individual-select", {
            create: false,
            sortField: {
                field: "text",
                direction: "asc"
            },
            dropdownParent: "body",
            placeholder: __("geneafan.choose_root_placeholder"),
            allowClear: true,
            maxItems: 1,
            closeAfterSelect: true,
            dropdownContentClass: 'ts-dropdown-content dropdown-content-modifiers',
            plugins: ['dropdown_input', 'clear_button']
        });

        this.tomSelect.addOption({ value: "", text: __("geneafan.choose_root_placeholder"), disabled: true });
        this.tomSelect.addItem("", true);
    }

    setTomSelectValue = action((value) => {
        if (this.tomSelect) {
            this.tomSelect.setValue(value);
        } else {
            console.error("TomSelect instance is not available.");
        }
    });

    formatName(rootPersonName) {
        if (!rootPersonName) return "";
        let firstName = rootPersonName?.name?.split(" ")[0] || "";
        let surname = rootPersonName?.surname || "";
        return `${firstName} ${surname}`.trim();
    }

    updateHistory = action((newRoot) => {
        if (this.currentConfigIndex < this.configHistory.length - 1) {
            this.configHistory = this.configHistory.slice(0, this.currentConfigIndex + 1);
        }
        this.configHistory.push({ root: newRoot });
        this.currentConfigIndex = this.configHistory.length - 1;
    });

    undo = action(() => {
        if (this.currentConfigIndex > 0) {
            this.currentConfigIndex--;
            const previousRoot = this.configHistory[this.currentConfigIndex].root;
            this.setRoot(previousRoot);
            this.setTomSelectValue(previousRoot);
        }
    });

    redo = action(() => {
        if (this.currentConfigIndex < this.configHistory.length - 1) {
            this.currentConfigIndex++;
            const nextRoot = this.configHistory[this.currentConfigIndex].root;
            this.setRoot(nextRoot);
            this.setTomSelectValue(nextRoot);
        }
    });

    resetHistory = action(() => {
        this.configHistory = [];
        this.currentConfigIndex = -1;
    });
}

const rootPersonStore = new RootPersonStore();
export default rootPersonStore;

================
File: assets/scripts/geneafan/common/stores/state.js
================
import _ from 'lodash';
import timelineEventsStore from '../../tabs/timeline/timelineEventsStore.js';
import familyTreeDataStore from '../../tabs/familyTree/familyTreeDataStore.js';
import familyTownsStore from '../../gedcom/familyTownsStore.js';
import statisticsStore from '../../tabs/statistics/statisticsStore.js';

/**
 * Resets all states from different stores
 */
export const clearAllStates = () => {
    familyTreeDataStore.clearGenealogyGraph();
    timelineEventsStore.clearEvents();
    familyTownsStore.setTownsData({});
    statisticsStore.resetStatistics();
};

================
File: assets/scripts/geneafan/common/downloadManager.js
================
import '../../vendor/pdfkitFontRegister.js';
import { mmToPoints, mmToPixels } from '../utils/utils.js';
import { Modal } from 'bootstrap';
import configStore from '../tabs/fanChart/fanConfigStore.js';
import authStore from './stores/authStore.js';

const PAGE_WIDTH_IN_MM = 297; // Largeur en millimètres
const PAGE_HEIGHT_IN_MM = 420; // Hauteur en millimètres

export let filename;

export function updateFilename(newFilename) {
    filename = newFilename;
}

function downloadBlob(blob, filename) {
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    setTimeout(() => {
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }, 0);
}

export function downloadContent(data, type) {
    const file = new Blob([data], { type: type });
    downloadBlob(file, filename);
}

export function fanAsXml() {
    const svg = $("#fan")[0];
    const serializer = new XMLSerializer();
    let source = serializer.serializeToString(svg);

    if (!source.match(/^<svg[^>]+xmlns="http:\/\/www\.w3\.org\/2000\/svg"/)) {
        source = source.replace(/^<svg/, '<svg xmlns="http://www.w3.org/2000/svg"');
    }
    if (!source.match(/^<svg[^>]+"http:\/\/www\.w3\.org\/1999\/xlink"/)) {
        source = source.replace(/^<svg/, '<svg xmlns:xlink="http://www.w3.org/1999/xlink"');
    }
    source = source.replace(/href/g, 'xlink:href'); // Compatibility

    source = '<?xml version="1.0" standalone="no"?>\r\n' + source;

    return source;
}

function getFrameDimensions(frameDimensionsInMm) {
    return frameDimensionsInMm.split('x').map(Number);
}

export async function generatePdf(watermark = true) {
    // Dynamically import PDFKit and related libraries
    const { default: PDFDocument } = await import('pdfkit');
    const { default: SVGtoPDF } = await import('svg-to-pdfkit');
    const { default: blobStream } = await import('blob-stream'); // Dynamic import of blob-stream

    return new Promise((resolve, reject) => {
        const frameDimensionsInMm = configStore.getConfig.frameDimensions;
        let frameWidthInMm, frameHeightInMm;
        [frameWidthInMm, frameHeightInMm] = getFrameDimensions(frameDimensionsInMm);

        const pageWidthInPoints = mmToPoints(PAGE_WIDTH_IN_MM);
        const pageHeightInPoints = mmToPoints(PAGE_HEIGHT_IN_MM);

        const layoutMap = {
            '331x287': 'landscape',
            '260x260': 'landscape',
            '331x331': 'landscape',
        };
        const layout = layoutMap[frameDimensionsInMm];

        const doc = new PDFDocument({
            size: [pageWidthInPoints, pageHeightInPoints],
            margins: {
                top: 28,
                bottom: 28,
                left: 28,
                right: 28,
            },
            layout: layout,
            info: {
                Title: filename,
                Author: 'https://genealog.ie',
                Subject: __('geneafan.genealogical_fan'),
                Keywords: 'généalogie;arbre;éventail;genealog.ie',
            },
        });

        // Use blob-stream to handle the PDF data
        const stream = doc.pipe(blobStream());

        stream.on('finish', function () {
            const blob = stream.toBlob('application/pdf');
            resolve(blob); // Resolve the promise with the generated blob
        });

        stream.on('error', function (error) {
            reject(error); // Reject the promise if there's an error
        });

        const svgOptions = {
            width: mmToPoints(frameWidthInMm),
            height: mmToPoints(frameHeightInMm),
        };

        let x, y;

        if (pageWidthInPoints > pageHeightInPoints) {
            x = (pageWidthInPoints - svgOptions.width) / 2;
            y = (pageHeightInPoints - svgOptions.height) / 2;
        } else {
            x = (pageHeightInPoints - svgOptions.width) / 2;
            y = (pageWidthInPoints - svgOptions.height) / 2;
        }

        // First, add the SVG content
        SVGtoPDF(doc, fanAsXml().trim(), x, y, svgOptions);

        // Add watermark if enabled, after the content
        if (watermark) {
            const watermarkText = 'Genealog.ie';
            const fontSize = 100;

            doc.font('Helvetica');
            doc.fontSize(fontSize);
            doc.font('Helvetica');

            const textWidth = doc.widthOfString(watermarkText);
            const isLandscape = doc.options.layout === 'landscape';
            const textY = isLandscape
                ? pageWidthInPoints * 2 / 3
                : pageHeightInPoints * 2 / 3;
            const textX = isLandscape
                ? (pageHeightInPoints - textWidth) / 2
                : (pageWidthInPoints - textWidth) / 2;

            doc.fillColor('grey').opacity(0.5).text(watermarkText, textX, textY);
        }

        doc.end(); // Finalize the document
    });
}

export function downloadPDF() {
    generatePdf().then((blob) => {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        
        // Vérifiez si le nom de fichier contient déjà l'extension ".pdf"
        const pdfFilename = filename.endsWith('.pdf') ? filename : `${filename}.pdf`;

        a.href = url;
        a.download = pdfFilename; // Utilisation du nom de fichier avec l'extension ".pdf"
        document.body.appendChild(a);
        a.click();
        setTimeout(() => {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 0);
    }).catch(error => {
        console.error('Error generating PDF:', error);
    });
}

export function generateFileName(extension) {
    return filename + '.' + extension;
}

async function uploadFilesToUploadcare(config, userEmail) {
    const pngBlob = await generatePNG(config, false);
    const pdfBlob = await generatePdf(config, false);
    const publicKey = 'b7514217022177999eaf';

    const uploadFile = async (blob, fileName) => {
        let formData = new FormData();
        formData.append('file', blob, fileName);
        formData.append('UPLOADCARE_PUB_KEY', publicKey);
        formData.append('UPLOADCARE_STORE', '0');

        const response = await fetch('https://upload.uploadcare.com/base/', { method: 'POST', body: formData });
        if (!response.ok) throw new Error(`Upload failed: ${response.statusText}`);
        const data = await response.json();
        return `https://ucarecdn.com/${data.file}/`;
    };

    const [pngUrl, pdfUrl] = await Promise.all([
        uploadFile(pngBlob, `${config.filename} par ${userEmail}.png`),
        uploadFile(pdfBlob, `${config.filename} par ${userEmail}.pdf`)
    ]);

    return { pngUrl, pdfUrl, pdfBlob }; // Retourner les URLs et le blob PDF pour une utilisation ultérieure
}

// Utility function to show the confirmation modal
function showConfirmationModal(message) {
    const confirmationModalElement = document.getElementById('confirmationModal');
    const confirmationModal = new Modal(confirmationModalElement);

    // Get the modal body element where the message will be inserted
    const modalBodyElement = confirmationModalElement.querySelector('.modal-body');

    // Insert the dynamic message into the modal body
    modalBodyElement.innerHTML = message;

    confirmationModal.show();
}

async function postDataToMake(config, pngUrl, pdfUrl, rootPersonName, userEmail, pdfBlob) {
    const postUrl = 'https://hook.eu1.make.com/ogsm7ah5ftt89p6biph0wd1vt8b50zwy';
    let formData = new FormData();
    formData.append('pngUrl', pngUrl);
    formData.append('pdfUrl', pdfUrl);
    formData.append('rootPersonName', rootPersonName);
    formData.append('userEmail', userEmail);
    formData.append('pdfFile', pdfBlob, `${config.filename} by ${userEmail}.pdf`);

    const response = await fetch(postUrl, { method: 'POST', body: formData });
    if (response.ok) {
        // Success
        showConfirmationModal(`Le fichier PDF de votre éventail sera envoyé dans quelques minutes à l'adresse ${userEmail}.`);
    } else {
        // Failure
        showConfirmationModal("Erreur lors de l'envoi du PDF.");
    }
}

export async function handleUploadAndPost(rootPersonName, userEmail) {
    const config = configStore.getConfig; // Get the current configuration state
    const overlay = document.getElementById('overlay'); 
    try {
        // Show the overlay
        overlay.classList.remove('overlay-hidden');
        overlay.classList.add('overlay-visible');

        const { pngUrl, pdfUrl, pdfBlob } = await uploadFilesToUploadcare(config, userEmail);
        await postDataToMake(config, pngUrl, pdfUrl, rootPersonName, userEmail, pdfBlob);

        // Hide the overlay
        overlay.classList.remove('overlay-visible');
        overlay.classList.add('overlay-hidden');
    } catch (error) {
        console.error('Error:', error);
        showConfirmationModal('An error occurred. Please try again.');

        // Hide the overlay
        overlay.classList.remove('overlay-visible');
        overlay.classList.add('overlay-hidden');
    }
}

function generatePNG(config, transparency) {
    return new Promise((resolve, reject) => {
        const svgString = fanAsXml();
        const canvas = document.createElement("canvas");

        // Set the canvas width to 600px
        const fixedWidth = 1200;
        canvas.width = fixedWidth;

        // Calculate the height to maintain the aspect ratio, if necessary
        const frameDimensionsInMm = config.frameDimensions;
        let frameWidthInMm, frameHeightInMm;
        [frameWidthInMm, frameHeightInMm] = getFrameDimensions(frameDimensionsInMm);

        // Convert mm to pixels assuming 96 DPI (may require adjustment for other DPIs)
        let originalWidthInPixels = mmToPixels(frameWidthInMm);
        let originalHeightInPixels = mmToPixels(frameHeightInMm)

        // Maintain the aspect ratio based on the new fixed width
        let aspectRatio = originalHeightInPixels / originalWidthInPixels;
        let fixedHeight = fixedWidth * aspectRatio;
        canvas.height = fixedHeight;
        const ctx = canvas.getContext("2d");

        if (!transparency) {
            ctx.fillStyle = "#F1F1F1";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }

        const DOMURL = self.URL || self.webkitURL || self;
        const img = new Image();
        const svg = new Blob([svgString], { type: "image/svg+xml;charset=utf-8" });

        const url = URL.createObjectURL(svg);

        img.onload = function() {
            // Adjust the image scale to match the target width
            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
            canvas.toBlob(function(blob) {
                resolve(blob);
            }, 'image/png');
        };
        
        img.onerror = function() {
            reject(new Error('Image loading error'));
        };

        img.src = url;
    });
}

export function downloadPNG(config, transparency) {
    generatePNG(config, transparency).then(blob => {
        downloadBlob(blob, generateFileName("png"));
    }).catch(error => {
        console.error('Error generating or downloading PNG:', error);
    });
}

export class DownloadManager {
    constructor(rootPersonName) {
        this.rootPersonName = rootPersonName;
        this.setupEventListeners();
    }

    updateRootPersonName(newRootPersonName) {
        this.rootPersonName = newRootPersonName;
    }

    setupEventListeners() {
        document.getElementById("download-pdf")
            .addEventListener("click", (event) => {
                event.preventDefault();
                authStore.handleUserAuthentication(authStore.clerk, async (userInfo) => {
                    if (userInfo) {
                        const userEmail = userInfo.email;
                        await handleUploadAndPost(this.rootPersonName, userEmail);
                    } else {
                        console.error("Erreur lors de la connexion de l'utilisateur.");
                    }
                });
            });

        document.getElementById("download-pdf-watermark")
            .addEventListener("click", (event) => {
                event.preventDefault();
                downloadPDF(configStore.getConfig, function (blob) {
                    downloadContent(blob, generateFileName("pdf"), "pdf");
                }, true);
            });

        document.getElementById("download-svg")
            .addEventListener("click", (event) => {
                event.preventDefault();
                let elements = document.querySelectorAll("#boxes *");
                elements.forEach(function (element) {
                    element.style.stroke = "rgb(0, 0, 255)";
                    element.style["-inkscape-stroke"] = "hairline";
                    element.setAttribute("stroke-width", "0.01");
                });
                downloadContent(fanAsXml(), generateFileName("svg"), "svg");
            });

        document.getElementById("download-png-transparency")
            .addEventListener("click", (event) => {
                event.preventDefault();
                downloadPNG(configStore.getConfig, true);
            });

        document.getElementById("download-png-background")
            .addEventListener("click", (event) => {
                event.preventDefault();
                downloadPNG(configStore.getConfig, false);
            });
    }
}

================
File: assets/scripts/geneafan/core/app.js
================
import { setupCore } from './setup.js';
import { handleInitializationError } from './errorHandler.js';

export async function initializeApplication() {
    // Set up global error handler
    window.onerror = handleInitializationError;
    
    try {
        // Core initialization
        await setupCore();
        
        // Mark as ready and hide overlay
        window.isReady = true;
        hideLoadingOverlay();
        
    } catch (error) {
        console.error("Failed to initialize application:", error);
        window.isReady = false;
        handleInitializationError(error.message);
    }
}

function hideLoadingOverlay() {
    const overlay = document.getElementById('overlay');
    if (overlay) {
        overlay.style.display = 'none';
        console.log("Loading overlay hidden.");
    }
}

================
File: assets/scripts/geneafan/core/auth.js
================
import authStore from '../common/stores/authStore.js';
import { reaction } from '../common/stores/mobx-config.js';

export async function initializeAuth() {
    console.log('Auth initialization started');
    
    try {
        // Initialize Clerk
        const publishableKey = process.env.CLERK_PUBLISHABLE_KEY;
        await authStore.initializeClerk(publishableKey);
        
        // Setup auth UI
        setupAuthUI();
        
        // Setup user controls observer
        setupUserControlsObserver();
        
    } catch (error) {
        console.error("Error initializing auth:", error);
        throw error;
    }
}

function setupAuthUI() {
    const signInButton = document.getElementById('sign-in-button');
    const userButtonDiv = document.getElementById('user-button');

    // Configuration initiale des boutons en fonction de l'état de connexion
    if (authStore.userInfo) {
        if (signInButton) signInButton.style.display = 'none';
        if (userButtonDiv) {
            userButtonDiv.style.display = 'block';
            if (!userButtonDiv.hasChildNodes()) {
                authStore.clerk.mountUserButton(userButtonDiv);
            }
        }
    }

    // Setup du click handler
    if (signInButton) {
        signInButton.addEventListener('click', () => {
            if (!authStore.userInfo) {
                authStore.showSignInForm(authStore.clerk);
            }
        });
    }
}

function setupUserControlsObserver() {
    // Correctly configure reaction with two functions
    reaction(
        // First function: returns the data we want to track
        () => authStore.userInfo,
        // Second function: handles the changes
        (userInfo) => {
            const signInButton = document.getElementById('sign-in-button');
            const userButtonDiv = document.getElementById('user-button');

            if (!signInButton || !userButtonDiv) {
                console.error("User controls elements not found.");
                return;
            }

            if (userInfo) {
                // User is authenticated
                signInButton.style.display = 'none';
                userButtonDiv.style.display = 'block';

                // Mount the Clerk UserButton if not already mounted
                if (!userButtonDiv.hasChildNodes()) {
                    authStore.clerk.mountUserButton(userButtonDiv);
                    authStore.clerk.navigate = () => {
                        signInButton.style.display = 'block';
                        userButtonDiv.style.display = 'none';
                    }
                }
            } else {
                // User is not authenticated
                userButtonDiv.style.display = 'none';
                signInButton.style.display = 'block';
            }
        }
    );
}

================
File: assets/scripts/geneafan/core/errorHandler.js
================
export function handleInitializationError(msg, url, line) {
    console.error(`Error during initialization: ${msg}${url ? ` at ${url}:${line}` : ''}`);
    showErrorState();
    return false;
}

function showErrorState() {
    const loadingElement = document.getElementById('loading');
    if (loadingElement) {
        loadingElement.innerHTML = `
            <h2>
                <i class="fas fa-exclamation-triangle" aria-hidden="true"></i>
                Une erreur s'est produite
            </h2>
            <p>Impossible d'initialiser l'application.</p>
        `;
    }
}

================
File: assets/scripts/geneafan/core/events.js
================
import { setupAllEventListeners } from '../listeners/eventListeners.js';
import authStore from '../common/stores/authStore.js';

export function setupEventListeners() {
    console.log('Event listeners setup started');
    
    try {
        // Setup main event listeners
        setupAllEventListeners(authStore);
        
        // Setup window unload warning
        setupUnloadWarning();
        
        // Setup quantity input validators
        setupQuantityInputValidators();
        
    } catch (error) {
        console.error("Error setting up event listeners:", error);
        throw error;
    }
}

function setupUnloadWarning() {
    window.addEventListener('beforeunload', function (e) {
        console.log('La page est sur le point de se recharger ou de se fermer.');
    });
}

function setupQuantityInputValidators() {
    document.querySelectorAll('input[type=number]').forEach(function (input) {
        input.addEventListener('change', function () {
            const min = parseInt(input.getAttribute('min'));
            const max = parseInt(input.getAttribute('max'));
            let val = parseInt(input.value) || min - 1;
            if (val < min) input.value = min;
            if (val > max) input.value = max;
        });
    });
}

================
File: assets/scripts/geneafan/core/setup.js
================
import { initializeAuth } from './auth.js';
import { initializeTabs } from '../tabs/tabManager.js';
import { setupEventListeners } from './events.js';
import { v4 as uuidv4 } from 'uuid';

export async function setupCore() {
    console.log('Core setup started');
    
    try {
        setupBeforeUnload();
        await initializeDOMContent();
        ensureUserId();
        await initializeAuth();

        // Unique call to initializeTabs
        await initializeTabs();
        
        setupEventListeners();
        handleUrlParameters();
        hideOverlay();
    } catch (error) {
        console.error("Error in core setup:", error);
        throw error;
    }
}

function setupBeforeUnload() {
    window.addEventListener("beforeunload", function (e) {
        console.log("La page est sur le point de se recharger ou de se fermer.");
    });
}

async function initializeDOMContent() {
    if (document.readyState === 'loading') {
        await new Promise(resolve => {
            document.addEventListener('DOMContentLoaded', () => {
                console.log("DOMContentLoaded fired.");
                resolve();
            });
        });
    }
}

function ensureUserId() {
    let userId = localStorage.getItem('userId');
    if (!userId) {
        userId = generateUniqueId();
        localStorage.setItem('userId', userId);
    }
    return userId;
}

function generateUniqueId() {
    if (typeof crypto !== 'undefined' && crypto.randomUUID) {
        return crypto.randomUUID();
    }
    return uuidv4();
}

function hideOverlay() {
    const overlay = document.getElementById("overlay");
    if (overlay) {
        overlay.style.display = "none";
        console.log("Overlay hidden.");
    } else {
        console.error("Element with ID 'overlay' not found.");
    }
}

function handleUrlParameters() {
    const urlParams = new URLSearchParams(window.location.search);
    const contexte = urlParams.get("contexte");

    if (contexte === "demo") {
        ["#download-svg", "#download-png-transparency", "#download-png-background"].forEach(selector => {
            const element = document.querySelector(selector);
            if (element) element.style.display = "none";
        });

        const showMissing = document.querySelector("#show-missing");
        if (showMissing) showMissing.closest(".col").style.display = "none";
    }
}

================
File: assets/scripts/geneafan/gedcom/countryData.js
================
export const countryData = {
    "continents": [
      {
        "name": "Afrique",
        "color": "#ff5733",
        "countries": [
          {
            "code": "DZ",
            "name": {
              "FR": "Algérie",
              "EN": "Algeria"
            },
            "key": {
              "FR": "algerie",
              "EN": "algeria"
            },
            "color": "#ff8a66"
          },
          {
            "code": "AO",
            "name": {
              "FR": "Angola",
              "EN": "Angola"
            },
            "key": {
              "FR": "angola",
              "EN": "angola"
            },
            "color": "#fe8864"
          },
          {
            "code": "BJ",
            "name": {
              "FR": "Bénin",
              "EN": "Benin"
            },
            "key": {
              "FR": "benin",
              "EN": "benin"
            },
            "color": "#fd8662"
          },
          {
            "code": "BW",
            "name": {
              "FR": "Botswana",
              "EN": "Botswana"
            },
            "key": {
              "FR": "botswana",
              "EN": "botswana"
            },
            "color": "#fc8460"
          },
          {
            "code": "BF",
            "name": {
              "FR": "Burkina Faso",
              "EN": "Burkina Faso"
            },
            "key": {
              "FR": "burkina_faso",
              "EN": "burkina_faso"
            },
            "color": "#fb825e"
          },
          {
            "code": "BI",
            "name": {
              "FR": "Burundi",
              "EN": "Burundi"
            },
            "key": {
              "FR": "burundi",
              "EN": "burundi"
            },
            "color": "#fa805c"
          },
          {
            "code": "CV",
            "name": {
              "FR": "Cap-Vert",
              "EN": "Cabo Verde"
            },
            "key": {
              "FR": "cap-vert",
              "EN": "cabo_verde"
            },
            "color": "#f97e5a"
          },
          {
            "code": "CM",
            "name": {
              "FR": "Cameroun",
              "EN": "Cameroon"
            },
            "key": {
              "FR": "cameroun",
              "EN": "cameroon"
            },
            "color": "#f87d59"
          },
          {
            "code": "CF",
            "name": {
              "FR": "République Centrafricaine",
              "EN": "Central African Republic"
            },
            "key": {
              "FR": "republique_centrafricaine",
              "EN": "central_african_republic"
            },
            "color": "#f77b57"
          },
          {
            "code": "TD",
            "name": {
              "FR": "Tchad",
              "EN": "Chad"
            },
            "key": {
              "FR": "tchad",
              "EN": "chad"
            },
            "color": "#f67955"
          },
          {
            "code": "KM",
            "name": {
              "FR": "Comores",
              "EN": "Comoros"
            },
            "key": {
              "FR": "comores",
              "EN": "comoros"
            },
            "color": "#f57753"
          },
          {
            "code": "CG",
            "name": {
              "FR": "Congo",
              "EN": "Congo"
            },
            "key": {
              "FR": "congo",
              "EN": "congo"
            },
            "color": "#f47551"
          },
          {
            "code": "CD",
            "name": {
              "FR": "République Démocratique du Congo",
              "EN": "Congo (Democratic Republic)"
            },
            "key": {
              "FR": "republique_democratique_du_congo",
              "EN": "congo_democratic_republic"
            },
            "color": "#f3734f"
          },
          {
            "code": "CI",
            "name": {
              "FR": "Côte d'Ivoire",
              "EN": "Cote d'Ivoire"
            },
            "key": {
              "FR": "cote_d'ivoire",
              "EN": "cote_d'ivoire"
            },
            "color": "#f2714d"
          },
          {
            "code": "DJ",
            "name": {
              "FR": "Djibouti",
              "EN": "Djibouti"
            },
            "key": {
              "FR": "djibouti",
              "EN": "djibouti"
            },
            "color": "#f26f4b"
          },
          {
            "code": "EG",
            "name": {
              "FR": "Égypte",
              "EN": "Egypt"
            },
            "key": {
              "FR": "egypte",
              "EN": "egypt"
            },
            "color": "#f16d49"
          },
          {
            "code": "GQ",
            "name": {
              "FR": "Guinée Équatoriale",
              "EN": "Equatorial Guinea"
            },
            "key": {
              "FR": "guinee_equatoriale",
              "EN": "equatorial_guinea"
            },
            "color": "#f06b47"
          },
          {
            "code": "ER",
            "name": {
              "FR": "Érythrée",
              "EN": "Eritrea"
            },
            "key": {
              "FR": "erythree",
              "EN": "eritrea"
            },
            "color": "#ef6945"
          },
          {
            "code": "SZ",
            "name": {
              "FR": "Eswatini",
              "EN": "Eswatini"
            },
            "key": {
              "FR": "eswatini",
              "EN": "eswatini"
            },
            "color": "#ee6743"
          },
          {
            "code": "ET",
            "name": {
              "FR": "Éthiopie",
              "EN": "Ethiopia"
            },
            "key": {
              "FR": "ethiopie",
              "EN": "ethiopia"
            },
            "color": "#ed6541"
          },
          {
            "code": "GA",
            "name": {
              "FR": "Gabon",
              "EN": "Gabon"
            },
            "key": {
              "FR": "gabon",
              "EN": "gabon"
            },
            "color": "#ec6440"
          },
          {
            "code": "GM",
            "name": {
              "FR": "Gambie",
              "EN": "Gambia"
            },
            "key": {
              "FR": "gambie",
              "EN": "gambia"
            },
            "color": "#eb623e"
          },
          {
            "code": "GH",
            "name": {
              "FR": "Ghana",
              "EN": "Ghana"
            },
            "key": {
              "FR": "ghana",
              "EN": "ghana"
            },
            "color": "#ea603c"
          },
          {
            "code": "GN",
            "name": {
              "FR": "Guinée",
              "EN": "Guinea"
            },
            "key": {
              "FR": "guinee",
              "EN": "guinea"
            },
            "color": "#e95e3a"
          },
          {
            "code": "GW",
            "name": {
              "FR": "Guinée-Bissau",
              "EN": "Guinea-Bissau"
            },
            "key": {
              "FR": "guinee-bissau",
              "EN": "guinea-bissau"
            },
            "color": "#e85c38"
          },
          {
            "code": "KE",
            "name": {
              "FR": "Kenya",
              "EN": "Kenya"
            },
            "key": {
              "FR": "kenya",
              "EN": "kenya"
            },
            "color": "#e75a36"
          },
          {
            "code": "LS",
            "name": {
              "FR": "Lesotho",
              "EN": "Lesotho"
            },
            "key": {
              "FR": "lesotho",
              "EN": "lesotho"
            },
            "color": "#e65834"
          },
          {
            "code": "LR",
            "name": {
              "FR": "Libéria",
              "EN": "Liberia"
            },
            "key": {
              "FR": "liberia",
              "EN": "liberia"
            },
            "color": "#e55632"
          },
          {
            "code": "LY",
            "name": {
              "FR": "Libye",
              "EN": "Libya"
            },
            "key": {
              "FR": "libye",
              "EN": "libya"
            },
            "color": "#e45430"
          },
          {
            "code": "MG",
            "name": {
              "FR": "Madagascar",
              "EN": "Madagascar"
            },
            "key": {
              "FR": "madagascar",
              "EN": "madagascar"
            },
            "color": "#e3522e"
          },
          {
            "code": "MW",
            "name": {
              "FR": "Malawi",
              "EN": "Malawi"
            },
            "key": {
              "FR": "malawi",
              "EN": "malawi"
            },
            "color": "#e2502c"
          },
          {
            "code": "ML",
            "name": {
              "FR": "Mali",
              "EN": "Mali"
            },
            "key": {
              "FR": "mali",
              "EN": "mali"
            },
            "color": "#e14e2a"
          },
          {
            "code": "MR",
            "name": {
              "FR": "Mauritanie",
              "EN": "Mauritania"
            },
            "key": {
              "FR": "mauritanie",
              "EN": "mauritania"
            },
            "color": "#e04c28"
          },
          {
            "code": "MU",
            "name": {
              "FR": "Maurice",
              "EN": "Mauritius"
            },
            "key": {
              "FR": "maurice",
              "EN": "mauritius"
            },
            "color": "#df4a26"
          },
          {
            "code": "MA",
            "name": {
              "FR": "Maroc",
              "EN": "Morocco"
            },
            "key": {
              "FR": "maroc",
              "EN": "morocco"
            },
            "color": "#de4925"
          },
          {
            "code": "MZ",
            "name": {
              "FR": "Mozambique",
              "EN": "Mozambique"
            },
            "key": {
              "FR": "mozambique",
              "EN": "mozambique"
            },
            "color": "#dd4723"
          },
          {
            "code": "NA",
            "name": {
              "FR": "Namibie",
              "EN": "Namibia"
            },
            "key": {
              "FR": "namibie",
              "EN": "namibia"
            },
            "color": "#dc4521"
          },
          {
            "code": "NE",
            "name": {
              "FR": "Niger",
              "EN": "Niger"
            },
            "key": {
              "FR": "niger",
              "EN": "niger"
            },
            "color": "#db431f"
          },
          {
            "code": "NG",
            "name": {
              "FR": "Nigéria",
              "EN": "Nigeria"
            },
            "key": {
              "FR": "nigeria",
              "EN": "nigeria"
            },
            "color": "#da411d"
          },
          {
            "code": "RW",
            "name": {
              "FR": "Rwanda",
              "EN": "Rwanda"
            },
            "key": {
              "FR": "rwanda",
              "EN": "rwanda"
            },
            "color": "#d93f1b"
          },
          {
            "code": "ST",
            "name": {
              "FR": "Sao Tomé-et-Principe",
              "EN": "Sao Tome and Principe"
            },
            "key": {
              "FR": "sao_tome-et-principe",
              "EN": "sao_tome_and_principe"
            },
            "color": "#d93d19"
          },
          {
            "code": "SN",
            "name": {
              "FR": "Sénégal",
              "EN": "Senegal"
            },
            "key": {
              "FR": "senegal",
              "EN": "senegal"
            },
            "color": "#d83b17"
          },
          {
            "code": "SC",
            "name": {
              "FR": "Seychelles",
              "EN": "Seychelles"
            },
            "key": {
              "FR": "seychelles",
              "EN": "seychelles"
            },
            "color": "#d73915"
          },
          {
            "code": "SL",
            "name": {
              "FR": "Sierra Leone",
              "EN": "Sierra Leone"
            },
            "key": {
              "FR": "sierra_leone",
              "EN": "sierra_leone"
            },
            "color": "#d63713"
          },
          {
            "code": "SO",
            "name": {
              "FR": "Somalie",
              "EN": "Somalia"
            },
            "key": {
              "FR": "somalie",
              "EN": "somalia"
            },
            "color": "#d53511"
          },
          {
            "code": "ZA",
            "name": {
              "FR": "Afrique du Sud",
              "EN": "South Africa"
            },
            "key": {
              "FR": "afrique_du_sud",
              "EN": "south_africa"
            },
            "color": "#d4330f"
          },
          {
            "code": "SS",
            "name": {
              "FR": "Soudan du Sud",
              "EN": "South Sudan"
            },
            "key": {
              "FR": "soudan_du_sud",
              "EN": "south_sudan"
            },
            "color": "#d3310d"
          },
          {
            "code": "SD",
            "name": {
              "FR": "Soudan",
              "EN": "Sudan"
            },
            "key": {
              "FR": "soudan",
              "EN": "sudan"
            },
            "color": "#d2300c"
          },
          {
            "code": "TZ",
            "name": {
              "FR": "Tanzanie",
              "EN": "Tanzania"
            },
            "key": {
              "FR": "tanzanie",
              "EN": "tanzania"
            },
            "color": "#d12e0a"
          },
          {
            "code": "TG",
            "name": {
              "FR": "Togo",
              "EN": "Togo"
            },
            "key": {
              "FR": "togo",
              "EN": "togo"
            },
            "color": "#d02c08"
          },
          {
            "code": "TN",
            "name": {
              "FR": "Tunisie",
              "EN": "Tunisia"
            },
            "key": {
              "FR": "tunisie",
              "EN": "tunisia"
            },
            "color": "#cf2a06"
          },
          {
            "code": "UG",
            "name": {
              "FR": "Ouganda",
              "EN": "Uganda"
            },
            "key": {
              "FR": "ouganda",
              "EN": "uganda"
            },
            "color": "#ce2804"
          },
          {
            "code": "ZM",
            "name": {
              "FR": "Zambie",
              "EN": "Zambia"
            },
            "key": {
              "FR": "zambie",
              "EN": "zambia"
            },
            "color": "#cd2602"
          },
          {
            "code": "ZW",
            "name": {
              "FR": "Zimbabwe",
              "EN": "Zimbabwe"
            },
            "key": {
              "FR": "zimbabwe",
              "EN": "zimbabwe"
            },
            "color": "#cc2400"
          }
        ]
      },
      {
        "name": "Asie",
        "color": "#33c4ff",
        "countries": [
          {
            "code": "AF",
            "name": {
              "FR": "Afghanistan",
              "EN": "Afghanistan"
            },
            "key": {
              "FR": "afghanistan",
              "EN": "afghanistan"
            },
            "color": "#66f7ff"
          },
          {
            "code": "AM",
            "name": {
              "FR": "Arménie",
              "EN": "Armenia"
            },
            "key": {
              "FR": "armenie",
              "EN": "armenia"
            },
            "color": "#64f5fe"
          },
          {
            "code": "AZ",
            "name": {
              "FR": "Azerbaïdjan",
              "EN": "Azerbaijan"
            },
            "key": {
              "FR": "azerbaidjan",
              "EN": "azerbaijan"
            },
            "color": "#62f3fd"
          },
          {
            "code": "BH",
            "name": {
              "FR": "Bahreïn",
              "EN": "Bahrain"
            },
            "key": {
              "FR": "bahrein",
              "EN": "bahrain"
            },
            "color": "#5ff0fc"
          },
          {
            "code": "BD",
            "name": {
              "FR": "Bangladesh",
              "EN": "Bangladesh"
            },
            "key": {
              "FR": "bangladesh",
              "EN": "bangladesh"
            },
            "color": "#5deefb"
          },
          {
            "code": "BT",
            "name": {
              "FR": "Bhoutan",
              "EN": "Bhutan"
            },
            "key": {
              "FR": "bhoutan",
              "EN": "bhutan"
            },
            "color": "#5becfa"
          },
          {
            "code": "BN",
            "name": {
              "FR": "Brunei",
              "EN": "Brunei"
            },
            "key": {
              "FR": "brunei",
              "EN": "brunei"
            },
            "color": "#59eaf8"
          },
          {
            "code": "KH",
            "name": {
              "FR": "Cambodge",
              "EN": "Cambodia"
            },
            "key": {
              "FR": "cambodge",
              "EN": "cambodia"
            },
            "color": "#57e8f7"
          },
          {
            "code": "CN",
            "name": {
              "FR": "Chine",
              "EN": "China"
            },
            "key": {
              "FR": "chine",
              "EN": "china"
            },
            "color": "#55e6f6"
          },
          {
            "code": "CY",
            "name": {
              "FR": "Chypre",
              "EN": "Cyprus"
            },
            "key": {
              "FR": "chypre",
              "EN": "cyprus"
            },
            "color": "#52e3f5"
          },
          {
            "code": "GE",
            "name": {
              "FR": "Géorgie",
              "EN": "Georgia"
            },
            "key": {
              "FR": "georgie",
              "EN": "georgia"
            },
            "color": "#50e1f4"
          },
          {
            "code": "IN",
            "name": {
              "FR": "Inde",
              "EN": "India"
            },
            "key": {
              "FR": "inde",
              "EN": "india"
            },
            "color": "#4edff3"
          },
          {
            "code": "ID",
            "name": {
              "FR": "Indonésie",
              "EN": "Indonesia"
            },
            "key": {
              "FR": "indonesie",
              "EN": "indonesia"
            },
            "color": "#4cddf2"
          },
          {
            "code": "IR",
            "name": {
              "FR": "Iran",
              "EN": "Iran"
            },
            "key": {
              "FR": "iran",
              "EN": "iran"
            },
            "color": "#4adbf1"
          },
          {
            "code": "IQ",
            "name": {
              "FR": "Irak",
              "EN": "Iraq"
            },
            "key": {
              "FR": "irak",
              "EN": "iraq"
            },
            "color": "#48d9f0"
          },
          {
            "code": "IL",
            "name": {
              "FR": "Israël",
              "EN": "Israel"
            },
            "key": {
              "FR": "israel",
              "EN": "israel"
            },
            "color": "#45d6ef"
          },
          {
            "code": "JP",
            "name": {
              "FR": "Japon",
              "EN": "Japan"
            },
            "key": {
              "FR": "japon",
              "EN": "japan"
            },
            "color": "#43d4ee"
          },
          {
            "code": "JO",
            "name": {
              "FR": "Jordanie",
              "EN": "Jordan"
            },
            "key": {
              "FR": "jordanie",
              "EN": "jordan"
            },
            "color": "#41d2ed"
          },
          {
            "code": "KZ",
            "name": {
              "FR": "Kazakhstan",
              "EN": "Kazakhstan"
            },
            "key": {
              "FR": "kazakhstan",
              "EN": "kazakhstan"
            },
            "color": "#3fd0eb"
          },
          {
            "code": "KW",
            "name": {
              "FR": "Koweït",
              "EN": "Kuwait"
            },
            "key": {
              "FR": "koweit",
              "EN": "kuwait"
            },
            "color": "#3dceea"
          },
          {
            "code": "KG",
            "name": {
              "FR": "Kirghizistan",
              "EN": "Kyrgyzstan"
            },
            "key": {
              "FR": "kirghizistan",
              "EN": "kyrgyzstan"
            },
            "color": "#3bcce9"
          },
          {
            "code": "LA",
            "name": {
              "FR": "Laos",
              "EN": "Laos"
            },
            "key": {
              "FR": "laos",
              "EN": "laos"
            },
            "color": "#38c9e8"
          },
          {
            "code": "LB",
            "name": {
              "FR": "Liban",
              "EN": "Lebanon"
            },
            "key": {
              "FR": "liban",
              "EN": "lebanon"
            },
            "color": "#36c7e7"
          },
          {
            "code": "MY",
            "name": {
              "FR": "Malaisie",
              "EN": "Malaysia"
            },
            "key": {
              "FR": "malaisie",
              "EN": "malaysia"
            },
            "color": "#34c5e6"
          },
          {
            "code": "MV",
            "name": {
              "FR": "Maldives",
              "EN": "Maldives"
            },
            "key": {
              "FR": "maldives",
              "EN": "maldives"
            },
            "color": "#32c3e5"
          },
          {
            "code": "MN",
            "name": {
              "FR": "Mongolie",
              "EN": "Mongolia"
            },
            "key": {
              "FR": "mongolie",
              "EN": "mongolia"
            },
            "color": "#30c1e4"
          },
          {
            "code": "MM",
            "name": {
              "FR": "Myanmar",
              "EN": "Myanmar"
            },
            "key": {
              "FR": "myanmar",
              "EN": "myanmar"
            },
            "color": "#2ebfe3"
          },
          {
            "code": "NP",
            "name": {
              "FR": "Népal",
              "EN": "Nepal"
            },
            "key": {
              "FR": "nepal",
              "EN": "nepal"
            },
            "color": "#2bbce2"
          },
          {
            "code": "KP",
            "name": {
              "FR": "Corée du Nord",
              "EN": "North Korea"
            },
            "key": {
              "FR": "coree_du_nord",
              "EN": "north_korea"
            },
            "color": "#29bae1"
          },
          {
            "code": "OM",
            "name": {
              "FR": "Oman",
              "EN": "Oman"
            },
            "key": {
              "FR": "oman",
              "EN": "oman"
            },
            "color": "#27b8e0"
          },
          {
            "code": "PK",
            "name": {
              "FR": "Pakistan",
              "EN": "Pakistan"
            },
            "key": {
              "FR": "pakistan",
              "EN": "pakistan"
            },
            "color": "#25b6de"
          },
          {
            "code": "PS",
            "name": {
              "FR": "Palestine",
              "EN": "Palestine"
            },
            "key": {
              "FR": "palestine",
              "EN": "palestine"
            },
            "color": "#23b4dd"
          },
          {
            "code": "PH",
            "name": {
              "FR": "Philippines",
              "EN": "Philippines"
            },
            "key": {
              "FR": "philippines",
              "EN": "philippines"
            },
            "color": "#21b2dc"
          },
          {
            "code": "QA",
            "name": {
              "FR": "Qatar",
              "EN": "Qatar"
            },
            "key": {
              "FR": "qatar",
              "EN": "qatar"
            },
            "color": "#1eafdb"
          },
          {
            "code": "SA",
            "name": {
              "FR": "Arabie Saoudite",
              "EN": "Saudi Arabia"
            },
            "key": {
              "FR": "arabie_saoudite",
              "EN": "saudi_arabia"
            },
            "color": "#1cadda"
          },
          {
            "code": "SG",
            "name": {
              "FR": "Singapour",
              "EN": "Singapore"
            },
            "key": {
              "FR": "singapour",
              "EN": "singapore"
            },
            "color": "#1aabd9"
          },
          {
            "code": "KR",
            "name": {
              "FR": "Corée du Sud",
              "EN": "South Korea"
            },
            "key": {
              "FR": "coree_du_sud",
              "EN": "south_korea"
            },
            "color": "#18a9d8"
          },
          {
            "code": "LK",
            "name": {
              "FR": "Sri Lanka",
              "EN": "Sri Lanka"
            },
            "key": {
              "FR": "sri_lanka",
              "EN": "sri_lanka"
            },
            "color": "#16a7d7"
          },
          {
            "code": "SY",
            "name": {
              "FR": "Syrie",
              "EN": "Syria"
            },
            "key": {
              "FR": "syrie",
              "EN": "syria"
            },
            "color": "#14a5d6"
          },
          {
            "code": "TJ",
            "name": {
              "FR": "Tadjikistan",
              "EN": "Tajikistan"
            },
            "key": {
              "FR": "tadjikistan",
              "EN": "tajikistan"
            },
            "color": "#11a2d5"
          },
          {
            "code": "TH",
            "name": {
              "FR": "Thaïlande",
              "EN": "Thailand"
            },
            "key": {
              "FR": "thailande",
              "EN": "thailand"
            },
            "color": "#0fa0d4"
          },
          {
            "code": "TL",
            "name": {
              "FR": "Timor oriental",
              "EN": "Timor-Leste"
            },
            "key": {
              "FR": "timor_oriental",
              "EN": "timor-leste"
            },
            "color": "#0d9ed3"
          },
          {
            "code": "TR",
            "name": {
              "FR": "Turquie",
              "EN": "Turkey"
            },
            "key": {
              "FR": "turquie",
              "EN": "turkey"
            },
            "color": "#0b9cd1"
          },
          {
            "code": "TM",
            "name": {
              "FR": "Turkménistan",
              "EN": "Turkmenistan"
            },
            "key": {
              "FR": "turkmenistan",
              "EN": "turkmenistan"
            },
            "color": "#099ad0"
          },
          {
            "code": "AE",
            "name": {
              "FR": "Émirats Arabes Unis",
              "EN": "United Arab Emirates"
            },
            "key": {
              "FR": "emirats_arabes_unis",
              "EN": "united_arab_emirates"
            },
            "color": "#0798cf"
          },
          {
            "code": "UZ",
            "name": {
              "FR": "Ouzbékistan",
              "EN": "Uzbekistan"
            },
            "key": {
              "FR": "ouzbekistan",
              "EN": "uzbekistan"
            },
            "color": "#0495ce"
          },
          {
            "code": "VN",
            "name": {
              "FR": "Vietnam",
              "EN": "Vietnam"
            },
            "key": {
              "FR": "vietnam",
              "EN": "vietnam"
            },
            "color": "#0293cd"
          },
          {
            "code": "YE",
            "name": {
              "FR": "Yémen",
              "EN": "Yemen"
            },
            "key": {
              "FR": "yemen",
              "EN": "yemen"
            },
            "color": "#0091cc"
          }
        ]
      },
      {
        "name": "Europe",
        "color": "#ff33aa",
        "countries": [
          {
            "code": "AL",
            "name": {
              "FR": "Albanie",
              "EN": "Albania"
            },
            "key": {
              "FR": "albanie",
              "EN": "albania"
            },
            "color": "#ff66dd"
          },
          {
            "code": "AD",
            "name": {
              "FR": "Andorre",
              "EN": "Andorra"
            },
            "key": {
              "FR": "andorre",
              "EN": "andorra"
            },
            "color": "#fe64db"
          },
          {
            "code": "AT",
            "name": {
              "FR": "Autriche",
              "EN": "Austria"
            },
            "key": {
              "FR": "autriche",
              "EN": "austria"
            },
            "color": "#fd62d9"
          },
          {
            "code": "BY",
            "name": {
              "FR": "Biélorussie",
              "EN": "Belarus"
            },
            "key": {
              "FR": "bielorussie",
              "EN": "belarus"
            },
            "color": "#fc60d7"
          },
          {
            "code": "BE",
            "name": {
              "FR": "Belgique",
              "EN": "Belgium"
            },
            "key": {
              "FR": "belgique",
              "EN": "belgium"
            },
            "color": "#fb5ed5"
          },
          {
            "code": "BA",
            "name": {
              "FR": "Bosnie-Herzégovine",
              "EN": "Bosnia and Herzegovina"
            },
            "key": {
              "FR": "bosnie-herzegovine",
              "EN": "bosnia_and_herzegovina"
            },
            "color": "#fa5bd2"
          },
          {
            "code": "BG",
            "name": {
              "FR": "Bulgarie",
              "EN": "Bulgaria"
            },
            "key": {
              "FR": "bulgarie",
              "EN": "bulgaria"
            },
            "color": "#f959d0"
          },
          {
            "code": "HR",
            "name": {
              "FR": "Croatie",
              "EN": "Croatia"
            },
            "key": {
              "FR": "croatie",
              "EN": "croatia"
            },
            "color": "#f857ce"
          },
          {
            "code": "CY",
            "name": {
              "FR": "Chypre",
              "EN": "Cyprus"
            },
            "key": {
              "FR": "chypre",
              "EN": "cyprus"
            },
            "color": "#f755cc"
          },
          {
            "code": "CZ",
            "name": {
              "FR": "Tchéquie",
              "EN": "Czech Republic"
            },
            "key": {
              "FR": "tchequie",
              "EN": "czech_republic"
            },
            "color": "#f553ca"
          },
          {
            "code": "DK",
            "name": {
              "FR": "Danemark",
              "EN": "Denmark"
            },
            "key": {
              "FR": "danemark",
              "EN": "denmark"
            },
            "color": "#f451c8"
          },
          {
            "code": "EE",
            "name": {
              "FR": "Estonie",
              "EN": "Estonia"
            },
            "key": {
              "FR": "estonie",
              "EN": "estonia"
            },
            "color": "#f34fc6"
          },
          {
            "code": "FI",
            "name": {
              "FR": "Finlande",
              "EN": "Finland"
            },
            "key": {
              "FR": "finlande",
              "EN": "finland"
            },
            "color": "#f24dc4"
          },
          {
            "code": "FR",
            "name": {
              "FR": "France",
              "EN": "France"
            },
            "key": {
              "FR": "france",
              "EN": "france"
            },
            "color": "#f14ac1"
          },
          {
            "code": "GE",
            "name": {
              "FR": "Géorgie",
              "EN": "Georgia"
            },
            "key": {
              "FR": "georgie",
              "EN": "georgia"
            },
            "color": "#f048bf"
          },
          {
            "code": "DE",
            "name": {
              "FR": "Allemagne",
              "EN": "Germany"
            },
            "key": {
              "FR": "allemagne",
              "EN": "germany"
            },
            "color": "#ef46bd"
          },
          {
            "code": "GR",
            "name": {
              "FR": "Grèce",
              "EN": "Greece"
            },
            "key": {
              "FR": "grece",
              "EN": "greece"
            },
            "color": "#ee44bb"
          },
          {
            "code": "HU",
            "name": {
              "FR": "Hongrie",
              "EN": "Hungary"
            },
            "key": {
              "FR": "hongrie",
              "EN": "hungary"
            },
            "color": "#ed42b9"
          },
          {
            "code": "IS",
            "name": {
              "FR": "Islande",
              "EN": "Iceland"
            },
            "key": {
              "FR": "islande",
              "EN": "iceland"
            },
            "color": "#ec40b7"
          },
          {
            "code": "IE",
            "name": {
              "FR": "Irlande",
              "EN": "Ireland"
            },
            "key": {
              "FR": "irlande",
              "EN": "ireland"
            },
            "color": "#eb3eb5"
          },
          {
            "code": "IT",
            "name": {
              "FR": "Italie",
              "EN": "Italy"
            },
            "key": {
              "FR": "italie",
              "EN": "italy"
            },
            "color": "#ea3bb3"
          },
          {
            "code": "KZ",
            "name": {
              "FR": "Kazakhstan",
              "EN": "Kazakhstan"
            },
            "key": {
              "FR": "kazakhstan",
              "EN": "kazakhstan"
            },
            "color": "#e939b0"
          },
          {
            "code": "XK",
            "name": {
              "FR": "Kosovo",
              "EN": "Kosovo"
            },
            "key": {
              "FR": "kosovo",
              "EN": "kosovo"
            },
            "color": "#e837ae"
          },
          {
            "code": "LV",
            "name": {
              "FR": "Lettonie",
              "EN": "Latvia"
            },
            "key": {
              "FR": "lettonie",
              "EN": "latvia"
            },
            "color": "#e735ac"
          },
          {
            "code": "LI",
            "name": {
              "FR": "Liechtenstein",
              "EN": "Liechtenstein"
            },
            "key": {
              "FR": "liechtenstein",
              "EN": "liechtenstein"
            },
            "color": "#e633aa"
          },
          {
            "code": "LT",
            "name": {
              "FR": "Lituanie",
              "EN": "Lithuania"
            },
            "key": {
              "FR": "lituanie",
              "EN": "lithuania"
            },
            "color": "#e431a8"
          },
          {
            "code": "LU",
            "name": {
              "FR": "Luxembourg",
              "EN": "Luxembourg"
            },
            "key": {
              "FR": "luxembourg",
              "EN": "luxembourg"
            },
            "color": "#e32fa6"
          },
          {
            "code": "MT",
            "name": {
              "FR": "Malte",
              "EN": "Malta"
            },
            "key": {
              "FR": "malte",
              "EN": "malta"
            },
            "color": "#e22da4"
          },
          {
            "code": "MD",
            "name": {
              "FR": "Moldavie",
              "EN": "Moldova"
            },
            "key": {
              "FR": "moldavie",
              "EN": "moldova"
            },
            "color": "#e12aa2"
          },
          {
            "code": "MC",
            "name": {
              "FR": "Monaco",
              "EN": "Monaco"
            },
            "key": {
              "FR": "monaco",
              "EN": "monaco"
            },
            "color": "#e0289f"
          },
          {
            "code": "ME",
            "name": {
              "FR": "Monténégro",
              "EN": "Montenegro"
            },
            "key": {
              "FR": "montenegro",
              "EN": "montenegro"
            },
            "color": "#df269d"
          },
          {
            "code": "NL",
            "name": {
              "FR": "Pays-Bas",
              "EN": "Netherlands"
            },
            "key": {
              "FR": "pays-bas",
              "EN": "netherlands"
            },
            "color": "#de249b"
          },
          {
            "code": "MK",
            "name": {
              "FR": "Macédoine du Nord",
              "EN": "North Macedonia"
            },
            "key": {
              "FR": "macedoine_du_nord",
              "EN": "north_macedonia"
            },
            "color": "#dd2299"
          },
          {
            "code": "NO",
            "name": {
              "FR": "Norvège",
              "EN": "Norway"
            },
            "key": {
              "FR": "norvege",
              "EN": "norway"
            },
            "color": "#dc2097"
          },
          {
            "code": "PL",
            "name": {
              "FR": "Pologne",
              "EN": "Poland"
            },
            "key": {
              "FR": "pologne",
              "EN": "poland"
            },
            "color": "#db1e95"
          },
          {
            "code": "PT",
            "name": {
              "FR": "Portugal",
              "EN": "Portugal"
            },
            "key": {
              "FR": "portugal",
              "EN": "portugal"
            },
            "color": "#da1c93"
          },
          {
            "code": "RO",
            "name": {
              "FR": "Roumanie",
              "EN": "Romania"
            },
            "key": {
              "FR": "roumanie",
              "EN": "romania"
            },
            "color": "#d91a91"
          },
          {
            "code": "RU",
            "name": {
              "FR": "Russie",
              "EN": "Russia"
            },
            "key": {
              "FR": "russie",
              "EN": "russia"
            },
            "color": "#d8178e"
          },
          {
            "code": "SM",
            "name": {
              "FR": "Saint-Marin",
              "EN": "San Marino"
            },
            "key": {
              "FR": "saint-marin",
              "EN": "san_marino"
            },
            "color": "#d7158c"
          },
          {
            "code": "RS",
            "name": {
              "FR": "Serbie",
              "EN": "Serbia"
            },
            "key": {
              "FR": "serbie",
              "EN": "serbia"
            },
            "color": "#d6138a"
          },
          {
            "code": "SK",
            "name": {
              "FR": "Slovaquie",
              "EN": "Slovakia"
            },
            "key": {
              "FR": "slovaquie",
              "EN": "slovakia"
            },
            "color": "#d51188"
          },
          {
            "code": "SI",
            "name": {
              "FR": "Slovénie",
              "EN": "Slovenia"
            },
            "key": {
              "FR": "slovenie",
              "EN": "slovenia"
            },
            "color": "#d30f86"
          },
          {
            "code": "ES",
            "name": {
              "FR": "Espagne",
              "EN": "Spain"
            },
            "key": {
              "FR": "espagne",
              "EN": "spain"
            },
            "color": "#d20d84"
          },
          {
            "code": "SE",
            "name": {
              "FR": "Suède",
              "EN": "Sweden"
            },
            "key": {
              "FR": "suede",
              "EN": "sweden"
            },
            "color": "#d10b82"
          },
          {
            "code": "CH",
            "name": {
              "FR": "Suisse",
              "EN": "Switzerland"
            },
            "key": {
              "FR": "suisse",
              "EN": "switzerland"
            },
            "color": "#d00980"
          },
          {
            "code": "TR",
            "name": {
              "FR": "Turquie",
              "EN": "Turkey"
            },
            "key": {
              "FR": "turquie",
              "EN": "turkey"
            },
            "color": "#cf067d"
          },
          {
            "code": "UA",
            "name": {
              "FR": "Ukraine",
              "EN": "Ukraine"
            },
            "key": {
              "FR": "ukraine",
              "EN": "ukraine"
            },
            "color": "#ce047b"
          },
          {
            "code": "GB",
            "name": {
              "FR": "Royaume-Uni",
              "EN": "United Kingdom"
            },
            "key": {
              "FR": "royaume-uni",
              "EN": "united_kingdom"
            },
            "color": "#cd0279"
          },
          {
            "code": "VA",
            "name": {
              "FR": "Vatican",
              "EN": "Vatican City"
            },
            "key": {
              "FR": "vatican",
              "EN": "vatican_city"
            },
            "color": "#cc0077"
          }
        ]
      },
      {
        "name": "Amérique du Nord",
        "color": "#ff9933",
        "countries": [
          {
            "code": "AG",
            "name": {
              "FR": "Antigua-et-Barbuda",
              "EN": "Antigua and Barbuda"
            },
            "key": {
              "FR": "antigua-et-barbuda",
              "EN": "antigua_and_barbuda"
            },
            "color": "#ffcc66"
          },
          {
            "code": "BS",
            "name": {
              "FR": "Bahamas",
              "EN": "Bahamas"
            },
            "key": {
              "FR": "bahamas",
              "EN": "bahamas"
            },
            "color": "#fdc761"
          },
          {
            "code": "BB",
            "name": {
              "FR": "Barbade",
              "EN": "Barbados"
            },
            "key": {
              "FR": "barbade",
              "EN": "barbados"
            },
            "color": "#fac35d"
          },
          {
            "code": "BZ",
            "name": {
              "FR": "Belize",
              "EN": "Belize"
            },
            "key": {
              "FR": "belize",
              "EN": "belize"
            },
            "color": "#f8be58"
          },
          {
            "code": "CA",
            "name": {
              "FR": "Canada",
              "EN": "Canada"
            },
            "key": {
              "FR": "canada",
              "EN": "canada"
            },
            "color": "#f6b953"
          },
          {
            "code": "CR",
            "name": {
              "FR": "Costa Rica",
              "EN": "Costa Rica"
            },
            "key": {
              "FR": "costa_rica",
              "EN": "costa_rica"
            },
            "color": "#f3b54f"
          },
          {
            "code": "CU",
            "name": {
              "FR": "Cuba",
              "EN": "Cuba"
            },
            "key": {
              "FR": "cuba",
              "EN": "cuba"
            },
            "color": "#f1b04a"
          },
          {
            "code": "DM",
            "name": {
              "FR": "Dominique",
              "EN": "Dominica"
            },
            "key": {
              "FR": "dominique",
              "EN": "dominica"
            },
            "color": "#efac46"
          },
          {
            "code": "DO",
            "name": {
              "FR": "République Dominicaine",
              "EN": "Dominican Republic"
            },
            "key": {
              "FR": "republique_dominicaine",
              "EN": "dominican_republic"
            },
            "color": "#eca741"
          },
          {
            "code": "SV",
            "name": {
              "FR": "Salvador",
              "EN": "El Salvador"
            },
            "key": {
              "FR": "salvador",
              "EN": "el_salvador"
            },
            "color": "#eaa23c"
          },
          {
            "code": "GD",
            "name": {
              "FR": "Grenade",
              "EN": "Grenada"
            },
            "key": {
              "FR": "grenade",
              "EN": "grenada"
            },
            "color": "#e89e38"
          },
          {
            "code": "GT",
            "name": {
              "FR": "Guatemala",
              "EN": "Guatemala"
            },
            "key": {
              "FR": "guatemala",
              "EN": "guatemala"
            },
            "color": "#e69933"
          },
          {
            "code": "HT",
            "name": {
              "FR": "Haïti",
              "EN": "Haiti"
            },
            "key": {
              "FR": "haiti",
              "EN": "haiti"
            },
            "color": "#e3942e"
          },
          {
            "code": "HN",
            "name": {
              "FR": "Honduras",
              "EN": "Honduras"
            },
            "key": {
              "FR": "honduras",
              "EN": "honduras"
            },
            "color": "#e1902a"
          },
          {
            "code": "JM",
            "name": {
              "FR": "Jamaïque",
              "EN": "Jamaica"
            },
            "key": {
              "FR": "jamaïque",
              "EN": "jamaica"
            },
            "color": "#df8b25"
          },
          {
            "code": "MX",
            "name": {
              "FR": "Mexique",
              "EN": "Mexico"
            },
            "key": {
              "FR": "mexique",
              "EN": "mexico"
            },
            "color": "#dc8620"
          },
          {
            "code": "NI",
            "name": {
              "FR": "Nicaragua",
              "EN": "Nicaragua"
            },
            "key": {
              "FR": "nicaragua",
              "EN": "nicaragua"
            },
            "color": "#da821c"
          },
          {
            "code": "PA",
            "name": {
              "FR": "Panama",
              "EN": "Panama"
            },
            "key": {
              "FR": "panama",
              "EN": "panama"
            },
            "color": "#d87d17"
          },
          {
            "code": "KN",
            "name": {
              "FR": "Saint-Christophe-et-Niévès",
              "EN": "Saint Kitts and Nevis"
            },
            "key": {
              "FR": "saint-christophe-et-nieves",
              "EN": "saint_kitts_and_nevis"
            },
            "color": "#d57913"
          },
          {
            "code": "LC",
            "name": {
              "FR": "Sainte-Lucie",
              "EN": "Saint Lucia"
            },
            "key": {
              "FR": "sainte-lucie",
              "EN": "saint_lucia"
            },
            "color": "#d3740e"
          },
          {
            "code": "VC",
            "name": {
              "FR": "Saint-Vincent-et-les-Grenadines",
              "EN": "Saint Vincent and the Grenadines"
            },
            "key": {
              "FR": "saint-vincent-et-les-grenadines",
              "EN": "saint_vincent_and_the_grenadines"
            },
            "color": "#d16f09"
          },
          {
            "code": "TT",
            "name": {
              "FR": "Trinité-et-Tobago",
              "EN": "Trinidad and Tobago"
            },
            "key": {
              "FR": "trinite-et-tobago",
              "EN": "trinidad_and_tobago"
            },
            "color": "#ce6b05"
          },
          {
            "code": "US",
            "name": {
              "FR": "États-Unis",
              "EN": "United States"
            },
            "key": {
              "FR": "etats-unis",
              "EN": "united_states"
            },
            "color": "#cc6600"
          }
        ]
      },
      {
        "name": "Amérique du Sud",
        "color": "#9933ff",
        "countries": [
          {
            "code": "AR",
            "name": {
              "FR": "Argentine",
              "EN": "Argentina"
            },
            "key": {
              "FR": "argentine",
              "EN": "argentina"
            },
            "color": "#cc66ff"
          },
          {
            "code": "BO",
            "name": {
              "FR": "Bolivie",
              "EN": "Bolivia"
            },
            "key": {
              "FR": "bolivie",
              "EN": "bolivia"
            },
            "color": "#c35dfa"
          },
          {
            "code": "BR",
            "name": {
              "FR": "Brésil",
              "EN": "Brazil"
            },
            "key": {
              "FR": "bresil",
              "EN": "brazil"
            },
            "color": "#b953f6"
          },
          {
            "code": "CL",
            "name": {
              "FR": "Chili",
              "EN": "Chile"
            },
            "key": {
              "FR": "chili",
              "EN": "chile"
            },
            "color": "#b04af1"
          },
          {
            "code": "CO",
            "name": {
              "FR": "Colombie",
              "EN": "Colombia"
            },
            "key": {
              "FR": "colombie",
              "EN": "colombia"
            },
            "color": "#a741ec"
          },
          {
            "code": "EC",
            "name": {
              "FR": "Équateur",
              "EN": "Ecuador"
            },
            "key": {
              "FR": "equateur",
              "EN": "ecuador"
            },
            "color": "#9e38e8"
          },
          {
            "code": "GY",
            "name": {
              "FR": "Guyana",
              "EN": "Guyana"
            },
            "key": {
              "FR": "guyana",
              "EN": "guyana"
            },
            "color": "#942ee3"
          },
          {
            "code": "PY",
            "name": {
              "FR": "Paraguay",
              "EN": "Paraguay"
            },
            "key": {
              "FR": "paraguay",
              "EN": "paraguay"
            },
            "color": "#8b25df"
          },
          {
            "code": "PE",
            "name": {
              "FR": "Pérou",
              "EN": "Peru"
            },
            "key": {
              "FR": "perou",
              "EN": "peru"
            },
            "color": "#821cda"
          },
          {
            "code": "SR",
            "name": {
              "FR": "Suriname",
              "EN": "Suriname"
            },
            "key": {
              "FR": "suriname",
              "EN": "suriname"
            },
            "color": "#7913d5"
          },
          {
            "code": "UY",
            "name": {
              "FR": "Uruguay",
              "EN": "Uruguay"
            },
            "key": {
              "FR": "uruguay",
              "EN": "uruguay"
            },
            "color": "#6f09d1"
          },
          {
            "code": "VE",
            "name": {
              "FR": "Venezuela",
              "EN": "Venezuela"
            },
            "key": {
              "FR": "venezuela",
              "EN": "venezuela"
            },
            "color": "#6600cc"
          }
        ]
      },
      {
        "name": "Océanie",
        "color": "#33ff57",
        "countries": [
          {
            "code": "AU",
            "name": {
              "FR": "Australie",
              "EN": "Australia"
            },
            "key": {
              "FR": "australie",
              "EN": "australia"
            },
            "color": "#66ff8a"
          },
          {
            "code": "FJ",
            "name": {
              "FR": "Fidji",
              "EN": "Fiji"
            },
            "key": {
              "FR": "fidji",
              "EN": "fiji"
            },
            "color": "#5efb82"
          },
          {
            "code": "KI",
            "name": {
              "FR": "Kiribati",
              "EN": "Kiribati"
            },
            "key": {
              "FR": "kiribati",
              "EN": "kiribati"
            },
            "color": "#56f77a"
          },
          {
            "code": "MH",
            "name": {
              "FR": "Îles Marshall",
              "EN": "Marshall Islands"
            },
            "key": {
              "FR": "iles_marshall",
              "EN": "marshall_islands"
            },
            "color": "#4ef372"
          },
          {
            "code": "FM",
            "name": {
              "FR": "Micronésie",
              "EN": "Micronesia"
            },
            "key": {
              "FR": "micronesie",
              "EN": "micronesia"
            },
            "color": "#47ef6b"
          },
          {
            "code": "NR",
            "name": {
              "FR": "Nauru",
              "EN": "Nauru"
            },
            "key": {
              "FR": "nauru",
              "EN": "nauru"
            },
            "color": "#3feb63"
          },
          {
            "code": "NZ",
            "name": {
              "FR": "Nouvelle-Zélande",
              "EN": "New Zealand"
            },
            "key": {
              "FR": "nouvelle-zelande",
              "EN": "new_zealand"
            },
            "color": "#37e75b"
          },
          {
            "code": "PW",
            "name": {
              "FR": "Palaos",
              "EN": "Palau"
            },
            "key": {
              "FR": "palaos",
              "EN": "palau"
            },
            "color": "#2fe453"
          },
          {
            "code": "PG",
            "name": {
              "FR": "Papouasie-Nouvelle-Guinée",
              "EN": "Papua New Guinea"
            },
            "key": {
              "FR": "papouasie-nouvelle-guinee",
              "EN": "papua_new_guinea"
            },
            "color": "#27e04b"
          },
          {
            "code": "WS",
            "name": {
              "FR": "Samoa",
              "EN": "Samoa"
            },
            "key": {
              "FR": "samoa",
              "EN": "samoa"
            },
            "color": "#1fdc43"
          },
          {
            "code": "SB",
            "name": {
              "FR": "Îles Salomon",
              "EN": "Solomon Islands"
            },
            "key": {
              "FR": "iles_salomon",
              "EN": "solomon_islands"
            },
            "color": "#18d83c"
          },
          {
            "code": "TO",
            "name": {
              "FR": "Tonga",
              "EN": "Tonga"
            },
            "key": {
              "FR": "tonga",
              "EN": "tonga"
            },
            "color": "#10d434"
          },
          {
            "code": "TV",
            "name": {
              "FR": "Tuvalu",
              "EN": "Tuvalu"
            },
            "key": {
              "FR": "tuvalu",
              "EN": "tuvalu"
            },
            "color": "#08d02c"
          },
          {
            "code": "VU",
            "name": {
              "FR": "Vanuatu",
              "EN": "Vanuatu"
            },
            "key": {
              "FR": "vanuatu",
              "EN": "vanuatu"
            },
            "color": "#00cc24"
          }
        ]
      },
      {
        "name": "Antarctique",
        "color": "#57ff33",
        "countries": [
          {
            "code": "AQ",
            "name": {
              "FR": "Antarctique",
              "EN": "Antarctica"
            },
            "key": {
              "FR": "antarctique",
              "EN": "antarctica"
            },
            "color": "#57e633"
          }
        ]
      }
    ]
  }

================
File: assets/scripts/geneafan/gedcom/departementData.js
================
export const departementData = {
    ain: {
        name: "Ain",
        code: "01",
        departementColor: "#ffffff",
        region: "Auvergne-Rhône-Alpes",
    },
    aisne: {
        name: "Aisne",
        code: "02",
        departementColor: "#f1f2f8",
        region: "Hauts-de-France",
    },
    allier: {
        name: "Allier",
        code: "03",
        departementColor: "#fff5f5",
        region: "Auvergne-Rhône-Alpes",
    },
    "alpes-de-haute-provence": {
        name: "Alpes-de-Haute-Provence",
        code: "04",
        departementColor: "#ffe1ff",
        region: "Provence-Alpes-Côte d'Azur",
    },
    "alpes-maritimes": {
        name: "Alpes-Maritimes",
        code: "06",
        departementColor: "#fba6d7",
        region: "Provence-Alpes-Côte d'Azur",
    },
    ardeche: {
        name: "Ardèche",
        code: "07",
        departementColor: "#ffecec",
        region: "Auvergne-Rhône-Alpes",
    },
    ardennes: {
        name: "Ardennes",
        code: "08",
        departementColor: "#809086",
        region: "Grand Est",
    },
    ariege: {
        name: "Ariège",
        code: "09",
        departementColor: "#de3b41",
        region: "Occitanie",
    },
    aube: {
        name: "Aube",
        code: "10",
        departementColor: "#75847b",
        region: "Grand Est",
    },
    aude: {
        name: "Aude",
        code: "11",
        departementColor: "#d2363c",
        region: "Occitanie",
    },
    aveyron: {
        name: "Aveyron",
        code: "12",
        departementColor: "#c53237",
        region: "Occitanie",
    },
    "bas-rhin": {
        name: "Bas-Rhin",
        code: "67",
        departementColor: "#353d37",
        region: "Grand Est",
    },
    "bouches-du-rhone": {
        name: "Bouches-du-Rhône",
        code: "13",
        departementColor: "#fa88c4",
        region: "Provence-Alpes-Côte d'Azur",
    },
    calvados: {
        name: "Calvados",
        code: "14",
        departementColor: "#ffdd66",
        region: "Normandie",
    },
    cantal: {
        name: "Cantal",
        code: "15",
        departementColor: "#ffe2e2",
        region: "Auvergne-Rhône-Alpes",
    },
    charente: {
        name: "Charente",
        code: "16",
        departementColor: "#a5626a",
        region: "Nouvelle-Aquitaine",
    },
    "charente-maritime": {
        name: "Charente-Maritime",
        code: "17",
        departementColor: "#9a5b62",
        region: "Nouvelle-Aquitaine",
    },
    cher: {
        name: "Cher",
        code: "18",
        departementColor: "#ffcc66",
        region: "Centre-Val de Loire",
    },
    correze: {
        name: "Corrèze",
        code: "19",
        departementColor: "#8f535a",
        region: "Nouvelle-Aquitaine",
    },
    "corse-du-sud": {
        name: "Corse-du-Sud",
        code: "2A",
        departementColor: "#cc66ff",
        region: "Corse",
    },
    "cote-d'or": {
        name: "Côte-d'Or",
        code: "21",
        departementColor: "#b33353",
        region: "Bourgogne-Franche-Comté",
    },
    "cotes-d'armor": {
        name: "Côtes-d'Armor",
        code: "22",
        departementColor: "#579eff",
        region: "Bretagne",
    },
    creuse: {
        name: "Creuse",
        code: "23",
        departementColor: "#834c53",
        region: "Nouvelle-Aquitaine",
    },
    "deux-sevres": {
        name: "Deux-Sèvres",
        code: "79",
        departementColor: "#402024",
        region: "Nouvelle-Aquitaine",
    },
    dordogne: {
        name: "Dordogne",
        code: "24",
        departementColor: "#78454b",
        region: "Nouvelle-Aquitaine",
    },
    doubs: {
        name: "Doubs",
        code: "25",
        departementColor: "#9d2c48",
        region: "Bourgogne-Franche-Comté",
    },
    drome: {
        name: "Drôme",
        code: "26",
        departementColor: "#ffd8d8",
        region: "Auvergne-Rhône-Alpes",
    },
    essonne: {
        name: "Essonne",
        code: "91",
        departementColor: "#b29eb1",
        region: "Île-de-France",
    },
    eure: {
        name: "Eure",
        code: "27",
        departementColor: "#f2c44d",
        region: "Normandie",
    },
    "eure-et-loir": {
        name: "Eure-et-Loir",
        code: "28",
        departementColor: "#f5b852",
        region: "Centre-Val de Loire",
    },
    finistere: {
        name: "Finistère",
        code: "29",
        departementColor: "#417ed2",
        region: "Bretagne",
    },
    gard: {
        name: "Gard",
        code: "30",
        departementColor: "#b92d32",
        region: "Occitanie",
    },
    gers: {
        name: "Gers",
        code: "32",
        departementColor: "#a02428",
        region: "Occitanie",
    },
    gironde: {
        name: "Gironde",
        code: "33",
        departementColor: "#6d3d43",
        region: "Nouvelle-Aquitaine",
    },
    guadeloupe: {
        name: "Guadeloupe",
        code: "971",
        departementColor: "#e65733",
        region: "Guadeloupe",
    },
    guyane: {
        name: "Guyane",
        code: "973",
        departementColor: "#e633aa",
        region: "Guyane",
    },
    "haut-rhin": {
        name: "Haut-Rhin",
        code: "68",
        departementColor: "#2a312c",
        region: "Grand Est",
    },
    "haute-corse": {
        name: "Haute-Corse",
        code: "2B",
        departementColor: "#6600cc",
        region: "Corse",
    },
    "haute-garonne": {
        name: "Haute-Garonne",
        code: "31",
        departementColor: "#ad282d",
        region: "Occitanie",
    },
    "haute-loire": {
        name: "Haute-Loire",
        code: "43",
        departementColor: "#ffbbbb",
        region: "Auvergne-Rhône-Alpes",
    },
    "haute-marne": {
        name: "Haute-Marne",
        code: "52",
        departementColor: "#606c64",
        region: "Grand Est",
    },
    "haute-saone": {
        name: "Haute-Saône",
        code: "70",
        departementColor: "#5c1627",
        region: "Bourgogne-Franche-Comté",
    },
    "haute-savoie": {
        name: "Haute-Savoie",
        code: "74",
        departementColor: "#ff9494",
        region: "Auvergne-Rhône-Alpes",
    },
    "haute-vienne": {
        name: "Haute-Vienne",
        code: "87",
        departementColor: "#2a1114",
        region: "Nouvelle-Aquitaine",
    },
    "hautes-alpes": {
        name: "Hautes-Alpes",
        code: "05",
        departementColor: "#fdc3eb",
        region: "Provence-Alpes-Côte d'Azur",
    },
    "hautes-pyrenees": {
        name: "Hautes-Pyrénées",
        code: "65",
        departementColor: "#6f1115",
        region: "Occitanie",
    },
    "hauts-de-seine": {
        name: "Hauts-de-Seine",
        code: "92",
        departementColor: "#a490a2",
        region: "Île-de-France",
    },
    herault: {
        name: "Hérault",
        code: "34",
        departementColor: "#941f24",
        region: "Occitanie",
    },
    "ille-et-vilaine": {
        name: "Ille-et-Vilaine",
        code: "35",
        departementColor: "#2b5ea4",
        region: "Bretagne",
    },
    indre: {
        name: "Indre",
        code: "36",
        departementColor: "#eba33d",
        region: "Centre-Val de Loire",
    },
    "indre-et-loire": {
        name: "Indre-et-Loire",
        code: "37",
        departementColor: "#e08f29",
        region: "Centre-Val de Loire",
    },
    isere: {
        name: "Isère",
        code: "38",
        departementColor: "#ffcece",
        region: "Auvergne-Rhône-Alpes",
    },
    jura: {
        name: "Jura",
        code: "39",
        departementColor: "#87243d",
        region: "Bourgogne-Franche-Comté",
    },
    la_reunion: {
        name: "La Réunion",
        code: "974",
        departementColor: "#f3e498",
        region: "La Réunion",
    },
    landes: {
        name: "Landes",
        code: "40",
        departementColor: "#62363b",
        region: "Nouvelle-Aquitaine",
    },
    "loir-et-cher": {
        name: "Loir-et-Cher",
        code: "41",
        departementColor: "#d67a14",
        region: "Centre-Val de Loire",
    },
    loire: {
        name: "Loire",
        code: "42",
        departementColor: "#ffc5c5",
        region: "Auvergne-Rhône-Alpes",
    },
    "loire-atlantique": {
        name: "Loire-Atlantique",
        code: "44",
        departementColor: "#66ffdd",
        region: "Pays de la Loire",
    },
    loiret: {
        name: "Loiret",
        code: "45",
        departementColor: "#cc6600",
        region: "Centre-Val de Loire",
    },
    lot: {
        name: "Lot",
        code: "46",
        departementColor: "#881a1f",
        region: "Occitanie",
    },
    "lot-et-garonne": {
        name: "Lot-et-Garonne",
        code: "47",
        departementColor: "#572e33",
        region: "Nouvelle-Aquitaine",
    },
    lozere: {
        name: "Lozère",
        code: "48",
        departementColor: "#7b161a",
        region: "Occitanie",
    },
    "maine-et-loire": {
        name: "Maine-et-Loire",
        code: "49",
        departementColor: "#4df2c4",
        region: "Pays de la Loire",
    },
    manche: {
        name: "Manche",
        code: "50",
        departementColor: "#e6aa33",
        region: "Normandie",
    },
    marne: {
        name: "Marne",
        code: "51",
        departementColor: "#6a7870",
        region: "Grand Est",
    },
    martinique: {
        name: "Martinique",
        code: "972",
        departementColor: "#1a5556",
        region: "Martinique",
    },
    mayenne: {
        name: "Mayenne",
        code: "53",
        departementColor: "#33e6aa",
        region: "Pays de la Loire",
    },
    mayotte: {
        name: "Mayotte",
        code: "976",
        departementColor: "#9933e6",
        region: "Mayotte",
    },
    "meurthe-et-moselle": {
        name: "Meurthe-et-Moselle",
        code: "54",
        departementColor: "#556059",
        region: "Grand Est",
    },
    meuse: {
        name: "Meuse",
        code: "55",
        departementColor: "#4a554e",
        region: "Grand Est",
    },
    morbihan: {
        name: "Morbihan",
        code: "56",
        departementColor: "#153e77",
        region: "Bretagne",
    },
    moselle: {
        name: "Moselle",
        code: "57",
        departementColor: "#3f4943",
        region: "Grand Est",
    },
    nievre: {
        name: "Nièvre",
        code: "58",
        departementColor: "#711d32",
        region: "Bourgogne-Franche-Comté",
    },
    nord: {
        name: "Nord",
        code: "59",
        departementColor: "#d7d8df",
        region: "Hauts-de-France",
    },
    "nouvelle-caledonie": {
        name: "Nouvelle-Calédonie",
        code: "988",
        departementColor: "#57e633",
        region: "Nouvelle-Calédonie",
    },
    oise: {
        name: "Oise",
        code: "60",
        departementColor: "#bdbec7",
        region: "Hauts-de-France",
    },
    orne: {
        name: "Orne",
        code: "61",
        departementColor: "#d9911a",
        region: "Normandie",
    },
    paris: {
        name: "Paris",
        code: "75",
        departementColor: "#ddcbdc",
        region: "Île-de-France",
    },
    "pas-de-calais": {
        name: "Pas-de-Calais",
        code: "62",
        departementColor: "#a2a4ae",
        region: "Hauts-de-France",
    },
    polynesie_francaise: {
        name: "Polynésie française",
        code: "987",
        departementColor: "#309db6",
        region: "Polynésie française",
    },
    "puy-de-dome": {
        name: "Puy-de-Dôme",
        code: "63",
        departementColor: "#ffb1b1",
        region: "Auvergne-Rhône-Alpes",
    },
    "pyrenees-atlantiques": {
        name: "Pyrénées-Atlantiques",
        code: "64",
        departementColor: "#4c272b",
        region: "Nouvelle-Aquitaine",
    },
    "pyrenees-orientales": {
        name: "Pyrénées-Orientales",
        code: "66",
        departementColor: "#630c10",
        region: "Occitanie",
    },
    rhone: {
        name: "Rhône",
        code: "69",
        departementColor: "#ffa7a7",
        region: "Auvergne-Rhône-Alpes",
    },
    "saone-et-loire": {
        name: "Saône-et-Loire",
        code: "71",
        departementColor: "#460f1c",
        region: "Bourgogne-Franche-Comté",
    },
    sarthe: {
        name: "Sarthe",
        code: "72",
        departementColor: "#1ad991",
        region: "Pays de la Loire",
    },
    savoie: {
        name: "Savoie",
        code: "73",
        departementColor: "#ff9e9e",
        region: "Auvergne-Rhône-Alpes",
    },
    "seine-et-marne": {
        name: "Seine-et-Marne",
        code: "77",
        departementColor: "#cfbcce",
        region: "Île-de-France",
    },
    "seine-maritime": {
        name: "Seine-Maritime",
        code: "76",
        departementColor: "#cc7700",
        region: "Normandie",
    },
    "seine-saint-denis": {
        name: "Seine-Saint-Denis",
        code: "93",
        departementColor: "#968194",
        region: "Île-de-France",
    },
    somme: {
        name: "Somme",
        code: "80",
        departementColor: "#888a95",
        region: "Hauts-de-France",
    },
    tarn: {
        name: "Tarn",
        code: "81",
        departementColor: "#56080b",
        region: "Occitanie",
    },
    "tarn-et-garonne": {
        name: "Tarn-et-Garonne",
        code: "82",
        departementColor: "#4a0306",
        region: "Occitanie",
    },
    territoire_de_belfort: {
        name: "Territoire de Belfort",
        code: "90",
        departementColor: "#1a0006",
        region: "Bourgogne-Franche-Comté",
    },
    "val-d'oise": {
        name: "Val-d'Oise",
        code: "95",
        departementColor: "#796377",
        region: "Île-de-France",
    },
    "val-de-marne": {
        name: "Val-de-Marne",
        code: "94",
        departementColor: "#877285",
        region: "Île-de-France",
    },
    var: {
        name: "Var",
        code: "83",
        departementColor: "#f86bb0",
        region: "Provence-Alpes-Côte d'Azur",
    },
    vaucluse: {
        name: "Vaucluse",
        code: "84",
        departementColor: "#f64d9c",
        region: "Provence-Alpes-Côte d'Azur",
    },
    vendee: {
        name: "Vendée",
        code: "85",
        departementColor: "#00cc77",
        region: "Pays de la Loire",
    },
    vienne: {
        name: "Vienne",
        code: "86",
        departementColor: "#35181c",
        region: "Nouvelle-Aquitaine",
    },
    vosges: {
        name: "Vosges",
        code: "88",
        departementColor: "#1f2521",
        region: "Grand Est",
    },
    yonne: {
        name: "Yonne",
        code: "89",
        departementColor: "#300711",
        region: "Bourgogne-Franche-Comté",
    },
    yvelines: {
        name: "Yvelines",
        code: "78",
        departementColor: "#c0adbf",
        region: "Île-de-France",
    },
};

================
File: assets/scripts/geneafan/gedcom/familyTownsStore.js
================
import { makeObservable, observable, action, computed, runInAction, toJS } from '../common/stores/mobx-config.js';

class FamilyTownsStore {
    townsData = new Map();
    isLoading = false;

    constructor() {
        makeObservable(this, {
            townsData: observable,
            isLoading: observable,
            setTownsData: action,
            addTown: action,
            updateTown: action,
            totalTowns: computed
        });
    }

    cleanData = (data) => {
        return toJS(data);
    }

    getTown = (key) => {
        const town = this.townsData.get(key);
        return town ? this.cleanData(town) : null;
    }

    getAllTowns = () => {
        return this.cleanData(Object.fromEntries(this.townsData));
    }

    setTownsData = (towns) => {
        runInAction(() => {
            this.townsData = new Map(Object.entries(towns));
        });
    }

    addTown = (key, townData) => {
        runInAction(() => {
            this.townsData.set(key, {
                town: townData.town || '',
                townDisplay: townData.townDisplay || townData.town || '',
                departement: townData.departement || '',
                departementColor: townData.departementColor || '',
                country: townData.country || '',
                countryCode: townData.countryCode || '',
                countryColor: townData.countryColor || '',
                latitude: townData.latitude || '',
                longitude: townData.longitude || ''
            });
        });
    }

    updateTown = (key, updates) => {
        runInAction(() => {
            const town = this.townsData.get(key);
            if (town) {
                this.townsData.set(key, { ...town, ...updates });
            }
        });
    }

    updateTownsViaProxy = async () => {
        console.log('Starting geocoding process...');
        runInAction(() => {
            this.isLoading = true;
        });

        try {
            const townsToUpdate = {};
            this.townsData.forEach((town, key) => {
                if (((town.country === 'France' || town.country === 'FR' || town.country === '') &&
                    ((town.departement && town.departement.length === 2) || !town.departement || !town.latitude || !town.longitude)) ||
                    ((town.country !== 'France' && town.country !== 'FR' && town.country !== '') && (!town.latitude || !town.longitude))) {
                    townsToUpdate[key] = this.cleanData(town);
                }
            });

            if (Object.keys(townsToUpdate).length === 0) {
                console.log('No towns need updating');
                return;
            }

            const response = await fetch('https://opencageproxy.genealogie.workers.dev/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    familyTowns: townsToUpdate,
                    userId: localStorage.getItem('userId')
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const updatedTowns = await response.json();
            
            runInAction(() => {
                Object.entries(updatedTowns).forEach(([key, data]) => {
                    this.updateTown(key, data);
                });
                this.saveToLocalStorage();
            });

        } catch (error) {
            console.error('Error updating towns:', error);
        } finally {
            runInAction(() => {
                this.isLoading = false;
            });
        }
    }

    loadFromLocalStorage = () => {
        try {
            const stored = localStorage.getItem('townsDB');
            if (stored) {
                const parsed = JSON.parse(stored);
                this.setTownsData(parsed);
            }
        } catch (error) {
            console.error('Error loading from localStorage:', error);
        }
    }

    saveToLocalStorage = () => {
        try {
            const data = this.getAllTowns();
            localStorage.setItem('townsDB', JSON.stringify(data));
        } catch (error) {
            console.error('Error saving to localStorage:', error);
        }
    }

    get totalTowns() {
        return this.townsData.size;
    }
}

const familyTownsStore = new FamilyTownsStore();
export default familyTownsStore;

================
File: assets/scripts/geneafan/gedcom/gedcomConstantsStore.js
================
class GedcomConstantsStore {
    constructor() {
        // Tags principaux
        this.TAGS = {
            HEAD: "HEAD",
            ENCODING: "CHAR",
            FORMAT: "FORM",
            INDIVIDUAL: "INDI",
            FAMILY: "FAM",
            CHILD: "CHIL",
            HUSBAND: "HUSB",
            WIFE: "WIFE",
            NAME: "NAME",
            GIVEN_NAME: "GIVN",
            SURNAME: "SURN",
            SURNAME_PREFIX: "SPFX",
            BIRTH: "BIRT",
            BAPTISM: "CHR",
            DEATH: "DEAT",
            BURIAL: "BURI",
            SEX: "SEX",
            DATE: "DATE",
            PLACE: "PLAC",
            MARRIAGE: "MARR",
            SIGNATURE: "SIGN",
            EVENT: "EVEN",
            TYPE: "TYPE",
            NOTE: "NOTE",
            OCCUPATION: "OCCU"
        };

        // Valeurs spéciales
        this.VALUES = {
            YES: "YES",
            ANSI: "ANSI",
            OCCUPATION: "Occupation"
        };

        // Préfixes de date
        this.DATE_PREFIXES = {
            ABOUT: "ABT",
            BEFORE: "BEF",
            AFTER: "AFT"
        };

        // Calendriers
        this.CALENDARS = {
            GREGORIAN: "@#DGREGORIAN@",
            REPUBLICAN: "@#DFRENCH R@"
        };

        // Mois
        this.MONTHS = {
            GREGORIAN: [
                "JAN", "FEB", "MAR", "APR", "MAY", "JUN",
                "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"
            ],
            REPUBLICAN: [
                "VEND", "BRUM", "FRIM", "NIVO", "PLUV", "VENT",
                "GERM", "FLOR", "PRAI", "MESS", "THER", "FRUC", "COMP"
            ]
        };

        // Conversion années républicaines
        this.REPUBLICAN_YEARS = [
            "I", "II", "III", "IV", "V", "VI", "VII",
            "VIII", "IX", "X", "XI", "XII", "XIII"
        ];

        // Convertir les tableaux de mois en objets pour une recherche plus rapide
        this.MONTHS_MAP = {
            GREGORIAN: this.MONTHS.GREGORIAN.reduce((obj, month, index) => {
                obj[month] = index + 1;
                return obj;
            }, {}),
            REPUBLICAN: this.MONTHS.REPUBLICAN.reduce((obj, month, index) => {
                obj[month] = index + 1;
                return obj;
            }, {})
        };
    }

    // Helpers
    byTag(tag) {
        return (obj) => obj.tag === tag;
    }

    isValidMonth(month, calendar = 'GREGORIAN') {
        return month in this.MONTHS_MAP[calendar];
    }

    getMonthNumber(month, calendar = 'GREGORIAN') {
        return this.MONTHS_MAP[calendar][month] || 0;
    }

    isRepublicanCalendar(dateString) {
        return dateString.startsWith(this.CALENDARS.REPUBLICAN);
    }

    isGregorianCalendar(dateString) {
        return dateString.startsWith(this.CALENDARS.GREGORIAN);
    }
}

// Create and export a singleton instance
const gedcomConstantsStore = new GedcomConstantsStore();
export default gedcomConstantsStore;

================
File: assets/scripts/geneafan/gedcom/stores/gedcomDataSore.js
================
import { makeObservable, observable, action, computed, runInAction, reaction } from '../common/stores/mobx-config.js';
import _ from 'lodash';

class GedcomDataStore {
    sourceData = [];
    individualsCache = new Map();
    _hierarchy = null;
    familyEvents = [];
    isFileUploaded = false;
    reactionDisposers = new Map();  // Nouveau: stockage des réactions

    constructor() {
        makeObservable(this, {
            sourceData: observable,
            individualsCache: observable,
            _hierarchy: observable.ref,
            familyEvents: observable,
            isFileUploaded: observable,
            reactionDisposers: observable, // Nouveau
            
            // Actions
            setSourceData: action,
            clearSourceData: action,
            setIndividualsCache: action,
            setHierarchy: action,
            addFamilyEvent: action,
            setFamilyEvents: action,
            setFileUploaded: action,
            clearAllState: action,
            addReactionDisposer: action, // Nouveau
            removeReactionDisposer: action, // Nouveau
            clearReactions: action, // Nouveau
            
            // Computed
            totalIndividuals: computed,
            hasData: computed,
            familyTreeData: computed
        });
    }

    // Source Data Methods
    getSourceData = () => {
        return this.sourceData;
    }

    setSourceData = (newSourceData) => {
        runInAction(() => {
            this.sourceData = newSourceData;
        });
    }

    clearSourceData = () => {
        runInAction(() => {
            this.sourceData = [];
        });
    }

    // Individuals Cache Methods
    setIndividualsCache = (newCache) => {
        runInAction(() => {
            this.individualsCache = new Map(newCache);
        });
    }

    getIndividualsCache = () => {
        return this.individualsCache;
    }

    getIndividualsList = () => {
        return Array.from(this.individualsCache.values());
    }

    getIndividual = (id) => {
        return this.individualsCache.get(id);
    }

    addIndividual = (id, data) => {
        runInAction(() => {
            this.individualsCache.set(id, data);
        });
    }

    // Hierarchy Methods
    setHierarchy = (newHierarchy) => {
        console.log('📊 setHierarchy appelé avec:', newHierarchy);
        runInAction(() => {
            const oldHierarchy = this._hierarchy;
            this._hierarchy = newHierarchy;
            console.log('✨ Hiérarchie mise à jour:', {
                old: oldHierarchy ? 'présent' : 'null',
                new: newHierarchy ? 'présent' : 'null',
                changed: oldHierarchy !== newHierarchy
            });
        });
    }

    getHierarchy = () => {
        const hierarchy = this._hierarchy;
        console.log('🔍 getHierarchy appelé, retourne:', hierarchy ? 'présent' : 'null');
        return hierarchy;
    }

    // Family Events Methods
    addFamilyEvent = (event) => {
        runInAction(() => {
            this.familyEvents.push(event);
        });
    }

    setFamilyEvents = (events) => {
        runInAction(() => {
            this.familyEvents = [...events];
        });
    }

    getFamilyEvents = () => {
        return this.familyEvents;
    }

    clearFamilyEvents = () => {
        runInAction(() => {
            this.familyEvents = [];
        });
    }

    // File Upload Status Methods
    setFileUploaded = (status) => {
        runInAction(() => {
            this.isFileUploaded = status;
        });
    }

    getFileUploaded = () => {
        return this.isFileUploaded;
    }

    // Nouvelles méthodes pour la gestion des réactions
    addReactionDisposer = (id, trackedFn, effectFn, options = {}) => {
        console.log('📝 Ajout d\'une réaction:', id);
        runInAction(() => {
            // Nettoyer une réaction existante
            if (this.reactionDisposers.has(id)) {
                console.log('🧹 Nettoyage de l\'ancienne réaction:', id);
                this.reactionDisposers.get(id)();
                this.reactionDisposers.delete(id);
            }
    
            // Vérifications
            if (typeof trackedFn !== 'function' || typeof effectFn !== 'function') {
                console.error('❌ trackedFn et effectFn doivent être des fonctions');
                return;
            }
    
            try {
                // Wrapper le trackedFn pour le debugging
                const wrappedTrackedFn = () => {
                    const result = trackedFn();
                    console.log(`🔍 trackedFn ${id} retourne:`, result);
                    return result;
                };
    
                // Wrapper le effectFn pour le debugging
                const wrappedEffectFn = (value) => {
                    console.log(`🎯 effectFn ${id} appelé avec:`, value);
                    return effectFn(value);
                };
    
                // Créer la réaction avec les wrappers
                const disposer = reaction(
                    wrappedTrackedFn,
                    wrappedEffectFn,
                    {
                        ...options,
                        onError: (error) => {
                            console.error(`🚨 Erreur dans la réaction ${id}:`, error);
                            if (options.onError) options.onError(error);
                        }
                    }
                );
    
                this.reactionDisposers.set(id, disposer);
                console.log('✅ Réaction ajoutée avec succès:', id);
            } catch (error) {
                console.error('❌ Erreur lors de la création de la réaction:', error);
            }
        });
    }

    removeReactionDisposer = (id) => {
        runInAction(() => {
            if (this.reactionDisposers.has(id)) {
                this.reactionDisposers.get(id)();
                this.reactionDisposers.delete(id);
            }
        });
    }

    clearReactions = () => {
        runInAction(() => {
            this.reactionDisposers.forEach(disposer => disposer());
            this.reactionDisposers.clear();
        });
    }

    // Reset State
    clearAllState = () => {
        runInAction(() => {
            this.sourceData = [];
            this.individualsCache = new Map();
            this._hierarchy = null;
            this.familyEvents = [];
            this.isFileUploaded = false;
            this.clearReactions(); // Nettoyer aussi les réactions
        });
    }

    // Computed Properties
    get totalIndividuals() {
        return this.individualsCache.size;
    }

    get hasData() {
        return this.sourceData.length > 0;
    }

    get familyTreeData() {
        return this.getFamilyTreeData();
    }

    // Family Tree Data
    getFamilyTreeData = () => {
        return Array.from(this.individualsCache.values()).map(data => ({
            id: data.id,
            fid: data.fatherId,
            mid: data.motherId,
            pids: data.spouseIds,
            name: `${data.name} ${data.surname}`,
            birthDate: data.birthDate,
            deathDate: data.deathYear,
            gender: data.gender,
            display: true
        }));
    }
}

const gedcomDataStore = new GedcomDataStore();
export default gedcomDataStore;

================
File: assets/scripts/geneafan/gedcom/gedcomFileHandler.js
================
import { Modal } from 'bootstrap';
import _ from 'lodash';
import Uppy from '@uppy/core';
import AwsS3 from '@uppy/aws-s3';
import configStore from '../tabs/fanChart/fanConfigStore.js';
import rootPersonStore from '../common/stores/rootPersonStore.js';
import authStore from '../common/stores/authStore.js';
import gedcomDataStore from './gedcomDataStore.js';
import familyTownsStore from './familyTownsStore.js';
import { FanChartManager } from '../tabs/fanChart/fanChartManager.js';
import {
    clearAllStates,
} from "../common/stores/state.js";
import {
    updateFamilyTownsViaProxy,
    updateIndividualTownsFromFamilyTowns,
} from "../utils/utils.js";
import { toJson, getAllPlaces, getIndividualsList } from "./parse.js";
import { setupPersonLinkEventListener } from "../listeners/eventListeners.js";
import { googleMapsStore } from '../tabs/familyMap/googleMapsStore.js';

/* Code to manage the upload of GEDCOM files to Cloudflare R2*/
let isLoadingFile = false;
let gedcomFileName = "";

let currentModal = null;

const MODAL_STEPS = {
    SAVE_REQUEST: {
        title: 'Enregistrer le fichier',
        content: `
            <div class="modal-body">
                Voulez-vous enregistrer votre fichier pour un usage ultérieur ?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-action="no">Non</button>
                <button type="button" class="btn btn-primary" data-action="yes">Oui</button>
            </div>
        `
    },
    FAMILY_NAME: {
        title: 'Nom de la famille',
        content: `
            <form id="familyNameForm">
                <div class="modal-body">
                    À quelle famille correspond votre fichier Gedcom ?
                    <input type="text" class="form-control" id="familyNameInput" required>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Enregistrer</button>
                </div>
            </form>
        `
    },
    UPLOAD_SUCCESS: {
        title: 'Téléchargement terminé',
        content: `
            <div class="modal-body">
                Votre fichier a été enregistré avec succès !
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-action="close">Fermer</button>
            </div>
        `
    },
    UPLOADING: {
        title: 'Téléchargement en cours',
        content: `
            <div class="modal-body">
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                    <p class="mt-2">Téléchargement de votre fichier en cours...</p>
                </div>
            </div>
        `
    }
};

function showModal(step, handlers = {}) {
    if (!currentModal) {
        const modalContent = document.createElement('div');
        modalContent.innerHTML = `
        <div class="modal fade" id="gedcomModal" tabindex="-1" aria-labelledby="gedcomModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                    </div>
                    <div id="modalStepContent"></div>
                </div>
            </div>
        </div>
        `;
        document.body.appendChild(modalContent);

        const modalElement = document.getElementById('gedcomModal');
        currentModal = new Modal(modalElement, {
            backdrop: 'static',
            keyboard: false
        });
    }

    const modalElement = document.getElementById('gedcomModal');
    const stepConfig = MODAL_STEPS[step];

    modalElement.querySelector('.modal-title').textContent = stepConfig.title;
    modalElement.querySelector('#modalStepContent').innerHTML = stepConfig.content;

    // Détacher les anciens gestionnaires d'événements
    const oldContent = modalElement.querySelector('#modalStepContent');
    const newContent = oldContent.cloneNode(true);
    oldContent.parentNode.replaceChild(newContent, oldContent);

    // Attach handlers
    Object.entries(handlers).forEach(([selector, handler]) => {
        const element = modalElement.querySelector(selector);
        if (element) {
            if (selector === 'form') {
                element.onsubmit = (e) => {
                    e.preventDefault();
                    handler(e);
                };
            } else {
                element.onclick = handler;
            }
        }
    });

    if (!currentModal.isShown) {
        currentModal.show();
    }
}

function closeModal() {
    if (currentModal) {
        currentModal.hide();
        document.getElementById('gedcomModal').remove();
        currentModal = null;
    }
}

export function loadGedcomFile(input) {
    console.log("Chargement du fichier:", input);
    if (isLoadingFile) {
        console.log("Un chargement de fichier est déjà en cours.");
        return;
    }
    isLoadingFile = true;

    if (typeof input === 'string') {
        // Load remote file
        const xhr = new XMLHttpRequest();
        xhr.open("GET", input, true);
        xhr.responseType = "arraybuffer";

        xhr.onload = function (e) {
            isLoadingFile = false;
            if (this.status === 200) {
                const data = xhr.response;

                // Extract the file name from the URL
                gedcomFileName = input.split("/").pop();
                configStore.setGedcomFileName(gedcomFileName); // Update the store

                onFileChange(data);
            } else {
                console.error("Erreur lors du chargement du fichier :", this.status);
                window.alert(__("geneafan.cannot_read_this_file"));
            }
        };

        xhr.onerror = function (e) {
            isLoadingFile = false;
            console.error("Erreur réseau lors du chargement du fichier.");
            window.alert(__("geneafan.cannot_read_this_file"));
        };

        xhr.send();
    } else {
        // Load local file
        const file = input[0];
        console.log("Fichier local:", file);
        gedcomFileName = file.name;
        configStore.setGedcomFileName(gedcomFileName);

        // Show modal to ask if the user wants to save the file
        showSaveFileModal(file);
    }
}

function showSaveFileModal(file) {
    showModal('SAVE_REQUEST', {
        '[data-action="no"]': () => {
            closeModal();
            readAndProcessGedcomFile(file);
        },
        '[data-action="yes"]': () => {
            authStore.accessFeature(
                (userInfo) => {
                    // Ne pas fermer la modale, juste changer son contenu
                    showFamilyNameModal(file, userInfo);
                },
                () => {
                    window.alert('Vous devez être authentifié pour enregistrer le fichier.');
                    closeModal();
                    readAndProcessGedcomFile(file);
                }
            );
        }
    });
}

function showFamilyNameModal(file, userInfo) {
    showModal('FAMILY_NAME', {
        'form': (event) => {
            const familyName = document.getElementById('familyNameInput').value.trim();
            if (familyName) {
                // Afficher l'état "uploading" avant de commencer l'upload
                showModal('UPLOADING');
                saveGedcomFile(file, familyName, userInfo);
            } else {
                alert('Veuillez entrer le nom de la famille.');
            }
        }
    });
}

// Function to save the Gedcom file in the R2 gedcom-files bucket
async function saveGedcomFile(file, familyName, userInfo) {
    const clerkId = userInfo.id;
    if (!clerkId) {
        alert('Impossible de récupérer votre identifiant utilisateur.');
        closeModal();
        readAndProcessGedcomFile(file);
        return;
    }

    const newFileName = `${clerkId}_fam_${familyName}.ged`;
    console.log('New file name:', newFileName);

    try {
        // Initialize Uppy for file upload with a signed URL
        const uppy = new Uppy({
            autoProceed: true,
        });

        uppy.use(AwsS3, {
            async getUploadParameters(file) {
                // Fetch signed URL from Vercel API
                const response = await fetch('https://generate-signed-url.vercel.app/api/generate-signed-url', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        filename: newFileName,
                        contentType: file.type,
                        operation: 'upload', // Specify the operation
                    }),
                });

                if (!response.ok) {
                    throw new Error('Error fetching the signed URL.');
                }

                const data = await response.json();
                console.log('Signed URL received:', data.url);

                // Return signed URL for upload
                return {
                    method: 'PUT',
                    url: data.url, // Signed URL obtained from Vercel
                    headers: {
                        'Content-Type': file.type,
                    },
                };
            },
        });

        // Add file to Uppy
        uppy.addFile({
            name: newFileName,
            type: file.type,
            data: file, // Blob/File to upload
        });

        // Wait for the upload to complete
        const uploadResult = await uppy.upload();
        console.log('Upload completed:', uploadResult);

        if (uploadResult.failed.length === 0) {
            console.log('File successfully uploaded.');

            // Prepare the body for the fetch request
            const body = JSON.stringify({
                filename: newFileName,
                userId: clerkId
            });

            // Log the body before making the fetch request
            // console.log('Worker :', body);

            // After upload, store the file metadata in the Cloudflare Worker KV
            const workerResponse = await fetch('https://user-file-access.genealogie.app/upload', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: body
            });

            if (!workerResponse.ok) {
                throw new Error('Error saving file metadata to Worker KV.');
            }

            console.log('File metadata saved in Worker KV.');
            showModal('UPLOAD_SUCCESS', {
                '[data-action="close"]': () => {
                    closeModal();
                    readAndProcessGedcomFile(file);
                }
            });

        } else {
            console.error('File upload failed:', uploadResult.failed);
            alert('Error during file upload.');
            closeModal();
        }

    } catch (error) {
        console.error('Error during file saving:', error);
        alert('Error during file upload.');
        closeModal();
    }
}

// Function to fetch the list of Gedcom files for the current user
export async function fetchUserGedcomFiles(userId) {
    console.log('Fetching user Gedcom files for user:', userId);
    try {
        const response = await fetch('https://user-file-access.genealogie.app/list-files', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId })
        });

        if (!response.ok) {
            if (response.status === 404) {
                return [];
            } else {
                throw new Error('Erreur lors de la récupération des fichiers.');
            }
        }

        const data = await response.json();
        const files = data.files.map(file => ({
            id: file.id,
            name: file.name,
            signedUrl: file.signedUrl,
            status: file.status // 'owned' ou 'authorized'
        }));
        return files;
    } catch (error) {
        console.error('Erreur lors de la récupération des fichiers GEDCOM :', error);
        return [];
    }
}

function readAndProcessGedcomFile(file) {
    console.log('Reading and processing file:', file);
    isLoadingFile = true;
    const reader = new FileReader();

    reader.addEventListener("loadend", function () {
        isLoadingFile = false;
        const data = reader.result;

        // Continuer avec la logique de l'application
        onFileChange(data);
    });

    reader.readAsArrayBuffer(file);
}

function findYoungestIndividual(individuals) {
    const individualsWithBirthDates = individuals.map((individual) => {
        const birthDate = individual.birthDate;
        let date;
        if (birthDate.includes("/")) {
            const [day, month, year] = birthDate.split("/").reverse();
            date = new Date(year, month - 1, day || 1);
        } else {
            date = new Date(birthDate, 0, 1);
        }

        return {
            id: individual.id,
            birthDate: date,
        };
    });

    return _.maxBy(individualsWithBirthDates, "birthDate");
}

async function resetUIForNewGedcom() {
    console.log("Resetting UI for new GEDCOM file.");
    const parametersElements = document.querySelectorAll(".parameter");
    const individualSelectElement = document.getElementById("individual-select");
    const downloadMenuElement = document.getElementById("download-menu");
    const fanParametersDisplayElement = document.getElementById("fanParametersDisplay");
    const treeParametersDisplayElement = document.getElementById("treeParametersDisplay");
    const fullscreenButtonElement = document.getElementById("fullscreenButton");

    // Remove event listeners
    [...parametersElements, individualSelectElement].forEach((element) => {
        if (element) {
            element.removeEventListener("change", configStore.handleSettingChange);
        }
    });

    // Reset select elements
    if (individualSelectElement) {
        individualSelectElement.innerHTML = "";
    }

    let tomSelect = rootPersonStore.tomSelect;
    if (tomSelect) {
        tomSelect.clearOptions();
        tomSelect.clear();
    }

    // Reset fan chart
    await FanChartManager.reset();

    // Reset stores
    familyTownsStore.setTownsData({});
    googleMapsStore.clearMap();

    // Disable UI elements
    [
        downloadMenuElement,
        fanParametersDisplayElement,
        treeParametersDisplayElement,
        fullscreenButtonElement,
    ].forEach((el) => {
        if (el) el.disabled = true;
    });

    // Re-add event listeners
    [...parametersElements, individualSelectElement].forEach((element) => {
        if (element) {
            element.addEventListener("change", configStore.handleSettingChange);
        }
    });

    rootPersonStore.resetHistory();
}

async function onFileChange(data) {
    handleTabsAndOverlay(true);
    clearAllStates();
    gedcomDataStore.clearAllState();

    // Toujours réinitialiser l'UI avant de charger un nouveau fichier
    await resetUIForNewGedcom();
    gedcomDataStore.setFileUploaded(true);

    try {
        familyTownsStore.setTownsData({});

        let json = toJson(data);
        let result = await getAllPlaces(json);
        gedcomDataStore.setSourceData(result.json);

        try {
            await updateFamilyTownsViaProxy();
            updateIndividualTownsFromFamilyTowns(gedcomDataStore.getIndividualsCache());
            gedcomDataStore.setIndividualsCache(gedcomDataStore.getIndividualsCache());
        } catch (error) {
            console.error("Error updating geolocation:", error);
        }

        // Retirer la partie d'ajout des marqueurs car nous n'utilisons plus que la vue temporelle
        // qui est gérée par googleMapsStore.processHierarchy()

        const selectElement = document.getElementById("individual-select");
        selectElement.innerHTML = "";
        const placeholderOption = new Option("", "", true, true);
        placeholderOption.disabled = true;
        selectElement.appendChild(placeholderOption);

        let tomSelect = rootPersonStore.tomSelect;
        if (!tomSelect) {
            rootPersonStore.initializeTomSelect();
            tomSelect = rootPersonStore.tomSelect;
        }

        tomSelect.clearOptions();

        result = getIndividualsList(result.json);
        let individuals = result.individualsList;
        individuals.forEach((individual) => {
            tomSelect.addOption({
                value: individual.id,
                text: `${individual.surname} ${individual.name} ${individual.id} ${individual.birthYear ? individual.birthYear : "?"}-${individual.deathYear ? individual.deathYear : ""}`
            });
        });

        let rootId;
        const gedcomFileName = configStore.getConfig.gedcomFileName;
        rootId = (gedcomFileName === "demo.ged") ? "@I111@" : findYoungestIndividual(individuals)?.id;

        // Mise à jour du root et du nom
        const rootPerson = individuals.find((individual) => individual.id === rootId);
        if (rootPerson) {
            rootPersonStore.setRoot(rootId, { skipDraw: true });
            rootPersonStore.setRootPersonName({
                name: rootPerson.name,
                surname: rootPerson.surname,
            });
            rootPersonStore.setTomSelectValue(rootId);
        }

        [
            ...document.querySelectorAll(".parameter"),
            document.getElementById("individual-select"),
            document.getElementById("download-menu"),
            document.getElementById("fanParametersDisplay"),
            document.getElementById("treeParametersDisplay"),
            document.getElementById("fullscreenButton"),
        ].forEach((el) => {
            el.disabled = false;
        });

    } catch (error) {
        console.error("General Error:", error);
    } finally {
        handleTabsAndOverlay(false);
        setupPersonLinkEventListener();
    }
}

function handleTabsAndOverlay(shouldShowLoading) {
    const tabsToDisable = ["tab2", "tab3", "tab4", "tab5", "tab6"];
    tabsToDisable.forEach(tabId => {
        const tabLink = document.querySelector(`a[href="#${tabId}"]`);
        if (tabLink) {
            tabLink.classList.toggle('disabled', shouldShowLoading);
            tabLink.setAttribute('aria-disabled', shouldShowLoading ? 'true' : 'false');
            tabLink.setAttribute('tabindex', shouldShowLoading ? '-1' : '0');
        }
    });

    if (shouldShowLoading) {
        document.getElementById('overlay').classList.remove('overlay-hidden');
        document.querySelector('a[href="#tab1"]').click(); // Force l'affichage de tab1
        document.getElementById("loading").style.display = "block";
    } else {
        document.getElementById("loading").style.display = "none";
        document.getElementById("overlay").classList.add("overlay-hidden");
    }
}

export { onFileChange }; // Add this export

================
File: assets/scripts/geneafan/gedcom/gedcomModalUtils.js
================
import { Modal, Tooltip, Collapse } from 'bootstrap';
import ShareFormStore from './shareFormStore';
import { reaction } from '../common/stores/mobx-config';
import { loadGedcomFile } from './gedcomFileHandler';

class GedcomModalManager {
  // Class properties
  currentModal = null;
  activeShareForms = new Set();

  // Private helper methods
  createElement = (tag, options = {}) => {
    const element = document.createElement(tag);
    Object.entries(options).forEach(([key, value]) => {
      if (key === 'classes') {
        element.classList.add(...value);
      } else if (key === 'attributes') {
        Object.entries(value).forEach(([attr, val]) => element.setAttribute(attr, val));
      } else {
        element[key] = value;
      }
    });
    return element;
  }

  sanitizeFileId = (fileId) => {
    if (fileId == null) {
      throw new TypeError('fileId cannot be null or undefined');
    }
    return fileId.replace(/\s+/g, '_');
  }

  // Public methods
  showModal = (files, userInfo) => {
    this.cleanupExistingModal();
    
    const modalDiv = this.createGedcomModal(files);
    document.body.appendChild(modalDiv);
    
    this.initializeTooltips(modalDiv);
    
    const modalElement = document.getElementById('gedcomFilesModal');
    this.currentModal = new Modal(modalElement);
    this.setupEventDelegation(modalElement, userInfo);
    this.currentModal.show();
  }

  cleanupExistingModal = () => {
    const existingModal = document.getElementById('gedcomFilesModal');
    if (existingModal) {
      const existingModalInstance = Modal.getInstance(existingModal);
      if (existingModalInstance) {
        existingModalInstance.dispose();
      }
      existingModal.remove();
    }
  }

  // Modal creation methods
  createGedcomModal = (files) => {
    const modalDiv = this.createElement('div', {
      classes: ['modal', 'fade'],
      attributes: {
        id: 'gedcomFilesModal',
        tabindex: '-1',
        'aria-labelledby': 'gedcomFilesModalLabel',
        'aria-hidden': 'true'
      }
    });

    const modalDialog = this.createElement('div', { classes: ['modal-dialog', 'modal-lg'] });
    const modalContent = this.createElement('div', { classes: ['modal-content'] });
    
    const modalHeader = this.createModalHeader();
    const modalBody = this.createModalBody(files);
    
    modalContent.append(modalHeader, modalBody);
    modalDialog.appendChild(modalContent);
    modalDiv.appendChild(modalDialog);

    return modalDiv;
  }

  createModalHeader = () => {
    const modalHeader = this.createElement('div', { classes: ['modal-header'] });
    
    const modalTitle = this.createElement('h5', {
      classes: ['modal-title'],
      attributes: { id: 'gedcomFilesModalLabel' },
      textContent: 'My GEDCOM Files'
    });

    const closeButton = this.createElement('button', {
      classes: ['btn-close'],
      attributes: {
        type: 'button',
        'data-bs-dismiss': 'modal',
        'aria-label': 'Close'
      }
    });

    modalHeader.append(modalTitle, closeButton);
    return modalHeader;
  }

  createModalBody = (files) => {
    const modalBody = this.createElement('div', { classes: ['modal-body', 'position-relative'] });
    
    const loadingSpinner = this.createLoadingSpinner();
    modalBody.appendChild(loadingSpinner);

    const modalContentContainer = this.createElement('div', { attributes: { id: 'modalContent' } });
    const table = this.createFilesTable(files);
    modalContentContainer.appendChild(table);
    modalBody.appendChild(modalContentContainer);

    return modalBody;
  }

  createLoadingSpinner = () => {
    const loadingSpinner = this.createElement('div', {
      classes: ['position-absolute', 'top-50', 'start-50', 'translate-middle'],
      attributes: { 
        id: 'loadingSpinner', 
        style: 'display: none; z-index: 1051;' 
      }
    });

    const spinner = this.createElement('div', { 
      classes: ['spinner-border', 'text-primary'], 
      attributes: { role: 'status' } 
    });
    
    const spinnerText = this.createElement('span', { 
      classes: ['visually-hidden'], 
      textContent: 'Loading...' 
    });

    spinner.appendChild(spinnerText);
    loadingSpinner.appendChild(spinner);
    return loadingSpinner;
  }

  createFilesTable = (files) => {
    const table = this.createElement('table', { 
      classes: ['table'], 
      attributes: { id: 'gedcomFilesTable' } 
    });

    const thead = this.createElement('thead');
    const headerRow = this.createElement('tr');

    ['File Name', 'Status', 'Actions'].forEach(headerText => {
      const th = this.createElement('th', { 
        attributes: { scope: 'col' }, 
        textContent: headerText 
      });
      if (headerText === 'Actions') th.classList.add('text-end');
      headerRow.appendChild(th);
    });

    thead.appendChild(headerRow);
    table.appendChild(thead);

    const tbody = this.createTableBody(files);
    table.appendChild(tbody);

    return table;
  }

  createTableBody = (files) => {
    const tbody = this.createElement('tbody');

    files.forEach(file => {
      if (!file.id) {
        console.error('Error: File ID is null or undefined for file:', file);
        return;
      }

      const row = this.createFileRow(file);
      tbody.appendChild(row);
    });

    return tbody;
  }

  createFileRow = ({ id, name, status, signedUrl }) => {
    const fileRow = this.createElement('tr', { attributes: { 'data-file-id': id } });

    const tdName = this.createElement('td', { textContent: name });
    const tdStatus = this.createElement('td', { textContent: status === 'owned' ? 'Owner' : 'Authorized' });
    const tdActions = this.createElement('td', { classes: ['text-end'] });

    const actions = this.createActionButtons(id, status, signedUrl);
    actions.forEach(action => tdActions.appendChild(action));

    fileRow.append(tdName, tdStatus, tdActions);
    return fileRow;
  }

  createActionButtons = (id, status, signedUrl) => {
    const actions = [
      { 
        action: 'download', 
        icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" style="width: 1.5em; height: 1.5em; fill: currentColor;">
                <path d="M144 160A80 80 0 1 0 144 0a80 80 0 1 0 0 160zm368 0A80 80 0 1 0 512 0a80 80 0 1 0 0 160zM0 298.7C0 310.4 9.6 320 21.3 320l213.3 0c.2 0 .4 0 .7 0c-26.6-23.5-43.3-57.8-43.3-96c0-7.6 .7-15 1.9-22.3c-13.6-6.3-28.7-9.7-44.6-9.7l-42.7 0C47.8 192 0 239.8 0 298.7zM320 320c24 0 45.9-8.8 62.7-23.3c2.5-3.7 5.2-7.3 8-10.7c2.7-3.3 5.7-6.1 9-8.3C410 262.3 416 243.9 416 224c0-53-43-96-96-96s-96 43-96 96s43 96 96 96zm65.4 60.2c-10.3-5.9-18.1-16.2-20.8-28.2l-103.2 0C187.7 352 128 411.7 128 485.3c0 14.7 11.9 26.7 26.7 26.7l300.6 0c-2.1-5.2-3.2-10.9-3.2-16.4l0-3c-1.3-.7-2.7-1.5-4-2.3l-2.6 1.5c-16.8 9.7-40.5 8-54.7-9.7c-4.5-5.6-8.6-11.5-12.4-17.6l-.1-.2-.1-.2-2.4-4.1-.1-.2-.1-.2c-3.4-6.2-6.4-12.6-9-19.3c-8.2-21.2 2.2-42.6 19-52.3l2.7-1.5c0-.8 0-1.5 0-2.3s0-1.5 0-2.3l-2.7-1.5z"/>
              </svg>`, 
        title: 'Download', 
        link: signedUrl 
      }
    ];

    if (status === 'owned') {
      actions.push(
        { 
          action: 'share', 
          icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" style="width: 1.5em; height: 1.5em; fill: currentColor;">
                  <path d="M352 224c53 0 96-43 96-96s-43-96-96-96s-96 43-96 96c0 4 .2 8 .7 11.9l-94.1 47C145.4 170.2 121.9 160 96 160c-53 0-96 43-96 96s43 96 96 96c25.9 0 49.4-10.2 66.6-26.9l94.1 47c-.5 3.9-.7 7.8-.7 11.9c0 53 43 96 96 96s96-43 96-96s-43-96-96-96c-25.9 0-49.4 10.2-66.6 26.9l-94.1-47c.5-3.9 .7-7.8 .7-11.9s-.2-8-.7-11.9l94.1-47C302.6 213.8 326.1 224 352 224z"/>
                </svg>`, 
          title: 'Share' 
        },
        { 
          action: 'delete', 
          icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" style="width: 1.5em; height: 1.5em; fill: currentColor;">
                  <path d="M135.2 17.7C140.6 6.8 151.7 0 163.8 0L284.2 0c12.1 0 23.2 6.8 28.6 17.7L320 32l96 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L32 96C14.3 96 0 81.7 0 64S14.3 32 32 32l96 0 7.2-14.3zM32 128l384 0 0 320c0 35.3-28.7 64-64 64L96 512c-35.3 0-64-28.7-64-64l0-320zm96 64c-8.8 0-16 7.2-16 16l0 224c0 8.8 7.2 16 16 16s16-7.2 16-16l0-224c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16l0 224c0 8.8 7.2 16 16 16s16-7.2 16-16l0-224c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16l0 224c0 8.8 7.2 16 16 16s16-7.2 16-16l0-224c0-8.8-7.2-16-16-16z"/>
                </svg>`, 
          title: 'Delete' 
        }
      );
    }

    return actions.map(({ action, icon, title, link }) => {
      return this.createElement('a', {
        classes: ['text-decoration-none', 'me-3', 'action-icon'],
        attributes: {
          href: '#',
          'data-action': action,
          'data-file-id': id,
          'data-bs-toggle': 'tooltip',
          title: title,
          ...(link ? { 'data-link': link } : {})
        },
        innerHTML: icon
      });
    });
  }

  // Event handling
  initializeTooltips = (modalDiv) => {
    const tooltipTriggerList = modalDiv.querySelectorAll('[data-bs-toggle="tooltip"]');
    tooltipTriggerList.forEach(tooltipTriggerEl => {
      new Tooltip(tooltipTriggerEl);
    });
  }

  setupEventDelegation = (modalElement, userInfo) => {
    modalElement.addEventListener('click', async (e) => {
      const actionIcon = e.target.closest('.action-icon');
      if (!actionIcon) return;

      e.preventDefault();
      
      const action = actionIcon.getAttribute('data-action');
      const fileId = actionIcon.getAttribute('data-file-id');
      const dataLink = actionIcon.getAttribute('data-link');

      try {
        await this.handleAction(action, fileId, dataLink, userInfo);
      } catch (error) {
        console.error(`Error handling action ${action}:`, error);
        this.showErrorMessage(fileId, error.message);
      }
    });
  }

  handleAction = async (action, fileId, dataLink, userInfo) => {
    switch (action) {
      case 'download':
        await this.handleDownload(dataLink);
        break;
      case 'share':
        await this.handleShare(fileId, userInfo);
        break;
      case 'delete':
        await this.handleDelete(fileId);
        break;
      default:
        console.warn(`Unknown action: ${action}`);
    }
  }

  handleDownload = async (dataLink) => {
    try {
      this.showGlobalSpinner();
      await loadGedcomFile(dataLink);
    } finally {
      this.hideGlobalSpinner();
    }
  }

  handleShare = async (fileId, userInfo) => {
    const sanitizedFileId = this.sanitizeFileId(fileId);
    await this.toggleShareForm(fileId);
    await this.initializeShareForm(sanitizedFileId, userInfo);
  }

  handleDelete = async (fileId) => {
    // Implement file deletion logic
    console.log('Delete functionality to be implemented');
  }

  // Share form handling
  toggleShareForm = async (fileId) => {
    const sanitizedFileId = this.sanitizeFileId(fileId);
    
    await this.lazyLoadShareForm(fileId);

    const shareFormRow = document.getElementById(`shareFormRow-${sanitizedFileId}`);
    const collapseElement = document.getElementById(`collapseShare-${sanitizedFileId}`);

    if (shareFormRow && collapseElement) {
      const collapseInstance = new Collapse(collapseElement, {
        toggle: true
      });
      
      shareFormRow.style.display = 
        shareFormRow.style.display === 'none' ? '' : 'none';
      
      return sanitizedFileId;
    }

    throw new Error(`Share form elements not found for file ID: ${fileId}`);
  }

  lazyLoadShareForm = async (fileId) => {
    const sanitizedFileId = this.sanitizeFileId(fileId);
    const existingShareFormRow = document.getElementById(`shareFormRow-${sanitizedFileId}`);
    
    if (existingShareFormRow) {
      console.log(`Share form for file ID ${fileId} already exists.`);
      return;
    }

    const tbody = document.querySelector('#gedcomFilesTable tbody');
    if (!tbody) return;

    const fileRow = document.querySelector(`#gedcomFilesTable tr[data-file-id="${fileId}"]`);
    if (!fileRow) {
      console.error(`File row not found for file ID: ${fileId}`);
      return;
    }

    const shareFormRow = this.createShareFormRow(sanitizedFileId);
    tbody.insertBefore(shareFormRow, fileRow.nextSibling);
  }

  createShareFormRow = (sanitizedFileId) => {
    const shareFormRow = this.createElement('tr', {
      classes: ['share-form-collapse'],
      attributes: { 
        id: `shareFormRow-${sanitizedFileId}`, 
        style: 'display: none;' 
      }
    });

    const shareFormTd = this.createElement('td', { 
      attributes: { colspan: '3' } 
    });

    const collapseDiv = this.createElement('div', { 
      classes: ['collapse'], 
      attributes: { id: `collapseShare-${sanitizedFileId}` } 
    });

    const cardDiv = this.createElement('div', { 
      classes: ['card', 'card-body'] 
    });

    const shareForm = this.createShareForm(sanitizedFileId);
    
    cardDiv.appendChild(shareForm);
    collapseDiv.appendChild(cardDiv);
    shareFormTd.appendChild(collapseDiv);
    shareFormRow.appendChild(shareFormTd);

    return shareFormRow;
  }

  createShareForm = (sanitizedFileId) => {
    const shareForm = this.createElement('form', { 
      attributes: { id: `shareForm-${sanitizedFileId}` } 
    });

    const formGroup = this.createElement('div', { 
      classes: ['mb-3'] 
    });

    // Label
    const label = this.createElement('label', {
      classes: ['form-label'],
      textContent: 'Enter email addresses to share with:'
    });

    // Email table
    const emailTable = this.createElement('table', { 
      classes: ['table', 'table-bordered'],
      attributes: { id: `emailTable-${sanitizedFileId}` }
    });
    const emailTbody = this.createElement('tbody');

    // Create 10 email input rows
    for (let i = 0; i < 10; i++) {
      const tr = this.createElement('tr');
      const td = this.createElement('td');
      
      const inputContainer = this.createElement('div', {
        classes: ['form-group']
      });

      const input = this.createElement('input', {
        classes: ['form-control', 'email-input'],
        attributes: {
          type: 'email',
          id: `email-${sanitizedFileId}-${i}`,
          name: 'emails',
          placeholder: 'e.g., user@example.com'
        }
      });

      const invalidFeedback = this.createElement('div', {
        classes: ['invalid-feedback'],
        textContent: 'Please enter a valid email address.'
      });

      inputContainer.append(input, invalidFeedback);
      td.appendChild(inputContainer);
      tr.appendChild(td);
      emailTbody.appendChild(tr);
    }

    emailTable.appendChild(emailTbody);

    // Submit button with spinner
    const submitButton = this.createElement('button', {
      classes: ['btn', 'btn-primary'],
      attributes: {
        type: 'submit',
        id: `shareSubmit-${sanitizedFileId}`,
        disabled: 'true'
      },
      textContent: 'Share'
    });

    // Spinner for the submit button
    const spinner = this.createElement('span', {
      classes: ['spinner-border', 'spinner-border-sm', 'ms-2'],
      attributes: {
        role: 'status',
        'aria-hidden': 'true',
        id: `shareButtonSpinner-${sanitizedFileId}`,
        style: 'display: none;'
      }
    });

    submitButton.appendChild(spinner);

    // Error container
    const errorContainer = this.createElement('div', {
      classes: ['error-container']
    });

    // Add no-valid-email error message container
    const noValidEmailError = this.createElement('div', {
      classes: ['no-valid-email-error', 'text-danger'],
      attributes: { style: 'display: none;' },
      textContent: 'Please enter at least one valid email address.'
    });

    errorContainer.appendChild(noValidEmailError);

    // Assemble the form
    formGroup.append(label, emailTable, submitButton, errorContainer);
    shareForm.appendChild(formGroup);

    return shareForm;
  }

  initializeShareForm = async (sanitizedFileId, userInfo) => {
    const shareForm = document.getElementById(`shareForm-${sanitizedFileId}`);
    if (!shareForm || shareForm.dataset.initialized) return;

    const shareFormStore = new ShareFormStore();
    this.activeShareForms.add(shareFormStore);

    this.setupEmailValidation(shareForm, shareFormStore);
    this.setupFormSubmission(shareForm, sanitizedFileId, shareFormStore, userInfo);

    shareForm.dataset.initialized = 'true';
  }

  setupEmailValidation = (shareForm, shareFormStore) => {
    const emailInputs = shareForm.querySelectorAll('.email-input');
    emailInputs.forEach((input, index) => {
      input.addEventListener('input', (event) => {
        const email = event.target.value.trim();
        const isValid = shareFormStore.isValidEmail(email) || email === '';
        
        input.classList.toggle('is-invalid', !isValid);
        input.classList.toggle('is-valid', isValid && email !== '');
        
        shareFormStore.setEmail(index, email);
      });
    });

    reaction(
      () => shareFormStore.isValid,
      (isValid) => {
        const submitButton = document.getElementById(`shareSubmit-${sanitizedFileId}`);
        const errorMessage = shareForm.querySelector('.no-valid-email-error');
        
        submitButton.disabled = !isValid;
        if (errorMessage) {
          errorMessage.style.display = isValid ? 'none' : 'block';
        }
      },
      { fireImmediately: true }
    );
  }

  setupFormSubmission = (shareForm, sanitizedFileId, shareFormStore, userInfo) => {
    shareForm.addEventListener('submit', async (event) => {
      event.preventDefault();

      const validEmails = shareFormStore.emails.filter(email => 
        shareFormStore.isValidEmail(email.trim())
      );

      if (validEmails.length === 0) return;

      shareForm.style.display = 'none';
      await this.showConfirmationMessage(sanitizedFileId, validEmails, shareForm, userInfo);
    });
  }

  showConfirmationMessage = async (sanitizedFileId, emails, shareForm, userInfo) => {
    const confirmationContainer = this.createElement('div', {
      attributes: { 
        id: `confirmationContainer-${sanitizedFileId}`,
        class: 'confirmation-container'
      }
    });

    confirmationContainer.innerHTML = `
      <p>Confirmez-vous le partage du fichier avec les adresses suivantes :</p>
      <ul>${emails.map(email => `<li>${email}</li>`).join('')}</ul>
      <button class="btn btn-success me-2">Oui</button>
      <button class="btn btn-secondary">Non</button>
    `;

    shareForm.parentNode.appendChild(confirmationContainer);

    confirmationContainer.addEventListener('click', (event) => {
      if (event.target.matches('.btn-success')) {
        this.proceedWithSharing(sanitizedFileId, emails, userInfo);
        confirmationContainer.remove();
      } else if (event.target.matches('.btn-secondary')) {
        confirmationContainer.remove();
        shareForm.style.display = 'block';
      }
    });
  }

  proceedWithSharing = async (sanitizedFileId, emails, userInfo) => {
    const workerEndpoint = "https://file-sharing-orchestrator.genealogie.app";
    this.showButtonSpinner(sanitizedFileId);

    try {
      const response = await fetch(workerEndpoint, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          fileId: sanitizedFileId,
          emails,
          ownerUserId: userInfo.id,
        })
      });

      if (!response.ok) {
        throw new Error(`Server error: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      this.showSuccessMessage(sanitizedFileId, result);
    } catch (error) {
      this.showErrorMessage(sanitizedFileId, error.message);
    } finally {
      this.hideButtonSpinner(sanitizedFileId);
    }
  }

  // UI feedback methods
  showSuccessMessage = (sanitizedFileId, result) => {
    const message = this.createElement('div', {
      classes: ['alert', 'alert-success', 'mt-3'],
      innerHTML: `Le fichier a été partagé avec succès avec les adresses suivantes :
        <ul>${result.results?.map(item => `<li>${item.email}: ${item.result}</li>`).join('') || 
        '<li>Aucune adresse trouvée.</li>'}</ul>`
    });

    const container = document.getElementById(`shareForm-${sanitizedFileId}`).parentNode;
    container.appendChild(message);
  }

  showErrorMessage = (sanitizedFileId, errorMessage) => {
    const container = this.createElement('div', {
      classes: ['alert', 'alert-danger', 'mt-3'],
      textContent: `Une erreur s'est produite : ${errorMessage}`
    });

    const formContainer = document.getElementById(`shareForm-${sanitizedFileId}`).parentNode;
    formContainer.appendChild(container);
  }

  showGlobalSpinner = () => {
    const spinner = document.getElementById('loadingSpinner');
    const content = document.getElementById('modalContent');
    if (spinner && content) {
      spinner.style.display = 'block';
      content.style.opacity = '0.5';
    }
  }

  hideGlobalSpinner = () => {
    const spinner = document.getElementById('loadingSpinner');
    const content = document.getElementById('modalContent');
    if (spinner && content) {
      spinner.style.display = 'none';
      content.style.opacity = '1';
    }
  }

  showButtonSpinner = (sanitizedFileId) => {
    const spinner = document.getElementById(`shareButtonSpinner-${sanitizedFileId}`);
    if (spinner) {
      spinner.style.display = 'inline-block';
    }
  }

  hideButtonSpinner = (sanitizedFileId) => {
    const spinner = document.getElementById(`shareButtonSpinner-${sanitizedFileId}`);
    if (spinner) {
      spinner.style.display = 'none';
    }
  }

  cleanup = () => {
    this.activeShareForms.clear();
    if (this.currentModal) {
      this.currentModal.dispose();
      this.currentModal = null;
    }
  }
}

// Create and export singleton instance
const gedcomModalManager = new GedcomModalManager();
export default gedcomModalManager;

================
File: assets/scripts/geneafan/gedcom/parse.js
================
// External libraries
import _ from "lodash";
import moment from "moment";
import parseGedcom from "parse-gedcom";
import jsonpointer from 'jsonpointer';

// Utility functions
import {
    normalizeGeoString,
    formatTownName
} from "../utils/geo.js";

import {
    padTwoDigits
} from "../utils/utils.js";

import {
    extractYear,
    calculateAge,
    prefixedDate
} from "../utils/dates.js";

import { statisticsService } from '../tabs/statistics/services/statisticsService.js';

// Stores
import gedcomDataStore from './gedcomDataStore.js';
import configStore from '../tabs/fanChart/fanConfigStore.js';
import timelineEventsStore from '../tabs/timeline/timelineEventsStore.js';
import familyTreeDataStore from '../tabs/familyTree/familyTreeDataStore.js';
import familyTownsStore from './familyTownsStore.js';
import statisticsStore from '../tabs/statistics/statisticsStore.js';
import gedcomConstantsStore from './gedcomConstantsStore.js';

const EMPTY = "";

const VALUE_OCCUPATION = "Occupation";

const { TAGS, VALUES, CALENDARS, MONTHS_MAP } = gedcomConstantsStore;

function byTag(tag) {
    return gedcomConstantsStore.byTag(tag);
}

function getFirst(array, def) {
    return _.get(array, 0, def);
}

export function formatName(str, isSurname) {
    if (typeof str !== "string") {
        str = String(str);
    }

    // Capitalize only the first letter of each word and after "-"
    str = str.toLowerCase().replace(/(^|\s|-)([a-zà-ÿ])/g, function (match) {
        return match.toUpperCase();
    });

    // Replace occurrences of " De " with " de "
    str = str.replace(/ De /g, " de ");

    // If the string starts with "De ", replace it with "de "
    if (str.startsWith("De ")) {
        str = "de " + str.slice(3);
    }

    // If the string is a surname, replace "xxx ou xxy" with "xxx"
    if (isSurname) {
        str = str.replace(/(\S+)\s+[oO]u\s+\S+/gi, "$1");
    }

    return str;
}

function processDetailedOccupations(individualJson) {
    const occupations = [];

    // Traiter les occupations directes
    individualJson.tree
        .filter(byTag(TAGS.OCCUPATION))
        .forEach(occNode => {
            const dateNode = occNode.tree?.find(node => node.tag === TAGS.DATE);
            occupations.push({
                value: formatOccupation(occNode.data),
                date: dateNode ? processDate(dateNode.data) : null,
                year: dateNode ? extractYear(processDate(dateNode.data)) : null,
                type: 'direct'
            });
        });

    // Ajouter les occupations des événements
    individualJson.tree
        .filter(node =>
            node.tag === TAGS.EVENT &&
            node.tree.some(subNode =>
                subNode.tag === TAGS.TYPE &&
                subNode.data === VALUE_OCCUPATION
            )
        )
        .forEach(eventNode => {
            const dateNode = eventNode.tree?.find(node => node.tag === TAGS.DATE);
            const noteNode = eventNode.tree?.find(node => node.tag === TAGS.NOTE);

            if (noteNode) {
                occupations.push({
                    value: formatOccupation(noteNode.data),
                    date: dateNode ? processDate(dateNode.data) : null,
                    year: dateNode ? extractYear(processDate(dateNode.data)) : null,
                    type: 'event'
                });
            }
        });

    return _.orderBy(occupations, ['year', 'date'], ['asc', 'asc']);
}

// Fonction pour formater l'occupation
function formatOccupation(occupation) {
    if (!occupation) return null; // Retourne null si l'occupation n'est pas définie
    return occupation.charAt(0).toUpperCase() + occupation.slice(1).toLowerCase();
}

function processOccupations(individualJson) {
    // Direct retrieval of occupations
    const directOccupations = jsonpointer.get(individualJson, '/tree').filter(byTag(TAGS.OCCUPATION))
        .map((occ) => ({
            occupation: formatOccupation(occ.data),
        }));

    // Retrieval of occupation details in marked events
    const detailOccupations = jsonpointer.get(individualJson, '/tree').filter(
        (node) => node.tag === TAGS.EVENT &&
            jsonpointer.get(node, '/tree').some(
                (subNode) => subNode.tag === TAGS.TYPE && subNode.data === VALUE_OCCUPATION
            )
    ).flatMap((node) => jsonpointer.get(node, '/tree').filter((subNode) => subNode.tag === TAGS.NOTE))
        .map((note) => ({
            occupation: note.data, // Assume these details as additional occupations
        }));

    // Combine direct occupations and details
    const allOccupations = [...directOccupations, ...detailOccupations];

    // Construct the formatted list of occupations
    let formattedOccupations =
        allOccupations.length > 0
            ? `<ul class='list-group'>${allOccupations
                .map((occ) => `<li class='list-group-item'>${occ.occupation}</li>`)
                .join("")}</ul>`
            : "";

    return formattedOccupations;
}

function formatPersonLink(id, name) {
    return `<a href="#"><span class="person-link" data-person-id="${id}">${name}</span></a>`;
}

function formatSiblings(siblings) {
    return `<ul class="list-unstyled">${_.map(
        siblings,
        (s) =>
            `<li>-${formatPersonLink(s.id, s.name)} (${s.birthDate} - ${s.deathDate})</li>`
    ).join("\n")}</ul>`;
}

function formatChild(child) {
    const birthMoment = moment(child.birthDate, "DD/MM/YYYY");
    const deathMoment = child.deathDate
        ? moment(child.deathDate, "DD/MM/YYYY")
        : null;
    const ageAtDeath = deathMoment
        ? ` à ${deathMoment.diff(birthMoment, "years")} ans`
        : "";
    return `${formatPersonLink(child.id, child.name)}${child.deathDate ? ` (†${child.deathDate}${ageAtDeath})` : ""
        }`;
}

function extractBasicInfo(individualJson) {
    const names = individualJson.tree.filter(byTag(TAGS.NAME));
    const nameInfo = names.map((o) =>
        o.data.split("/").map((s) => s.trim().replace(/_/, " "))
    );
    let name = formatName(
        nameInfo.map((info) => info[0]).find((n) => n) || "",
        false
    );
    let surname = formatName(
        nameInfo.map((info) => info[1]).find((s) => s) || "",
        true
    );

    let fullName = `${name.split(" ")[0]} ${surname}`;
    let personLink = formatPersonLink(individualJson.pointer, fullName);

    const genderMap = { 'M': 'male', 'F': 'female' };

    const result = individualJson.tree.reduce((acc, curr) => {
        if (byTag(TAGS.SEX)(curr)) {
            acc.gender = genderMap[curr.data] || 'unknown';
        } else if (byTag(TAGS.SIGNATURE)(curr)) {
            acc.canSign = curr.data === TAGS.YES;
        }
        return acc;
    }, { gender: 'male', canSign: false });

    return { name, surname, gender: result.gender, canSign: result.canSign, personLink };
}

function getRelativeDetails(individualID, allIndividuals) {
    const individual = allIndividuals.find((ind) => ind.pointer === individualID);
    if (!individual) return null; // Si l'individu n'existe pas, ignorer

    const { name, surname } = extractBasicInfo(individual);
    const firstName = name ? name.split(" ")[0] : "";
    const fullName =
        firstName || surname
            ? `${firstName || ""} ${surname || ""}`.trim()
            : "Nom inconnu";

    const birthEventNode = individual.tree.find((node) => node.tag === "BIRT");
    const deathEventNode = individual.tree.find((node) => node.tag === "DEAT");

    // Récupérer les nœuds de date et formater les dates
    const birthDateNode = birthEventNode
        ? birthEventNode.tree.find((node) => node.tag === "DATE")
        : null;
    const birthDate = birthDateNode ? processDate(birthDateNode.data) : "";
    const deathDateNode = deathEventNode
        ? deathEventNode.tree.find((node) => node.tag === "DATE")
        : null;
    const deathDate = deathDateNode ? processDate(deathDateNode.data) : "";

    return {
        id: individualID,
        name: fullName,
        birthDate: birthDate,
        deathDate: deathDate,
    };
}

function calculateGeneration(individualPointer, allFamilies, cache = new Map()) {
    // Si déjà calculé, retourner la valeur du cache
    if (cache.has(individualPointer)) {
        return cache.get(individualPointer);
    }

    // Trouver la famille où l'individu est un enfant
    const parentFamily = allFamilies.find(family =>
        family.tree.some(node =>
            node.tag === TAGS.CHILD && node.data === individualPointer
        )
    );

    // Si pas de famille parentale, c'est la génération 1
    if (!parentFamily) {
        cache.set(individualPointer, 1);
        return 1;
    }

    // Trouver l'ID d'un parent
    const parentId = parentFamily.tree.find(node =>
        node.tag === TAGS.HUSBAND || node.tag === TAGS.WIFE
    )?.data;

    // Si pas de parent, c'est la génération 1
    if (!parentId) {
        cache.set(individualPointer, 1);
        return 1;
    }

    // Calculer récursivement la génération du parent et ajouter 1
    const parentGeneration = calculateGeneration(parentId, allFamilies, cache);
    const generation = parentGeneration + 1;

    // Mettre en cache avant de retourner
    cache.set(individualPointer, generation);
    return generation;
}

/* Parental Family Members */
function getParentalFamily(individualPointer, allFamilies, allIndividuals) {
    // Find the family where the individual is a child
    const parentFamily = allFamilies.find((family) =>
        family.tree.some(
            (node) => node.tag === "CHIL" && node.data === individualPointer
        )
    );

    if (!parentFamily) {
        return { siblings: [], fatherId: null, motherId: null, siblingIds: [] };
    }

    // Extract the parents' IDs
    const husband = parentFamily.tree.find((node) => node.tag === "HUSB")?.data;
    const wife = parentFamily.tree.find((node) => node.tag === "WIFE")?.data;

    // Extract the siblings
    let siblings = parentFamily.tree
        .filter((node) => node.tag === "CHIL" && node.data !== individualPointer)
        .map((siblingNode) =>
            getRelativeDetails(siblingNode.data, allIndividuals)
        )
        .filter((sibling) => sibling !== null);

    // Extract sibling IDs
    let siblingIds = parentFamily.tree
        .filter((node) => node.tag === "CHIL" && node.data !== individualPointer)
        .map((siblingNode) => siblingNode.data);

    // Sort the siblings by birth date, then by name if the birth date is unknown
    siblings = _.orderBy(
        siblings,
        [
            (member) =>
                member.birthDate
                    ? new Date(member.birthDate.split("/").reverse().join("-"))
                    : Infinity,
            "name",
        ],
        ["asc", "asc"]
    );
    return { siblings, fatherId: husband, motherId: wife, siblingIds };
}

/* Individual family members */
export function getIndividualFamily(individualPointer, allFamilies, allIndividuals) {
    const result = {
        spouses: {},
        children: {}
    };

    // Trouver les familles où l'individu est un parent (HUSB ou WIFE)
    const parentFamilies = _.filter(allFamilies, family =>
        _.some(family.tree, node =>
            (node.tag === "HUSB" || node.tag === "WIFE") && node.data === individualPointer
        )
    );

    _.forEach(parentFamilies, family => {
        // Extraire les époux
        const spouses = _.map(
            _.filter(family.tree, node =>
                (node.tag === "HUSB" || node.tag === "WIFE") && node.data !== individualPointer
            ),
            spouseNode => spouseNode.data
        );

        // Extraire les enfants
        const children = _.map(
            _.filter(family.tree, node => node.tag === "CHIL"),
            childNode => childNode.data
        );

        // Extraire les informations de mariage
        const marriageNode = _.find(family.tree, node => node.tag === "MARR");
        const marriageInfo = marriageNode ? {
            date: _.get(_.find(marriageNode.tree, { tag: "DATE" }), 'data', ''),
            place: _.get(_.find(marriageNode.tree, { tag: "PLAC" }), 'data', ''),
            key: _.get(marriageNode, 'key', '')
        } : {};

        // Ajouter les détails des époux, des enfants et des mariages
        _.forEach(spouses, spouseId => {
            if (!result.spouses[spouseId]) {
                result.spouses[spouseId] = {
                    details: getRelativeDetails(spouseId, allIndividuals),
                    children: [],
                    marriage: marriageInfo
                };
            }

            _.forEach(children, childId => {
                const childDetails = getRelativeDetails(childId, allIndividuals);
                result.spouses[spouseId].children.push(childDetails);

                if (!result.children[childId]) {
                    result.children[childId] = {
                        details: childDetails,
                        parents: []
                    };
                }
                result.children[childId].parents.push(individualPointer);
            });
        });
    });
    return result;
}

/* Marriages */
function processMarriages(
    individualPointer,
    allIndividuals,
    allFamilies,
    individualTowns
) {
    if (!individualPointer || !_.isArray(allFamilies)) {
        return [];
    }

    // Collect marriage information using getIndividualFamily
    const individualFamilyInfo = getIndividualFamily(individualPointer, allFamilies, allIndividuals);

    const marriages = _.map(individualFamilyInfo.spouses, (spouseInfo, spouseId) => {
        const { details: spouseDetails, children, marriage } = spouseInfo;

        // Process the details of the marriage event
        const event = {
            tree: [{ tag: 'DATE', data: marriage.date }, { tag: 'PLAC', data: marriage.place }],
            key: marriage.key // Add the town key (townKey)
        };
        const { eventDetails: rawEventDetails, updatedIndividualTowns } = processEventDatePlace(
            event,
            individualTowns
        );

        // Add the family ID to the event details
        const eventDetails = { ...rawEventDetails, eventId: '', spouseId }; // Add spouseId here

        // Get the spouse's name
        const spouseName = spouseDetails.name;

        // Generate the formatted marriage description
        let gender = "";  // Assume that gender is determined elsewhere or can be added here
        let age = "";  // Assume that age is determined elsewhere or can be added here

        const formattedMarriage = generateEventDescription(
            "MARR",
            {
                ...eventDetails,
                spouseName: spouseName,
                spouseId: spouseId // Pass spouseId to eventData
            },
            gender,
            age
        );

        // Get the couple's details
        const couple = {
            husband: individualPointer,
            wife: spouseId
        };

        return { formattedMarriage, children, spouseName, eventDetails, couple };
    });

    return marriages;
}

let cachedDepartementData = null;
let cachedCountryData = null;

async function getDepartementData() {
    if (!cachedDepartementData) {
        const { departementData } = await import('./departementData.js');
        cachedDepartementData = departementData;
    }
    return cachedDepartementData;
}

async function getCountryData() {
    if (!cachedCountryData) {
        const { countryData } = await import('./countryData.js');
        cachedCountryData = countryData;
    }
    return cachedCountryData;
}

async function processPlace({ data: original, tree } = {}) {
    const departementData = await getDepartementData();
    const countryData = await getCountryData();

    const segments = original.split(/\s*,\s*/);
    let placeObj = {
        latitude: "",
        longitude: "",
        town: formatTownName(segments[0]),
        townDisplay: segments[0],
        subdivision: "",
        departement: "",
        departementColor: "",
        region: "",
        country: "",
        countryCode: "",
        countryColor: "",
    };

    // Normalisation pour la recherche du pays
    const normalizedSegments = _.map(segments, (segment) => normalizeGeoString(segment));

    // Recherche du pays dans les données de pays
    const findCountry = () => {
        for (const continent of countryData.continents) {
            for (const country of continent.countries) {
                if (_.some(normalizedSegments, segment => segment === country.key.FR)) {
                    return country;
                }
            }
        }
        return null;
    };

    const countryMatch = findCountry();

    if (countryMatch) {
        placeObj.country = countryMatch.name.FR;
        placeObj.countryCode = countryMatch.code;
        placeObj.countryColor = countryMatch.color;
    }

    // If the country is empty or equal to France, search for postal or departmental codes
    if (!placeObj.country || placeObj.country === "France") {
        const codeRegex = /\b\d{5}\b|\(\d{2}\)/;
        const codeMatch = original.match(codeRegex);

        if (codeMatch) {
            const code = codeMatch[0];
            if (code.startsWith("(")) {
                placeObj.departement = code.replace(/[()]/g, "");
            } else if (code.length === 5) {
                placeObj.departement = code.substring(0, 2);
            }

            // Check if placeObj.departement is a number
            if (!isNaN(placeObj.departement)) {
                // Use Lodash's find method to find the departement
                const departement = _.find(departementData, { 'code': placeObj.departement });

                // If the departement is found, replace placeObj.departement with the departement name
                if (departement) {
                    placeObj.departement = departement.name;
                    placeObj.departementColor = departement.departementColor;
                }
            } else if (typeof placeObj.departement === 'string') {
                // If placeObj.departement is a string, find the departement by name
                const departement = _.find(departementData, { 'name': placeObj.departement });

                // If the departement is found, set placeObj.departementColor to the departement color
                if (departement) {
                    placeObj.departementColor = departement.departementColor;
                }
            }
        }
    }

    // Traitement pour subdivision, departement
    if (segments.length >= 2) {
        if (segments.length >= 3) {
            placeObj.subdivision = _.initial(segments).join(", ");
            // S'assure de ne pas écraser le département si déjà défini par un code postal
            if (!placeObj.departement) {
                placeObj.departement = segments[segments.length - 2];
            }
        } else {
            if (!placeObj.departement) {
                placeObj.departement = segments[0];
            }
        }
    }

    // Extraction of geolocation data if available
    if (_.isArray(tree)) {
        const mapNode = _.find(tree, { tag: "MAP" });
        if (mapNode && _.isArray(mapNode.tree)) {
            const latiNode = _.find(mapNode.tree, { tag: "LATI" });
            const longNode = _.find(mapNode.tree, { tag: "LONG" });
            if (latiNode) {
                placeObj.latitude = parseFloat(latiNode.data.trim());
            }
            if (longNode) {
                placeObj.longitude = parseFloat(longNode.data.trim());
            }
        }
    }

    // Formatage final de la chaîne de lieu pour l'affichage
    const parts = _.filter([
        placeObj.subdivision,
        placeObj.town,
        placeObj.departement,
        placeObj.country,
    ]);
    placeObj.display = parts.join(", ");

    return placeObj;
}

function processDate(s) {
    if (typeof s !== "string") {
        return "";
    }

    let trimmed = s.trim().toUpperCase();

    const isRepublican = gedcomConstantsStore.isRepublicanCalendar(trimmed);
    if (isRepublican) {
        trimmed = trimmed.substring(CALENDARS.REPUBLICAN.length).trim();
    } else if (gedcomConstantsStore.isGregorianCalendar(trimmed)) {
        trimmed = trimmed.substring(CALENDARS.GREGORIAN.length).trim();
    }

    const split = trimmed.split(/\s+/);
    if (split.length === 0) {
        console.error("Error: No date parts found after trimming", trimmed);
        return "";
    }

    let day, month, year;
    if (split.length === 3) {
        day = parseInt(split[0], 10);
        month = (isRepublican ?
            MONTHS_MAP.REPUBLICAN[split[1]] :
            MONTHS_MAP.GREGORIAN[split[1]]) || 0;
        year = parseInt(split[2], 10);
    } else if (split.length === 2) {
        month = (isRepublican ?
            MONTHS_MAP.REPUBLICAN[split[1]] :
            MONTHS_MAP.GREGORIAN[split[1]]) || 0;
        year = parseInt(split[1], 10);
    } else if (split.length === 1) {
        year = parseInt(split[0], 10);
    }

    if (isRepublican) {
        year += 1792; // Conversion de l'année républicaine en grégorienne
    }
    let display = year ? year.toString() : "";
    if (month > 0) {
        display = padTwoDigits(month) + "/" + display;
    }
    if (day > 0) {
        display = padTwoDigits(day) + "/" + display;
    }

    return display;
}

function processEventDatePlace(event, individualTowns) {
    const familyTowns = familyTownsStore.getAllTowns();
    const dateNode = event.tree.find((node) => node.tag === "DATE");
    const date = dateNode ? processDate(dateNode.data) : "";
    const placeKey = event.key || "";
    let placeDetails = familyTowns[placeKey] || {};

    if (!individualTowns[placeKey]) {
        individualTowns[placeKey] = {
            town: placeDetails.town || "",
            display: placeDetails.town || "",
            townDisplay: placeDetails.townDisplay || "",
            departement: placeDetails.departement || "",
            departementColor: placeDetails.departementColor || "",
            country: placeDetails.country || "",
            countryColor: placeDetails.countryColor || "",
            latitude: placeDetails.latitude || "",
            longitude: placeDetails.longitude || "",
        };
    } else {
        let town = individualTowns[placeKey];
        town.latitude = placeDetails.latitude || town.latitude;
        town.longitude = placeDetails.longitude || town.longitude;
        town.display = placeDetails.town || town.display;
        individualTowns[placeKey] = town;
    }

    return {
        eventDetails: {
            date: date,
            town: placeDetails.town || "",
            townDisplay: placeDetails.townDisplay || "",
            departement: placeDetails.departement || "",
            departementColor: placeDetails.departementColor || "",
            country: placeDetails.country || "",
            countryColor: placeDetails.countryColor || "",
            latitude: placeDetails.latitude || "",
            longitude: placeDetails.longitude || "",
            placeKey: placeKey,
        },
        updatedTownList: individualTowns,
    };
}

// Optimized version of buildIndividual
function handleEventTags() {
    const config = configStore.getConfig;
    let birthTags = [TAGS.BIRTH],
        deathTags = [TAGS.DEATH];
    if (config.substituteEvents) {
        birthTags = birthTags.concat([TAGS.BAPTISM]);
        deathTags = deathTags.concat([TAGS.BURIAL]);
    }
    return { birthTags, deathTags };
}

/* Functions for managing events data */
function generateEventDescription(eventType, eventData, gender, age, deceased) {
    let eventDate = eventData.date
        ? prefixedDate(eventData.date)
        : "le (date inconnue)";
    let eventPlace = eventData.townDisplay || "(lieu inconnu)";
    let townKey = eventData.placeKey || "unknown"; // Suppose that townKey is your unique identifier for each town
    let eventPlaceMarkup =
        eventPlace === "(lieu inconnu)"
            ? ` à ${eventPlace}`
            : `à <a href="#"><span class="city-link" data-town-key="${townKey}">${eventPlace}</span></a>`;

    // Update the eventType based on the deceased flag
    const eventTypeDescriptions = {
        BIRT: "Naissance",
        MARR: "Mariage",
        DEAT: deceased ? "Décès" : "Aujourd’hui",
    };

    let additionalDetails = "";
    let baseDescription = eventTypeDescriptions[eventType] || "Événement";

    switch (eventType) {
        case "BIRT":
            // Naissance n'a pas de détails supplémentaires autres que la date et le lieu
            break;
        case "MARR":
            // Ajout du conjoint pour le mariage, si disponible
            if (eventData.spouseName) {
                additionalDetails = ` avec <a href="#"><span class="person-link" data-person-id=${eventData.spouseId}>${eventData.spouseName}</span></a>`;
            }
            break;
        case "DEAT":
            if (!deceased && age) {
                additionalDetails = `${age} ans`;
            }
            break;
    }

    let eventDescription = `${additionalDetails} ${eventPlaceMarkup ? `${eventPlaceMarkup}` : ""
        }`;
    return eventDescription;
}

function buildEvent(event, individualTowns) {
    if (!event) {
        return {};
    }

    const { eventDetails, updatedIndividualTowns } = processEventDatePlace(
        event,
        individualTowns
    );
    return { eventDetails, updatedIndividualTowns };
}

function buildEventFallback(individualJson, tags, individualTowns) {
    let firstEvent = null;
    for (let i = 0; i < tags.length; i++) {
        const tag = tags[i];
        const event = individualJson.tree.find((node) => node.tag === tag);
        if (event) {
            firstEvent = event;
            break;
        }
    }
    const { eventDetails, updatedIndividualTowns } = firstEvent
        ? buildEvent(firstEvent, individualTowns)
        : {
            eventDetails: {
                date: "",
                town: "",
                departement: "",
                departementColor: "",
                country: "",
                countryColor: "",
                latitude: "",
                longitude: "",
                placeKey: "",
            },
            updatedIndividualTowns: individualTowns,
        };
    return { eventDetails, updatedIndividualTowns };
}

/**
 * Adds an event to the individual's events list and to the family events store if applicable
 * @param {string} type - The type of event (birth, death, marriage, etc.)
 * @param {string} name - Individual's name
 * @param {string} surname - Individual's surname
 * @param {string} date - Event date
 * @param {string} town - Event location
 * @param {string} description - Formatted event description
 * @param {string} eventId - Unique event identifier
 * @param {Array} eventAttendees - List of event participants
 * @param {string} birthDate - Individual's birth date (for age calculation)
 * @param {Array} individualEvents - Array to store the individual's events
 * @returns {void}
 */
function addEvent(type, name, surname, date, town, description, eventId = '', eventAttendees = [], birthDate, individualEvents) {
    if (!date) return;

    // Calculate age at the time of the event if birthDate is known
    let ageAtEvent = null;
    if (birthDate) {
        ageAtEvent = calculateAge(birthDate, date);
    }

    const formattedAttendees = eventAttendees.map(attendee => `${attendee.name}`).join(', ');

    const event = {
        type,                   // Used for event grouping
        name: `${name} ${surname}`, // Used in formatEvent
        date,                   // Used in formatEvent
        town: town || "lieu inconnu", // Used in formatEvent
        townDisplay: town || "lieu inconnu",
        description,
        eventId: eventId || '',
        eventAttendees: eventAttendees.join(', '),
        age: ageAtEvent,        // Used in formatEvent for deaths
        spouse: '',             // Should be filled for marriages
        sosa: null              // Important for ancestor events
    };

    individualEvents.push(event);

    // Add to family events store unless it's a personal event
    if (!["child-birth", "occupation", "today"].includes(type)) {
        gedcomDataStore.addFamilyEvent(event);
    }
}


function buildIndividual(individualJson, allIndividuals, allFamilies) {
    if (!individualJson) {
        return { id: null, name: "", surname: "", birth: {}, death: {} };
    }

    let individualTowns = [];
    let individualEvents = [];
    let formattedDeath = "";
    let age;
    let deceased = false;

    const { name, surname, gender, canSign, personLink } = extractBasicInfo(individualJson);
    const { birthTags, deathTags } = handleEventTags();

    const birthData = buildEventFallback(individualJson, birthTags, individualTowns).eventDetails;
    const birthYear = birthData.date ? extractYear(birthData.date) : "";
    const formattedBirth = generateEventDescription("BIRT", birthData, gender, age);
    addEvent("birth", name, surname, birthData.date, birthData.town, formattedBirth, "", [], birthData.date, individualEvents);

    const deathData = buildEventFallback(individualJson, deathTags, individualTowns).eventDetails;
    const deathYear = deathData.date ? extractYear(deathData.date) : "";
    let currentYear = new Date().getFullYear();

    if (!birthData.date) {
        deceased = true;
        formattedDeath = deathData.date ? generateEventDescription("DEAT", deathData, gender, null, true) : "Information on life and death unknown";
        addEvent("death", name, surname, deathData.date || "date inconnue", deathData.town || "", formattedDeath, "", [], birthData.date, individualEvents);
    } else {
        if (!deathData.date) {
            const today = moment().format("DD/MM/YYYY");
            if (birthYear >= currentYear - 105) {
                age = calculateAge(birthData.date);
                deceased = false;
                formattedDeath = generateEventDescription("DEAT", { date: today, town: "" }, gender, age, false);
                addEvent("today", name, surname, today, "", formattedDeath, "", [], birthData.date, individualEvents);
            } else {
                deceased = true;
                formattedDeath = generateEventDescription("DEAT", { date: today, town: "" }, gender, "", true);
                addEvent("death", name, surname, "date inconnue", "", formattedDeath, "", [], birthData.date, individualEvents);
            }
        } else {
            age = calculateAge(birthData.date, deathData.date);
            deceased = true;
            formattedDeath = generateEventDescription("DEAT", deathData, gender, age, true);
            addEvent("death", name, surname, deathData.date, deathData.town, formattedDeath, "", [], birthData.date, individualEvents);
        }
    }

    // Search for the family in which the individual is a child
    const parentalFamily = getParentalFamily(individualJson.pointer, allFamilies, allIndividuals);

    // Add individual as a node in the genealogy graph
    familyTreeDataStore.addNodeToGenealogyGraph({
        id: individualJson.pointer,
        name: name + ' ' + surname,
        birthDate: birthData.date,
        deathDate: deathData.date
    });

    if (parentalFamily.fatherId) {
        familyTreeDataStore.addEdgeToGenealogyGraph(
            parentalFamily.fatherId,
            individualJson.pointer,
            'father'
        );
    }

    if (parentalFamily.motherId) {
        familyTreeDataStore.addEdgeToGenealogyGraph(
            parentalFamily.motherId,
            individualJson.pointer,
            'mother'
        );
    }

    const formattedSiblings = parentalFamily.siblings.length > 0
        ? formatSiblings(parentalFamily.siblings)
        : "";

    // Search for the family in which the individual is a spouse/parent
    const individualFamily = getIndividualFamily(
        individualJson.pointer,
        allFamilies,
        allIndividuals
    );

    const marriages = processMarriages(
        individualJson.pointer,
        allIndividuals,
        allFamilies,
        individualTowns
    );

    marriages.forEach((marriage) => {
        addEvent(
            "marriage",
            name,
            surname,
            marriage.eventDetails.date,
            marriage.eventDetails.town,
            marriage.formattedMarriage,
            marriage.eventDetails.eventId,
            marriage.couple ? [marriage.couple.husband, marriage.couple.wife] : [],
            birthData.date,
            individualEvents
        );

        marriage.children.forEach((child) => {
            addEvent(
                "child-birth",
                child.name,
                "",
                child.birthDate,
                "",
                formatChild(child),
                "",
                [],
                birthData.date,
                individualEvents
            );
        });
    });

    const formattedOccupations = processOccupations(individualJson);

    const stats = {
        demography: {
            birthInfo: {
                date: birthData.date,
                year: birthYear,
                place: {
                    town: birthData.town || "",
                    departement: birthData.departement || "",
                    country: birthData.country || "",
                    coordinates: {
                        latitude: birthData.latitude || null,
                        longitude: birthData.longitude || null
                    }
                }
            },
            deathInfo: {
                date: deathData.date,
                year: deathYear,
                place: {
                    town: deathData.town || "",
                    departement: deathData.departement || "",
                    country: deathData.country || "",
                    coordinates: {
                        latitude: deathData.latitude || null,
                        longitude: deathData.longitude || null
                    }
                },
                ageAtDeath: age
            },
            generation: calculateGeneration(individualJson.pointer, allFamilies)
        },
        family: {
            parentalFamily: {
                fatherId: parentalFamily.fatherId,
                motherId: parentalFamily.motherId,
                siblings: parentalFamily.siblings,
                siblingCount: parentalFamily.siblings.length
            },
            marriages: marriages.map(marriage => ({
                date: marriage.eventDetails.date,
                place: {
                    town: marriage.eventDetails.town,
                    departement: marriage.eventDetails.departement,
                    country: marriage.eventDetails.country
                },
                spouseId: marriage.eventDetails.spouseId,
                childrenCount: marriage.children.length
            })),
            totalChildren: Object.values(individualFamily.children).length
        },
        identity: {
            firstName: name.split(" ")[0],
            lastName: surname,
            gender: gender,
            occupations: processDetailedOccupations(individualJson)
        }
    };

    // console.log(stats);

    return {
        id: individualJson.pointer,
        name,
        surname,
        personLink,
        birthDate: birthData.date,
        birthDepartement: birthData.departement || "",
        birthCountry: birthData.country || "",
        birthYear,
        fanBirthPlace: birthData.town || "",
        deathYear,
        fanDeathPlace: deathData.town || "",
        age,
        deceased,
        gender,
        fatherId: parentalFamily.fatherId,
        motherId: parentalFamily.motherId,
        spouseIds: Object.keys(individualFamily.spouses),
        siblingIds: parentalFamily.siblingIds,
        individualTowns,
        individualEvents,
        formattedBirth,
        formattedDeath,
        formattedOccupations,
        formattedMarriages: marriages.map((marriage) => marriage.formattedMarriage).join("\n"),
        formattedSiblings,
        bgColor: birthData.departementColor ? birthData.departementColor : birthData.countryColor,
        stats
    };
}

function buildHierarchy(currentRoot) {
    console.time("buildHierarchy");
    if (!currentRoot) {
        console.warn("Root is undefined in buildHierarchy");
        return null;
    }

    const config = configStore.getConfig;
    const maxHeight = config.maxGenerations - 1;

    timelineEventsStore.clearEvents();

    // Utiliser le cache des individus déjà construit
    const individualsCache = gedcomDataStore.getIndividualsCache()

    function buildRecursive(
        individualPointer,
        parent,
        sosa,
        height,
        individualsCache,
        config
    ) {
        if (!individualsCache.has(individualPointer) && individualPointer !== null) {
            return null;
        }

        const individual =
            individualsCache.get(individualPointer) ||
            createFictiveIndividual(individualPointer, sosa, height);

        // Utiliser les événements individuels si disponibles
        if (individual.individualEvents && individual.individualEvents.length > 0) {
            individual.individualEvents.forEach((event) => {
                const validTypes = ['death', 'birth', 'marriage'];
                if (validTypes.includes(event.type)) {
                    timelineEventsStore.addEvent({
                        ...event,
                        id: individualPointer,
                        sosa,
                    });
                }
            });
        }

        let obj = {
            ...individual,
            sosa: sosa,
            generation: height,
            parent: parent,
        };

        if (height < maxHeight) {
            const parents = [];

            const fatherPointer = individual.fatherId;
            const motherPointer = individual.motherId;

            if (fatherPointer) {
                const fatherObj = individualsCache.get(fatherPointer);
                if (fatherObj) {
                    parents.push(
                        buildRecursive(
                            fatherPointer,
                            obj,
                            sosa * 2,
                            height + 1,
                            individualsCache,
                            config
                        )
                    );
                } else {
                    console.log(`Father not found in cache: ${fatherPointer}`);
                }
            } else if (config.showMissing) {
                parents.push(
                    buildRecursive(
                        null,
                        obj,
                        sosa * 2,
                        height + 1,
                        individualsCache,
                        config
                    )
                );
            }

            if (motherPointer) {
                const motherObj = individualsCache.get(motherPointer);
                if (motherObj) {
                    parents.push(
                        buildRecursive(
                            motherPointer,
                            obj,
                            sosa * 2 + 1,
                            height + 1,
                            individualsCache,
                            config
                        )
                    );
                } else {
                    console.log(`Mother not found in cache: ${motherPointer}`);
                }
            } else if (config.showMissing) {
                parents.push(
                    buildRecursive(
                        null,
                        obj,
                        sosa * 2 + 1,
                        height + 1,
                        individualsCache,
                        config
                    )
                );
            }
            obj.children = parents;
        }

        return obj;
    }

    function createFictiveIndividual(individualPointer, sosa, height) {
        return {
            id: individualPointer,
            name: "",
            surname: "",
            sosa: sosa,
            generation: height,
            gender: sosa % 2 === 0 ? "M" : "F",
            children: [],
            parent: null,
            individualEvents: [],
        };
    }

    // Utiliser currentRoot au lieu de rootIndividualPointer
    const hierarchy = buildRecursive(
        currentRoot,
        null,
        1,
        0,
        individualsCache,
        config
    );

    console.timeEnd("buildHierarchy");
    return hierarchy;
}

function toJson(data) {
    const triggers = "[�]";
    const view = new Uint8Array(data);
    const text = new TextDecoder().decode(view);
    const parsed = parseGedcom.parse(text);

    const isLikelyAnsi = new RegExp(triggers).test(text);
    const isAnsi = getFirst(
        parsed
            .filter(byTag(TAGS.HEAD))  // ✅ Utilise la constante du store
            .flatMap((a) => a.tree.filter(byTag(TAGS.ENCODING)).map((a) => a.data)),
        null
    ) === VALUES.ANSI;  // ✅ Utilise la constante du store

    let result;

    if (isLikelyAnsi || isAnsi) {
        const extendedAsciiTable =
            "€?‚ƒ„…†‡ˆ‰Š‹Œ?Ž??‘’“”•–—˜™š›œ?žŸ?¡¢£¤¥¦§¨©ª«¬?®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ";
        const builder = Array.from(view, (charCode) =>
            (charCode & 0x80) === 0
                ? String.fromCharCode(charCode)
                : extendedAsciiTable.charAt(charCode ^ 0x80)
        );
        const text2 = builder.join("");

        result = parseGedcom.parse(text2);
    } else {
        result = parsed;
    }
    return result;
}

// Function to store all family locations in memory
export async function getAllPlaces(json) {
    try {
        const dbTowns = await getAllRecords();
        familyTownsStore.setTownsData(dbTowns);

        // Process each individual for places
        for (const individual of json) {
            await processTree(individual.tree, null);
        }

        // Update geocoding after all places are collected
        await familyTownsStore.updateTownsViaProxy();

        return { json };
    } catch (error) {
        console.error("Error in getAllPlaces: ", error);
        throw error;
    }
}

async function getAllRecords() {
    return new Promise((resolve, reject) => {
        const storedData = localStorage.getItem("townsDB");
        if (storedData) {
            try {
                // Convertir les données JSON en objet JavaScript
                const dbTowns = JSON.parse(storedData);

                // Vider townsDB debug
                // localStorage.removeItem("townsDB");

                resolve(dbTowns);
            } catch (error) {
                reject("Erreur lors de la conversion des données JSON : " + error);
            }
        } else {
            // S'il n'y a pas de données, retourner un objet vide
            resolve({});
        }
    });
}

async function processTree(tree, parentNode) {
    for (const node of tree) {
        if (node.tag === "PLAC" && parentNode) {
            let placeInfo = await processPlace({ data: node.data, tree: node.tree });
            let normalizedKey = normalizeGeoString(placeInfo.town);
            if (!normalizedKey) continue;

            parentNode.key = normalizedKey;

            familyTownsStore.addTown(normalizedKey, {
                town: placeInfo.town,
                departement: placeInfo.departement,
                departementColor: placeInfo.departementColor,
                country: placeInfo.country,
                countryCode: placeInfo.countryCode,
                countryColor: placeInfo.countryColor,
                latitude: placeInfo.latitude,
                longitude: placeInfo.longitude,
                townDisplay: placeInfo.departement ?
                    `${placeInfo.town} (${placeInfo.departement})` :
                    placeInfo.town
            });
        }

        if (node.tree && node.tree.length > 0) {
            await processTree(
                node.tree,
                ["BIRT", "DEAT", "BURI", "MARR", "OCCU", "EVEN"].includes(node.tag) ? node : parentNode
            );
        }
    }
}

function calculateMaxGenerations(individualsCache, allFamilies) {
    let maxGen = 0;
    const generationMap = new Map();

    // Initialize with root individuals (those without parents)
    const rootIndividuals = Array.from(individualsCache.keys()).filter(id => {
        const individual = individualsCache.get(id);
        return !individual.fatherId && !individual.motherId;
    });

    // Set generation 1 for root individuals
    rootIndividuals.forEach(id => generationMap.set(id, 1));

    // Process each family to calculate generations
    let changed = true;
    while (changed) {
        changed = false;
        allFamilies.forEach(family => {
            // Get parents
            const fatherId = family.tree.find(node => node.tag === 'HUSB')?.data;
            const motherId = family.tree.find(node => node.tag === 'WIFE')?.data;

            // Get parent generation (max of both parents if they exist)
            const parentGen = Math.max(
                generationMap.get(fatherId) || 0,
                generationMap.get(motherId) || 0
            );

            if (parentGen > 0) {
                // Process children
                const childNodes = family.tree.filter(node => node.tag === 'CHIL');
                childNodes.forEach(childNode => {
                    const childId = childNode.data;
                    const currentChildGen = generationMap.get(childId) || 0;
                    const newChildGen = parentGen + 1;

                    if (newChildGen > currentChildGen) {
                        generationMap.set(childId, newChildGen);
                        maxGen = Math.max(maxGen, newChildGen);
                        changed = true;
                    }
                });
            }
        });
    }

    return maxGen;
}

/**
 * Helper function to check if an individual is a parent in another family
 * @param {string} individualId - The ID of the individual to check
 * @param {Array} allFamilies - All families in the GEDCOM
 * @returns {boolean} Whether the individual appears as a parent in another family
 */
function isParentInOtherFamily(individualId, allFamilies) {
    return allFamilies.some(familyJson =>
        familyJson.tree.some(node =>
            node.tag === 'CHIL' && node.data === individualId
        )
    );
}

/**
 * Determines whether an individual should be processed based on family relationships
 * @param {Object} individualJson - The individual's GEDCOM record
 * @param {Array} familiesWithIndividual - Families where the individual appears
 * @param {Array} allFamilies - All families in the GEDCOM
 * @returns {boolean} Whether the individual should be processed
 */
function shouldProcessIndividual(individualJson, familiesWithIndividual, allFamilies) {
    // Skip individuals not appearing in any family
    if (familiesWithIndividual.length === 0) return false;

    // Special handling for individuals appearing in only one family
    if (familiesWithIndividual.length === 1) {
        const family = familiesWithIndividual[0];
        const hasChildren = family.tree.some(byTag(TAGS.CHILD));  // Utiliser TAGS.CHILD au lieu de TAG_CHILD

        if (!hasChildren) {
            const spouses = family.tree.filter(node =>
                node.tag === TAGS.HUSBAND || node.tag === TAGS.WIFE);  // TAGS.HUSBAND et TAGS.WIFE

            if (spouses.length === 2) {
                const otherSpouse = spouses.find(node =>
                    node.data !== individualJson.pointer);
                const otherSpouseFamilies = allFamilies.filter(familyJson =>
                    familyJson.tree.some(node =>
                        node.data === otherSpouse.data &&
                        (node.tag === TAGS.HUSBAND || node.tag === TAGS.WIFE)  // TAGS.HUSBAND et TAGS.WIFE
                    )
                );

                if (otherSpouseFamilies.length === 1 &&
                    !isParentInOtherFamily(otherSpouse.data, allFamilies)) {
                    return false;
                }
            }
        }
    }

    return true;
}

/**
 * Extracts birth and death years from an individual record
 * @param {Object} individualJson - The individual's GEDCOM record
 * @returns {Object} Object containing birthYear and deathYear
 */
function extractDatesFromIndividual(individualJson) {
    const birthNode = individualJson.tree.find(node =>
        [TAGS.BIRTH, TAGS.BAPTISM].includes(node.tag));
    const deathNode = individualJson.tree.find(node =>
        [TAGS.DEATH, TAGS.BURIAL].includes(node.tag));

    const birthYear = birthNode ?
        extractYear(processDate(birthNode.tree.find(byTag(TAGS.DATE))?.data)) : null;
    const deathYear = deathNode ?
        extractYear(processDate(deathNode.tree.find(byTag(TAGS.DATE))?.data)) : null;

    return { birthYear, deathYear };
}

/**
 * Updates the statistics store with accumulated batch statistics
 * @param {Object} batchStatistics - Accumulated statistics from a batch of individuals
 */
function updateStatisticsStore(batchStatistics) {
    statisticsStore.updateTotalIndividuals(
        batchStatistics.genders.male + batchStatistics.genders.female
    );
    statisticsStore.updateGenderCount('male', batchStatistics.genders.male);
    statisticsStore.updateGenderCount('female', batchStatistics.genders.female);

    batchStatistics.births.forEach(year => statisticsStore.addBirthYear(year));
    batchStatistics.deaths.forEach(year => statisticsStore.addDeathYear(year));
    batchStatistics.ages.forEach(age => statisticsStore.addAgeAtDeath(age));
}

/**
 * Processes marriage and children statistics for an individual
 * @param {Object} individualJson - The individual's GEDCOM record
 * @param {Array} familiesWithIndividual - Families where the individual appears
 * @param {Map} familyStatistics - Pre-computed family statistics
 * @param {number} birthYear - Individual's birth year
 * @param {Map} individualsCache - Cache of processed individuals
 */
function processMarriageAndChildrenStatistics(
    individualJson,
    familiesWithIndividual,
    familyStatistics,
    birthYear,
    individualsCache
) {
    familiesWithIndividual.forEach(family => {
        const stats = familyStatistics.get(family.pointer);
        if (!stats) return;

        statisticsStore.updateMarriages(1);

        if (stats.childrenCount > 0) {
            statisticsStore.addChildrenPerCouple(stats.childrenCount);

            const firstChildBirth = _.min(family.tree
                .filter(byTag(TAGS.CHILD))
                .map(child => {
                    const childNode = individualsCache.get(child.data);
                    return childNode ? extractYear(childNode.birthDate) : null;
                })
                .filter(Boolean));

            if (firstChildBirth && birthYear) {
                const ageAtFirstChild = firstChildBirth - birthYear;
                if (ageAtFirstChild > 0 && ageAtFirstChild < 100) {
                    const period = Math.floor(firstChildBirth / 5) * 5;
                    statisticsStore.addAgeAtFirstChild(period, ageAtFirstChild);
                }
            }
        }
    });
}

function prebuildindividualsCache() {
    console.time("prebuildindividualsCache");
    const json = gedcomDataStore.getSourceData();
    const individualsCache = new Map();

    const allIndividuals = _.filter(json, byTag(TAGS.INDIVIDUAL));
    const allFamilies = _.filter(json, byTag(TAGS.FAMILY));

    // Traiter les individus pour le cache
    allIndividuals.forEach(individualJson => {
        const individual = buildIndividual(individualJson, allIndividuals, allFamilies);
        individualsCache.set(individualJson.pointer, individual);
    });

    // Calculer le nombre max de générations
    const maxGenerations = calculateMaxGenerations(individualsCache, allFamilies);
    configStore.setConfig({ maxGenerations: Math.min(maxGenerations, 8) });
    configStore.setAvailableGenerations(maxGenerations);

    // Retirer l'appel aux statistiques d'ici
    console.timeEnd("prebuildindividualsCache");
    return individualsCache;
}


function getIndividualsList() {
    const json = gedcomDataStore.getSourceData();
    const allIndividuals = _.filter(json, byTag(TAGS.INDIVIDUAL));
    const allFamilies = _.filter(json, byTag(TAGS.FAMILY));

    // Initialiser le service avant de l'utiliser
    statisticsService.initialize();

    // Configurer l'écoute du progrès
    statisticsService.onProgress((progress) => {
        console.log(`Processing statistics: ${progress}%`);
    });

    // Construire d'abord le cache des individus
    const individualsCache = prebuildindividualsCache();
    gedcomDataStore.clearSourceData();
    gedcomDataStore.setIndividualsCache(individualsCache);

    // Puis lancer le traitement des statistiques pour la famille
    statisticsService.processFamilyData();

    requestAnimationFrame(() => {
        import(/* webpackChunkName: "treeUI" */ '../tabs/familyTree/treeUI.js')
            .then(module => {
                const { initializeFamilyTree } = module;
                initializeFamilyTree();
            })
            .catch(error => {
                console.error('Error loading the module:', error);
            });
    });

    const individualsList = Array.from(individualsCache.values());
    return { individualsList };
}

export { toJson, buildHierarchy, getIndividualsList };

================
File: assets/scripts/geneafan/gedcom/shareFormStore.js
================
import { makeAutoObservable, reaction } from '../common/stores/mobx-config';

/**
 * The ShareFormStore is responsible for managing the entered emails and determining the validity of the form.
 */
class ShareFormStore {
  emails = [];
  isValid = false;

  constructor() {
    makeAutoObservable(this);

    reaction(
      () => this.emails.slice(),
      (emails) => {
        // console.log("Emails mis à jour :", emails);

        // Filtrer les emails non vides
        const nonEmptyEmails = emails.filter(email => email && email.trim() !== '');

        // Vérifier s'il y a au moins un email valide
        const hasAtLeastOneValidEmail = nonEmptyEmails.some(email => this.isValidEmail(email));
        // console.log("Au moins un email valide :", hasAtLeastOneValidEmail);

        // Vérifier si tous les emails non vides sont valides
        const allEmailsValid = nonEmptyEmails.every(email => this.isValidEmail(email));
        // console.log("Tous les emails non vides sont valides :", allEmailsValid);

        // Mettre à jour la validité du formulaire
        this.isValid = hasAtLeastOneValidEmail && allEmailsValid;
        // console.log("Le formulaire est valide :", this.isValid);
      }
    );
  }

  setEmail(index, email) {
    // console.log(`Mise à jour de l'email à l'index ${index} :`, email);
    // Assurer que le tableau des emails est correctement dimensionné
    while (this.emails.length <= index) {
      this.emails.push('');
    }
    this.emails[index] = email;
  }

  getEmails() {
    return this.emails;
  }

  isValidEmail(email) {
    const emailRegex = /^(?!.*\.\.)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    const isValid = emailRegex.test(email);
    // console.log(`Email "${email}" est valide :`, isValid);
    return isValid;
  }
}

export default ShareFormStore;

================
File: assets/scripts/geneafan/listeners/eventListeners.js
================
import rootPersonStore from "../common/stores/rootPersonStore.js"; // Nouveau import
import { setupProtectedFeatureEventListeners } from "./protectedFeatures.js";
import {
    setupResponsiveTabs,
    setupTabResizeListener,
} from "./responsiveTabs.js";
import { displayPersonDetailsUI } from "../tabs/fanChart/personDetailsDisplay.js";
import { loadGedcomFile } from "../gedcom/gedcomFileHandler.js";
import { Offcanvas, Tooltip } from "bootstrap";

// WeakMap to store event listener references
const eventListenersMap = new WeakMap();

// Setup tooltips with HTML support
export function setupTooltips() {
    const tooltipTriggerList = document.querySelectorAll(
        '[data-bs-toggle="tooltip"]'
    );
    tooltipTriggerList.forEach((tooltipTriggerEl) => {
        new Tooltip(tooltipTriggerEl, { html: true });
    });
}

// Listener for custom 'showPersonDetails' event
document.addEventListener("showPersonDetails", (event) => {
    displayPersonDetailsUI(event.detail);
});

// Handle city link clicks with delegation
/*
function handleCityLinkClick(event) {
    if (event.target.classList.contains("city-link")) {
        const townKey = event.target.dataset.townKey;
        const townDetails = familyTownsStore.getTown(townKey);
        const latitude = parseFloat(townDetails.latitude);
        const longitude = parseFloat(townDetails.longitude);

        if (Number.isFinite(latitude) && Number.isFinite(longitude)) {
            const marker = googleMapsStore.allMarkers[townKey];
            if (marker) {
                googleMapsStore.map.setCenter(
                    new google.maps.LatLng(latitude, longitude)
                );
                googleMapsStore.map.setZoom(10);
                if (!marker.infowindow) {
                    marker.infowindow = new google.maps.InfoWindow({
                        content: marker.getTitle(),
                    });
                }
                marker.infowindow.open(googleMapsStore.map, marker);
            } else {
                console.error("No marker found for this town key:", townKey);
            }
        } else {
            console.error("Invalid latitude or longitude values", townDetails);
        }
    }
}
    */

// Close popover on outside click
function closePopoverOnClickOutside(event) {
    const popover = document.getElementById("customPopover");
    if (popover && !popover.contains(event.target)) {
        popover.style.display = "none";
    }
}

// Setup person link event listener with delegation
export function setupPersonLinkEventListener() {
    const tomSelect = rootPersonStore.tomSelect; // Utiliser rootPersonStore
    if (!tomSelect) {
        console.error("tomSelect is undefined");
        return;
    }

    document.addEventListener("click", (event) => {
        if (event.target.matches(".person-link")) {
            event.preventDefault();
            const personId = event.target.getAttribute("data-person-id");
            rootPersonStore.setTomSelectValue(personId); // Utiliser rootPersonStore

            const individualMapContainer = document.getElementById(
                "individualMapContainer"
            );
            const personDetails = document.getElementById("personDetails");
            if (individualMapContainer?.classList.contains("show")) {
                Offcanvas.getInstance(individualMapContainer).hide();
            }
            if (personDetails?.classList.contains("show")) {
                Offcanvas.getInstance(personDetails).hide();
            }
        }
    });
}

// Update UI after undo/redo actions
function updateUIAfterUndoRedo() {
    const root = rootPersonStore.root; // Utiliser rootPersonStore
    if (root) {
        const tomSelect = rootPersonStore.tomSelect; // Utiliser rootPersonStore
        if (tomSelect) {
            rootPersonStore.setTomSelectValue(root);
        } else {
            console.error("tomSelect is undefined");
        }
    }
}

// Setup undo/redo event listeners
function setupUndoRedoEventListeners() {
    const undoHandler = () => {
        rootPersonStore.undo(); // Utiliser rootPersonStore
        updateUIAfterUndoRedo();
    };
    const redoHandler = () => {
        rootPersonStore.redo(); // Utiliser rootPersonStore
        updateUIAfterUndoRedo();
    };
    const keydownHandler = (event) => {
        if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === "z") {
            event.preventDefault();
            undoHandler();
        }
        if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === "y") {
            event.preventDefault();
            redoHandler();
        }
    };

    document.getElementById("undoButton").addEventListener("click", undoHandler);
    document.getElementById("redoButton").addEventListener("click", redoHandler);
    document.addEventListener("keydown", keydownHandler);

    // Store references in WeakMap
    eventListenersMap.set(document.getElementById("undoButton"), undoHandler);
    eventListenersMap.set(document.getElementById("redoButton"), redoHandler);
    eventListenersMap.set(document, keydownHandler);
}

// Function to initialize file loading event listeners
const setupFileLoadingEventListeners = () => {
    // Demo file loading
    Array.from(document.getElementsByClassName("remote-file")).forEach(function (
        element
    ) {
        element.addEventListener("click", function (e) {
            loadGedcomFile(e.target.getAttribute("data-link"));
            return false;
        });
    });

    // User file loading
    document.getElementById("file").addEventListener("change", function (e) {
        loadGedcomFile(e.target.files);
    });
};

// Setup tab and UI event listeners
function setupTabAndUIEventListeners() {
    document.querySelectorAll(".dropdown-menu a").forEach((element) => {
        element.addEventListener("click", function () {
            const dropdownButton = this.closest(".dropdown");
            dropdownButton.classList.remove("show");
            dropdownButton.querySelector(".dropdown-menu").classList.remove("show");
        });
    });

    document
        .getElementById("fanParametersDisplay")
        .addEventListener("click", () => {
            const fanParametersOffcanvas = new Offcanvas(
                document.getElementById("fanParameters")
            );
            fanParametersOffcanvas.show();
        });

    document
        .getElementById("treeParametersDisplay")
        .addEventListener("click", () => {
            const treeParametersOffcanvas = new Offcanvas(
                document.getElementById("treeParameters")
            );
            treeParametersOffcanvas.show();
        });

    setupTooltips();
}

// Gestion du sélecteur d'individu
export const setupIndividualSelectorListener = () => {
    const individualSelect = document.getElementById("individual-select");
    if (individualSelect) {
        individualSelect.addEventListener("change", () => {
            const selectedRoot = individualSelect.value;
            rootPersonStore.setRoot(selectedRoot);
        });
    }
};

/**
 * Function to set up all event listeners.
 *
 * @param {AuthStore} authStore - Instance of the MobX store for authentication.
 */
let eventListenersInitialized = false;

export const setupAllEventListeners = (authStore) => {
    if (eventListenersInitialized) {
        return;
    }

    eventListenersInitialized = true;

    const initializeEventListeners = () => {
        document.addEventListener("click", (event) => {
            closePopoverOnClickOutside(event);
        });

        window.addEventListener("resize", () => {
            console.log("=== Browser Resize ===");
            console.log("Window dimensions:", window.innerWidth, "x", window.innerHeight);
        });

        // Configuration des écouteurs globaux
        setupIndividualSelectorListener();
        setupTabAndUIEventListeners();
        setupFileLoadingEventListeners();
        setupUndoRedoEventListeners();
        
        setTimeout(() => {
            setupResponsiveTabs();
            setupTabResizeListener();
        }, 0);

        setupProtectedFeatureEventListeners(authStore);
    };

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initializeEventListeners);
    } else {
        initializeEventListeners();
    }
};


/*
// Setup advanced modal
export function setupAdvancedModal(modalPath) {
    $('#advanced-parameters').click(function() {
        $('#advancedModal').load(modalPath, function() {
            $(this).modal('show');
        });
    });
}*/

================
File: assets/scripts/geneafan/listeners/protectedFeatures.js
================
import { fetchUserGedcomFiles } from '../gedcom/gedcomFileHandler.js'; 
import { handleUploadAndPost } from '../common/downloadManager.js';
import gedcomModalManager from '../gedcom/gedcomModalUtils';

/**
 * Function to set up event listeners for protected features via the MobX store.
 *
 * @param {AuthStore} authStoreInstance - Instance of the MobX store for authentication.
 */
export function setupProtectedFeatureEventListeners(authStoreInstance) {
    console.log("Setting up protected feature event listeners.");

    const protectedFeatureElements = document.querySelectorAll('.protected-feature');

    protectedFeatureElements.forEach(element => {
        element.addEventListener('click', async function (e) {
            e.preventDefault();
            const action = element.getAttribute('data-action');
            console.log(`Protected feature "${action}" clicked.`);

            authStoreInstance.accessFeature(
                async (userInfo) => {
                    console.log('User authenticated:', userInfo.id);  
                    switch (action) {
                        case 'fetchGedcomFiles':
                            try {
                                const files = await fetchUserGedcomFiles(userInfo.id);
                                if (files.length === 0) {
                                    window.alert('No files found for this user.');
                                } else {
                                    // Utiliser le nouveau gestionnaire modal
                                    gedcomModalManager.showModal(files, userInfo);
                                }
                            } catch (error) {
                                console.error('Error retrieving files:', error);
                                window.alert('An error occurred while retrieving your GEDCOM files.');
                            }
                            break;

                        case 'downloadPdf':
                            console.log("Accessing protected feature with userInfo:", userInfo);
                            handleUploadAndPost(rootPersonName, userInfo.email);
                            break;

                        default:
                            console.warn(`Unrecognized action: ${action}`);
                    }
                }, 
                () => {
                    // Case where the user is not authenticated
                    // Actions handled by AuthStore
                }
            );
        });
    });
}

================
File: assets/scripts/geneafan/listeners/responsiveTabs.js
================
// Function to calculate the total width of all given items (tabs)
const calculateItemWidth = (items) => 
    items.reduce((acc, item) => acc + item.getBoundingClientRect().width, 0); 
    // Uses reduce to sum up the width of each item

// Main function to adjust the tab layout based on screen size
export function setupResponsiveTabs() {
    const tabContainer = document.getElementById('tab-container'); // The main container for the tabs
    const moreDrawer = document.getElementById('more-drawer'); // The hidden "More" drawer for overflow tabs
    const moreTabBtn = document.getElementById('more-tab-btn'); // The button to toggle the "More" drawer
    const innerContainer = tabContainer.children[0]; // Inner container that holds visible tabs
    const innerTabsItems = [...tabContainer.querySelectorAll('li')]; // Array of all currently visible tab items
    const drawerTabsItems = [...moreDrawer.querySelectorAll('li')]; // Array of all items in the "More" drawer
    const totalWidth = calculateItemWidth(innerTabsItems); // Total width of visible tab items
    const containerWidth = tabContainer.getBoundingClientRect().width; // Width of the tab container

    // Check if the total width of tabs exceeds the container's width
    if (totalWidth > containerWidth) {
        // Move tabs from the visible area to the "More" drawer until they fit
        while (calculateItemWidth(innerTabsItems) > tabContainer.getBoundingClientRect().width) {
            const lastItem = innerTabsItems.pop(); // Remove the last visible tab
            moreDrawer.prepend(lastItem); // Add it to the beginning of the "More" drawer
        }

        moreTabBtn.style.visibility = 'visible'; // Show the "More" button
        return; // Exit the function as the overflow handling is complete
    }

    const distance = tabContainer.offsetWidth - innerContainer.offsetWidth; // Remaining space in the container

    // If there are items in the "More" drawer
    if (drawerTabsItems.length) {
        let firstElementWidth = drawerTabsItems[0].getBoundingClientRect().width; // Width of the first hidden tab
        let isNextStep = distance > firstElementWidth; // Check if there's enough space to move it back
        if (!isNextStep) return; // Exit if there's not enough space

        // Move items from the "More" drawer back to the visible area until space runs out
        while (isNextStep) {
            const firstItem = drawerTabsItems.shift(); // Remove the first hidden tab
            innerContainer.appendChild(firstItem); // Add it to the visible area
            innerTabsItems.push(firstItem); // Track it in the visible tabs array
            firstElementWidth = firstItem.getBoundingClientRect().width; // Update the width of the new first hidden tab
            isNextStep = (tabContainer.offsetWidth - innerContainer.offsetWidth > firstElementWidth) && drawerTabsItems.length; 
            // Repeat if there's still space and items left in the drawer
        }

        // If the "More" drawer is empty, hide the "More" button and drawer
        if (!drawerTabsItems.length) {
            moreTabBtn.style.visibility = 'hidden';
            moreDrawer.style.visibility = 'hidden';
        }
    }
}

// Function to detect and handle clicks outside specific elements (used to hide the "More" drawer when clicking outside)
function clickOutsideListener(elements, callback) {
    function handleClickOutside(event) {
        event.stopPropagation(); // Stop the event from propagating further
        if (!elements.some(element => element.contains(event.target))) callback(); // If click is outside, trigger callback
    }

    document.addEventListener('click', handleClickOutside); // Listen for clicks on the document

    return () => {
        document.removeEventListener('click', handleClickOutside); // Remove listener when no longer needed
    };
}

// Function to handle tab resize and toggle the "More" drawer visibility
export function setupTabResizeListener() {
    const moreTabBtn = document.getElementById('more-tab-btn'); // Button to toggle the "More" drawer
    const moreDrawer = document.getElementById('more-drawer'); // The hidden "More" drawer

    // Set up click listener to hide the "More" drawer when clicking outside of it
    clickOutsideListener([moreDrawer, moreTabBtn], () => {
        moreDrawer.style.visibility = 'hidden'; // Hide the drawer
    });

    // Toggle the visibility of the "More" drawer on button click
    moreTabBtn.addEventListener('click', () => {
        const visibility = window.getComputedStyle(moreDrawer).visibility; // Check current visibility
        moreDrawer.style.visibility = visibility === 'hidden' ? 'visible' : 'hidden'; // Toggle visibility
    });

    // Listen for window resize events and re-adjust the tab layout
    window.addEventListener('resize', setupResponsiveTabs);
}

================
File: assets/scripts/geneafan/tabs/ancestorsMap/ancestorsMapManager.js
================
import gedcomDataStore from '../../gedcom/gedcomDataStore';
import { reaction } from '../../common/stores/mobx-config.js';

export class AncestorsMapManager {
    constructor() {
        this.map = null;
        this.markers = [];
        this.birthData = [];
        this.filters = {
            paternal: true,
            maternal: true
        };
        this.isPlaying = false;
        this.playInterval = null;
        
        this.generationColors = {
            0: '#1e40af',
            1: '#3b82f6',
            2: '#60a5fa',
            3: '#93c5fd',
            4: '#bfdbfe'
        };
    }

    createPieChart(generations, total, currentYear) {
        const size = 100;
        const center = size / 2;
        const radius = (size / 2) - 2;
        
        // Pour les lieux avec une seule personne
        const singleGeneration = Object.entries(generations).length === 1;
        if (singleGeneration) {
            const [[gen, births]] = Object.entries(generations);
            const count = births.filter(b => b.birthYear <= currentYear).length;
            const isFuture = count === 0;

            return `
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size} ${size}" class="birth-pie-chart">
                    <circle 
                        cx="${center}" 
                        cy="${center}" 
                        r="${radius}"
                        fill="${this.generationColors[gen]}"
                        opacity="${isFuture ? 0.2 : 1}"
                        stroke="white"
                        stroke-width="1"
                    />
                </svg>`;
        }

        // Pour les lieux avec plusieurs personnes
        let startAngle = 0;
        const paths = Object.entries(generations)
            .sort(([a], [b]) => parseInt(a) - parseInt(b))
            .map(([gen, births]) => {
                const count = births.filter(b => b.birthYear <= currentYear).length;
                const percentage = births.length / total;
                const angle = percentage * 360;
                const endAngle = startAngle + angle;
                
                // Convertir les angles en radians pour les calculs
                const startRad = (startAngle - 90) * Math.PI / 180;
                const endRad = (endAngle - 90) * Math.PI / 180;

                const x1 = center + radius * Math.cos(startRad);
                const y1 = center + radius * Math.sin(startRad);
                const x2 = center + radius * Math.cos(endRad);
                const y2 = center + radius * Math.sin(endRad);

                const largeArcFlag = angle > 180 ? 1 : 0;
                const path = `
                    M ${center},${center}
                    L ${x1},${y1}
                    A ${radius},${radius} 0 ${largeArcFlag},1 ${x2},${y2}
                    Z
                `;

                startAngle += angle;
                const isFuture = count === 0;

                return `
                    <path 
                        d="${path}" 
                        fill="${this.generationColors[gen]}"
                        opacity="${isFuture ? 0.2 : 1}"
                        stroke="white"
                        stroke-width="1"
                    >
                        <title>Génération ${gen}: ${count}/${births.length} personne(s)</title>
                    </path>`;
            }).join('');

        return `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size} ${size}" class="birth-pie-chart">
                ${paths}
            </svg>`;
    }

    static async initialize() {
        console.log('Initializing AncestorsMapManager');
        
        const manager = new AncestorsMapManager();
        
        // Initialisation de la carte une fois que l'onglet est visible
        const tab = document.getElementById('tab6');
        if (tab) {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(async entry => {
                    if (entry.isIntersecting) {
                        console.log('Ancestors map tab is visible, initializing map...');
                        
                        // D'abord charger Leaflet
                        await manager.loadLeaflet();
                        
                        // Puis initialiser la carte
                        await manager.initializeMap();
                        manager.setupEventListeners();
    
                        // Ajouter la réaction après l'initialisation de la carte
                        gedcomDataStore.addReactionDisposer(
                            'AncestorsMapManager-HierarchyReaction',
                            () => gedcomDataStore.getHierarchy(),
                            (hierarchy) => {
                                console.log("Réaction à la hiérarchie", hierarchy);
                                if (hierarchy) {
                                    manager.processHierarchy(hierarchy);
                                }
                            },
                            { fireImmediately: true }
                        );
                        
                        observer.disconnect();
                    }
                });
            });
            observer.observe(tab);
        }
    
        return manager;
    }

    async loadLeaflet() {
        // Ne charger Leaflet qu'une seule fois
        if (window.L) return;

        // Charger le CSS de Leaflet
        const linkElement = document.createElement('link');
        linkElement.rel = 'stylesheet';
        linkElement.href = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css';
        document.head.appendChild(linkElement);

        // Charger le JavaScript de Leaflet
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js';
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    async initializeMap() {
        // Initialiser la carte Leaflet
        this.map = L.map('ancestors-map').setView([46.603354, 1.888334], 6);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(this.map);

        this.addLegend();
    }

    processHierarchy(hierarchy) {
        if (!hierarchy) {
            console.log('Pas de hiérarchie disponible');
            return;
        }
        console.log('Traitement de la hiérarchie:', hierarchy);
        
        this.birthData = [];
        const processNode = (node) => {
            if (!node) return;
            
            console.log('Traitement du nœud:', node);
            
            // Déterminer la ligne (paternelle/maternelle)
            const sosaNumber = node.sosa;
            const isPaternal = sosaNumber % 2 === 0;
            const line = isPaternal ? 'paternal' : 'maternal';
            
            // Si on a un lieu de naissance avec des coordonnées
            const birthPlace = node.stats?.demography?.birthInfo?.place;
            if (birthPlace?.coordinates?.latitude) {
                console.log('Ajout du lieu de naissance:', birthPlace);
                
                this.birthData.push({
                    id: node.id,
                    name: `${node.name} ${node.surname}`,
                    birthYear: parseInt(node.birthYear),
                    generation: node.generation,
                    sosa: sosaNumber,
                    line: line,
                    location: {
                        lat: birthPlace.coordinates.latitude,
                        lng: birthPlace.coordinates.longitude,
                        name: node.fanBirthPlace,
                        departement: birthPlace.departement
                    }
                });
            } else {
                console.log('Pas de coordonnées pour:', node.name, node.surname);
            }
            
            // Traiter récursivement les parents
            if (node.children) {
                node.children.forEach(processNode);
            }
        };
        
        processNode(hierarchy);
        
        console.log('Données de naissance traitées:', this.birthData);
        
        // Mettre à jour la plage temporelle et la carte
        this.updateTimeRange();
        this.updateMap(parseInt(document.getElementById('year-slider').value));
    }

    updateTimeRange() {
        const years = this.birthData.map(d => d.birthYear).filter(y => !isNaN(y));
        if (years.length > 0) {
            const minYear = Math.min(...years);
            const maxYear = Math.max(...years);

            const slider = document.getElementById('year-slider');
            slider.min = minYear;
            slider.max = maxYear;
            slider.value = minYear;

            document.getElementById('current-year').textContent = minYear;
            document.getElementById('max-year').textContent = maxYear;
        }
    }

    setupEventListeners() {
        // Filtres des lignes paternelle/maternelle
        document.getElementById('paternal-line')?.addEventListener('change', (e) => {
            this.filters.paternal = e.target.checked;
            this.updateMap(parseInt(document.getElementById('year-slider').value));
        });

        document.getElementById('maternal-line')?.addEventListener('change', (e) => {
            this.filters.maternal = e.target.checked;
            this.updateMap(parseInt(document.getElementById('year-slider').value));
        });

        // Contrôles temporels
        const slider = document.getElementById('year-slider');
        slider?.addEventListener('input', (e) => {
            const year = parseInt(e.target.value);
            document.getElementById('current-year').textContent = year;
            this.updateMap(year);
        });

        // Boutons de contrôle
        document.getElementById('play-button')?.addEventListener('click', () => this.togglePlay());
        document.getElementById('reset-button')?.addEventListener('click', () => this.reset());
    }

    updateMap(year) {
        // Nettoyer les marqueurs existants
        this.markers.forEach(marker => marker.remove());
        this.markers = [];

        // Filtrer les données selon les lignes sélectionnées
        const filteredData = this.birthData.filter(person => {
            if (person.line === 'paternal' && !this.filters.paternal) return false;
            if (person.line === 'maternal' && !this.filters.maternal) return false;
            return true;
        });

        // Regrouper par lieu
        const birthsByLocation = new Map();
        filteredData.forEach(person => {
            const key = `${person.location.lat}-${person.location.lng}`;
            if (!birthsByLocation.has(key)) {
                birthsByLocation.set(key, {
                    location: person.location,
                    births: [],
                    generations: {}
                });
            }

            const locationData = birthsByLocation.get(key);
            locationData.births.push(person);

            if (!locationData.generations[person.generation]) {
                locationData.generations[person.generation] = [];
            }
            locationData.generations[person.generation].push(person);
        });

        // Créer les marqueurs
        birthsByLocation.forEach((data, key) => {
            const { location, births, generations } = data;
            const iconSize = births.length === 1 ? 40 : Math.min(40 + (births.length * 10), 80);

            const svgString = this.createPieChart(generations, births.length, year);
            const icon = L.divIcon({
                html: svgString,
                className: 'custom-div-icon',
                iconSize: [iconSize, iconSize],
                iconAnchor: [iconSize/2, iconSize/2]
            });

            const marker = L.marker([location.lat, location.lng], { icon });
            
            // Ajouter le contenu de la popup
            const popupContent = `
                <div class="map-popup">
                    <h3>${location.name}</h3>
                    ${location.departement ? `<p>(${location.departement})</p>` : ''}
                    <p>${births.filter(p => p.birthYear <= year).length}/${births.length} personne(s)</p>
                    ${Object.entries(generations)
                        .sort(([a], [b]) => parseInt(a) - parseInt(b))
                        .map(([gen, persons]) => `
                            <div style="color: ${this.generationColors[gen]}">
                                Génération ${gen}: ${persons.filter(p => p.birthYear <= year).length}/${persons.length} personne(s)
                            </div>
                        `).join('')}
                    <hr>
                    ${births
                        .sort((a, b) => a.birthYear - b.birthYear)
                        .map(person => `
                            <div style="color: ${this.generationColors[person.generation]}; opacity: ${person.birthYear <= year ? 1 : 0.5}">
                                ${person.name} (${person.birthYear})
                                - Sosa ${person.sosa}
                                ${person.birthYear > year ? ' - à venir' : ''}
                            </div>
                        `).join('')}
                </div>
            `;

            marker.bindPopup(popupContent);
            marker.addTo(this.map);
            this.markers.push(marker);
        });
    }

    addLegend() {
        const legend = L.control({ position: 'bottomright' });
        legend.onAdd = () => {
            const div = L.DomUtil.create('div', 'legend');
            div.style.background = 'white';
            div.style.padding = '10px';
            div.style.borderRadius = '4px';
            div.style.border = '1px solid #ccc';
            div.innerHTML = `
                <h4 style="margin: 0 0 8px 0">Générations</h4>
                ${Object.entries(this.generationColors)
                    .map(([gen, color]) => `
                        <div style="margin: 4px 0">
                            <span style="display: inline-block; width: 12px; height: 12px; background: ${color}; border-radius: 50%; margin-right: 5px"></span>
                            Génération ${gen}
                        </div>
                    `).join('')}
                <hr>
                <div style="font-size: 0.8em">
                    <div>Sosa pairs : ligne paternelle</div>
                    <div>Sosa impairs : ligne maternelle</div>
                </div>
            `;
            return div;
        };
        legend.addTo(this.map);
    }

    togglePlay() {
        const button = document.getElementById('play-button');
        const slider = document.getElementById('year-slider');

        if (this.isPlaying) {
            clearInterval(this.playInterval);
            button.textContent = '▶️ Lecture';
        } else {
            this.playInterval = setInterval(() => {
                const currentValue = parseInt(slider.value);
                if (currentValue >= parseInt(slider.max)) {
                    clearInterval(this.playInterval);
                    button.textContent = '▶️ Lecture';
                    this.isPlaying = false;
                    return;
                }
                slider.value = currentValue + 1;
                document.getElementById('current-year').textContent = slider.value;
                this.updateMap(parseInt(slider.value));
            }, 1000);
            button.textContent = '⏸️ Pause';
        }
        this.isPlaying = !this.isPlaying;
    }

    reset() {
        if (this.isPlaying) {
            clearInterval(this.playInterval);
            document.getElementById('play-button').textContent = '▶️ Lecture';
            this.isPlaying = false;
        }
        const slider = document.getElementById('year-slider');
        slider.value = slider.min;
        document.getElementById('current-year').textContent = slider.min;
        this.updateMap(parseInt(slider.min));
    }
}

export default AncestorsMapManager;

================
File: assets/scripts/geneafan/tabs/familyMap/googleMapManager.js
================
import { Loader } from "@googlemaps/js-api-loader";
import { MarkerClusterer } from "@googlemaps/markerclusterer";
import { googleMapsStore } from './googleMapsStore.js';
import gedcomDataStore from '../../gedcom/stores/gedcomDataSore.js';
import { autorun } from 'mobx';

class GoogleMapManager {
    constructor() {
        this.initialized = false;
        this.loader = null;
        this.disposers = new Set();

        console.log('🔍 GoogleMapManager: Initialisation du constructor');

        // Amélioration de l'autorun pour une meilleure réactivité
        const hierarchyDisposer = autorun(() => {
            try {
                const hierarchy = gedcomDataStore.getHierarchy();
                console.log('🔄 Autorun déclenché pour la hiérarchie:', 
                    hierarchy ? 'présente' : 'absent');

                // On vérifie que la carte est initialisée et qu'on a une hiérarchie
                if (this.initialized && hierarchy) {
                    console.log('✨ Mise à jour de la carte avec la nouvelle hiérarchie');
                    this.updateMapWithHierarchy(hierarchy);
                } else {
                    console.log('⏳ En attente de l\'initialisation de la carte ou de la hiérarchie',
                        {mapInitialized: this.initialized, hasHierarchy: !!hierarchy});
                }
            } catch (error) {
                console.error('❌ Erreur lors du traitement de la hiérarchie:', error);
            }
        }, {
            name: 'HierarchyAutorun',
            onError: (error) => {
                console.error('🚨 Erreur critique dans l\'autorun:', error);
            }
        });

        this.disposers.add(hierarchyDisposer);
    }

    // Nouvelle méthode pour gérer la mise à jour de la carte
    async updateMapWithHierarchy(hierarchy) {
        try {
            console.group('📍 Mise à jour de la carte');
            
            // Vérification que la carte est prête
            if (!googleMapsStore.map) {
                console.warn('⚠️ La carte n\'est pas encore prête');
                console.groupEnd();
                return;
            }

            // Traitement de la hiérarchie et mise à jour des marqueurs
            console.log('🔄 Traitement de la hiérarchie...');
            await googleMapsStore.processHierarchy(hierarchy);
            
            console.log('✅ Mise à jour terminée');
            console.groupEnd();
        } catch (error) {
            console.error('❌ Erreur lors de la mise à jour de la carte:', error);
            console.groupEnd();
            throw error;
        }
    }

    async initialize() {
        if (this.initialized) return;

        try {
            console.group('🚀 Initialisation de Google Maps');
            
            this.loader = new Loader({
                apiKey: googleMapsStore.apiKey,
                version: "weekly",
                libraries: []
            });

            await this.loader.load();
            this.initialized = true;

            // Initialiser la carte
            await this.initializeMap("familyMap");
            this.setupEventListeners();

            // Vérifier si une hiérarchie existe déjà et la traiter
            const currentHierarchy = gedcomDataStore.getHierarchy();
            if (currentHierarchy) {
                await this.updateMapWithHierarchy(currentHierarchy);
            }

            console.log('✅ Initialisation terminée avec succès');
            console.groupEnd();
        } catch (error) {
            console.error("❌ Échec de l'initialisation:", error);
            console.groupEnd();
            throw error;
        }
    }

    async initializeMap(containerId, options = {}) {
        if (!this.initialized) {
            console.error("Google Maps not initialized. Call initialize() first");
            return;
        }

        const container = document.getElementById(containerId);
        if (!container) {
            console.error(`Container ${containerId} not found`);
            return;
        }

        const defaultOptions = {
            zoom: 6.2,
            center: { lat: 46.2276, lng: 2.2137 },
            styles: googleMapsStore.getMapStyle(),
            streetViewControl: false,
            zoomControl: true,
            zoomControlOptions: {
                position: google.maps.ControlPosition.TOP_RIGHT
            },
            fullscreenControl: true,
            fullscreenControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
            }
        };

        const mapOptions = { ...defaultOptions, ...options };
        googleMapsStore.map = new google.maps.Map(container, mapOptions);
        googleMapsStore.markerCluster = new MarkerClusterer({ map: googleMapsStore.map });
        googleMapsStore.initializeAncestorsMap();

        return googleMapsStore.map;
    }

    setupEventListeners() {
        // Gestion de la carte individuelle uniquement
        const offcanvasElement = document.getElementById("individualMap");
        if (offcanvasElement) {
            offcanvasElement.addEventListener("shown.bs.offcanvas", () => {
                this.initializeMap("individualMap");
                this.adjustMapHeight();
            });
        }

        // Gérer la réinitialisation de la carte lors du changement d'onglet
        const tabElement = document.querySelector('a[href="#tab2"]');
        if (tabElement) {
            tabElement.addEventListener('shown.bs.tab', () => {
                console.log('🔄 Tab change detected - Map tab is now active');
                if (googleMapsStore.map) {
                    console.log('🗺️ Triggering map resize and recentering');
                    google.maps.event.trigger(googleMapsStore.map, 'resize');
                    googleMapsStore.centerMapOnMarkers();
                    console.log('✅ Map display refreshed and centered');
                } else {
                    console.warn('⚠️ Map instance not found during tab activation');
                }
            });
        }
    }

    adjustMapHeight() {
        const offCanvas = document.getElementById("individualMap");
        const offCanvasHeader = document.querySelector("#individualMap .offcanvas-header");
        const mapId = document.getElementById("mapid");

        if (offCanvas && offCanvasHeader && mapId) {
            const offCanvasHeight = offCanvas.clientHeight;
            const headerHeight = offCanvasHeader.clientHeight;
            const mapHeight = offCanvasHeight - headerHeight;
            mapId.style.height = `${mapHeight}px`;
        }
    }    
    
    cleanup() {
        this.disposers.forEach(disposer => disposer());
        this.disposers.clear();
    }
}

export const googleMapManager = new GoogleMapManager();

================
File: assets/scripts/geneafan/tabs/familyMap/googleMapsStore.js
================
class GoogleMapsStore {
    constructor() {
        this.map = null;
        this.activeMarkers = {};
        this.markerCluster = null;
        this.infoWindow = null;
        this.currentYear = null;
        this.birthData = [];
        // La timeline est activée par défaut et ne sera pas redéfinie plus tard
        this.isTimelineActive = true;

        this.apiKey = "AIzaSyDu9Qz5YXRF6CTJ4vf-0s89BaVq_eh13YE";

        this.statistics = {
            total: 0,
            withLocation: 0,
            withoutLocation: 0,
            generations: {},
            categories: {
                withCoordinates: 0,
                noPlace: 0,
                noCoordinates: 0,
                emptyName: 0,
                unknownParent: 0
            }
        };

        // Propriétés pour les fonctionnalités ancestrales - 10 générations
        this.generationColors = {
            0: '#1e3a8a', // blue-900
            1: '#1e40af', // blue-800
            2: '#1d4ed8', // blue-700
            3: '#2563eb', // blue-600
            4: '#3b82f6', // blue-500
            5: '#60a5fa', // blue-400
            6: '#93c5fd', // blue-300
            7: '#bfdbfe', // blue-200
            8: '#dbeafe', // blue-100
            9: '#eff6ff'  // blue-50
        };

        // Collection de logs pour le debug
        this.logsCollection = {
            markers: [],
            errors: [],
            warnings: [],
            stats: {
                totalMarkers: 0,
                successfulMarkers: 0,
                failedMarkers: 0,
                generationCounts: {}
            }
        };
    }

    async initMap(elementId, options = {}) {
        if (this.map) return;
    
        try {
            const defaultOptions = {
                zoom: 6.2,
                center: { lat: 46.2276, lng: 2.2137 },
                styles: this.getMapStyle(),
                streetViewControl: false,
                zoomControl: true,
                zoomControlOptions: { position: google.maps.ControlPosition.TOP_RIGHT },
                fullscreenControl: true,
                fullscreenControlOptions: { position: google.maps.ControlPosition.TOP_CENTER }
            };
    
            const mapElement = document.getElementById(elementId);
            if (!mapElement) {
                throw new Error(`Element with id ${elementId} not found`);
            }
    
            // Initialiser la carte
            this.map = new google.maps.Map(mapElement, { ...defaultOptions, ...options });
    
            // Initialiser l'InfoWindow maintenant que Google Maps est chargé
            this.infoWindow = new google.maps.InfoWindow({
                maxWidth: 300
            });
    
            // Initialiser le cluster
            this.markerCluster = new google.maps.MarkerClusterer({ 
                map: this.map,
                renderer: {
                    render: ({ count, position, markers }) => {
                        const paternalCount = markers.filter(m => 
                            this.#determineBranchFromSosa(m.birthData?.[0]?.sosa) === 'paternal'
                        ).length;
                        const maternalCount = markers.filter(m => 
                            this.#determineBranchFromSosa(m.birthData?.[0]?.sosa) === 'maternal'
                        ).length;
                        
                        let color = paternalCount === markers.length ? '#3b82f6' : 
                                   maternalCount === markers.length ? '#ec4899' : 
                                   '#8b5cf6';
            
                        return new google.maps.Marker({
                            position,
                            icon: {
                                path: google.maps.SymbolPath.CIRCLE,
                                fillColor: color,
                                fillOpacity: 0.9,
                                strokeWeight: 1,
                                strokeColor: color,
                                scale: Math.min(count * 3, 20)
                            },
                            label: {
                                text: String(count),
                                color: 'white',
                                fontSize: '12px'
                            },
                            zIndex: Number(google.maps.Marker.MAX_ZINDEX) + count,
                        });
                    }
                }
            });
    
            this.#addMapControls();
            this.#setupMapListeners();
            this.#recordState();
    
            console.log('✅ Map and components initialized successfully');
            return this.map;
        } catch (error) {
            console.error('❌ Error initializing map:', error);
            throw error;
        }
    }

    processHierarchy(hierarchy) {
        if (!hierarchy) {
            console.error('❌ Pas de hiérarchie disponible');
            return;
        }
    
        // Réinitialiser les données
        this.birthData = [];
        this.statistics = {
            total: 0,
            withLocation: 0,
            withoutLocation: 0,
            generations: {},
            categories: {
                withCoordinates: 0,
                noPlace: 0,
                noCoordinates: 0,
                emptyName: 0,
                unknownParent: 0
            }
        };
    
        const processNode = (node, depth = 0) => {
            if (!node) {
                console.warn(`⚠️ Nœud invalide au niveau ${depth}`);
                return;
            }
    
            const indent = '  '.repeat(depth);
            const demography = node.stats?.demography;
            const birthInfo = demography?.birthInfo;
    
            this.statistics.total++;
    
            if (birthInfo?.place?.coordinates?.latitude) {
                this.birthData.push({
                    id: node.id,
                    name: `${node.name} ${node.surname}`,
                    birthYear: node.birthYear,
                    generation: node.generation || 0,
                    sosa: node.sosa || 1,
                    location: {
                        lat: birthInfo.place.coordinates.latitude,
                        lng: birthInfo.place.coordinates.longitude,
                        name: node.fanBirthPlace,
                        departement: birthInfo.place.departement
                    }
                });
    
                this.statistics.withLocation++;
                this.statistics.categories.withCoordinates++;
    
                // Mise à jour des statistiques par génération
                const generation = node.generation || 0;
                this.statistics.generations[generation] = (this.statistics.generations[generation] || 0) + 1;
            } else {
                // Ne pas afficher d'alerte si le nom et le prénom sont vides
                if (!node.name?.trim() && !node.surname?.trim()) {
                    this.statistics.categories.emptyName++;
                    return;
                }

                // Pour les enregistrements avec nom/prénom
                if (!birthInfo?.place) {
                    this.statistics.categories.noPlace++;
                } else if (!birthInfo.place.coordinates) {
                    this.statistics.categories.noCoordinates++;
                }
                
                // Initialiser le tableau des lieux manquants si nécessaire
                if (!this._missingLocationsLog) {
                    this._missingLocationsLog = [];
                }
                
                // Ajouter l'entrée au log
                this._missingLocationsLog.push({
                    'Nom': `${node.name || ''} ${node.surname || ''}`.trim(),
                    'Génération': node.generation || 0,
                    'N° Sosa': node.sosa || '',
                    'Année': node.birthYear || '',
                    'Statut': !birthInfo?.place ? 'Lieu manquant' : 
                              !birthInfo.place.coordinates ? 'Coordonnées manquantes' : 
                              'Autre problème'
                });
            }
    
            // Traiter récursivement les enfants
            if (node.children && Array.isArray(node.children)) {
                node.children.forEach(child => processNode(child, depth + 1));
            }
        };
    
        // Traiter la hiérarchie
        processNode(hierarchy);
        this.statistics.withoutLocation = this.statistics.total - this.statistics.withLocation;

        // Afficher le tableau des lieux manquants après le traitement complet
        if (this._missingLocationsLog?.length > 0) {
            console.log('📍 Liste des individus sans géolocalisation :');
            console.table(this._missingLocationsLog);
            // Réinitialiser le log pour le prochain traitement
            this._missingLocationsLog = [];
        }

        // Afficher les statistiques
        this.displayProcessingLogs();
        
        // Mettre à jour et afficher les marqueurs
        this.activateMapMarkers();
        
        // Centrer la carte sur les nouveaux marqueurs
        this.centerMapOnMarkers();
    }

// Gestion des marqueurs standard
addMarker(key, town) {
    const latitude = parseFloat(town.latitude);
    const longitude = parseFloat(town.longitude);

    if (this.isValidCoordinate(latitude) && this.isValidCoordinate(longitude)) {
        const marker = new google.maps.Marker({
            position: { lat: latitude, lng: longitude },
            title: `${town.townDisplay || town.town || "Unknown"}, ${town.country || "Unknown"}`,
        });

        marker.addListener('click', () => {
            this.map.setZoom(9);
            this.map.setCenter(marker.getPosition());
        });

        this.allMarkers[key] = marker;
        marker.location = town;
    }
}

// Méthode pour créer un marqueur d'ancêtre
createAncestorMarker(location, births, generations) {
    this.collectLog('marker', { location, births, generations });

    const lat = parseFloat(location.lat);
    const lng = parseFloat(location.lng);

    if (isNaN(lat) || isNaN(lng)) {
        this.collectLog('error', {
            isMarker: true,
            message: 'Coordonnées invalides',
            details: { lat, lng, location }
        });
        return null;
    }

    try {
        const marker = new google.maps.Marker({
            position: { lat, lng },
            map: this.map,
            birthData: births, // Important : stocker les données de naissance
            icon: {
                path: google.maps.SymbolPath.CIRCLE,
                fillColor: this.#getBranchColor(births),
                fillOpacity: 1,
                strokeWeight: 1,
                strokeColor: '#1e40af',
                scale: births.length === 1 ? 8 : Math.min(8 + (births.length * 0.5), 12)
            }
        });

        marker.addListener('click', () => {
            if (!this.infoWindow) {
                this.infoWindow = new google.maps.InfoWindow({
                    maxWidth: 400
                });
            }
            this.showAncestorInfoWindow(marker, location, births, generations);
        });

        return marker;
    } catch (error) {
        this.collectLog('error', {
            isMarker: true,
            message: 'Erreur création marqueur',
            details: error.toString()
        });
        return null;
    }
}

generateInfoWindowContent(data) {
    const { location, births, generations } = data;
    return `
            <div class="info-window">
                <h3>${location.name}</h3>
                ${location.departement ? `<p class="departement">${location.departement}</p>` : ''}
                
                <div class="generations-summary">
                    ${Object.entries(generations)
            .sort(([a], [b]) => parseInt(a) - parseInt(b))
            .map(([gen, persons]) => {
                const count = this.isTimelineActive ?
                    persons.filter(p => p.birthYear <= this.currentYear).length :
                    persons.length;
                return `
                                <div class="generation-row" style="border-left: 3px solid ${this.generationColors[gen]}">
                                    <span>Génération ${gen}</span>
                                    <strong>${count}</strong>
                                </div>`;
            }).join('')}
                </div>

                <div class="persons-list">
                    ${births
            .sort((a, b) => a.birthYear - b.birthYear)
            .filter(person => !this.isTimelineActive || person.birthYear <= this.currentYear)
            .map(person => `
                            <div class="person-item" 
                                style="border-left: 3px solid ${this.generationColors[person.generation]}">
                                <strong>${person.name}</strong>
                                <span>${person.birthYear} • Sosa ${person.sosa}</span>
                            </div>
                        `).join('')}
                </div>
            </div>`;
}

showAncestorInfoWindow(marker, location, births, generations) {
    console.log('💡 Debug showAncestorInfoWindow:', {
        location,
        births,
        generations,
        timelineActive: this.isTimelineActive,
        currentYear: this.currentYear
    });

    const pieChartSvg = this.createPieChartSVG(generations, births.length);

    const filteredBirths = births.filter(person => 
        !this.isTimelineActive || person.birthYear <= this.currentYear
    );

    const content = `
        <div class="info-window">
            <div class="flex flex-col space-y-4">
                <div class="text-center">
                    <h3 class="text-lg font-semibold">${location.name}</h3>
                    ${location.departement ? 
                        `<p class="text-sm text-gray-600">${location.departement}</p>` : ''}
                    
                    <p class="mt-2 text-sm">
                        <span class="font-medium">${births.length}</span> naissances dans ce lieu
                    </p>
                    ${this.#getBranchesIndicator(births)} 
                </div>

                <!-- Piechart et légende côte à côte -->
                <div class="flex gap-4 justify-center items-start">
                    <div class="w-32 h-32" style="min-width: 128px;">
                        ${pieChartSvg}
                    </div>
                    
                    <div class="flex flex-col gap-2">
                        ${Object.entries(generations)
                            .sort(([a], [b]) => parseInt(a) - parseInt(b))
                            .map(([gen, persons]) => {
                                // Important : persons est un tableau
                                const count = persons ? persons.length : 0;
                                return `
                                    <div class="flex items-center gap-2">
                                        <div class="w-3 h-3" style="background-color: ${this.generationColors[gen]}"></div>
                                        <span class="text-sm">
                                            Gén. ${gen} 
                                            <span class="font-medium">(${count})</span>
                                        </span>
                                    </div>`;
                            }).join('')}
                    </div>
                </div>

                <!-- Liste des personnes -->
                <div class="mt-4">
                    <h4 class="font-medium mb-2">Personnes nées dans ce lieu :</h4>
                    <div class="space-y-2 max-h-48 overflow-y-auto">
                        ${births
                            .sort((a, b) => a.birthYear - b.birthYear)
                            .map(person => `
                                <div class="flex items-center gap-2 p-2 bg-gray-50 rounded">
                                    <div class="w-2 h-full" 
                                         style="background-color: ${this.generationColors[person.generation]}">
                                    </div>
                                    <div class="flex-grow">
                                        <div class="font-medium" 
                                             style="color: ${this.#determineBranchFromSosa(person.sosa) === 'paternal' ? 
                                                           '#3b82f6' : '#ec4899'}">
                                            ${person.name}
                                        </div>
                                        <div class="text-sm text-gray-600">
                                            ${person.birthYear} • Sosa ${person.sosa}
                                        </div>
                                    </div>
                                </div>
                            `).join('')}
                    </div>
                </div>
            </div>
        </div>`;

    if (this.infoWindow) {
        this.infoWindow.setContent(content);
        this.infoWindow.open({
            anchor: marker,
            map: this.map
        });
    }
}

// Activer les marqueurs sur la carte
activateMapMarkers(individualTownKeys = null) {
    if (!this.map) {
        console.log('Pas de carte disponible');
        return;
    }

    // Nettoyer les marqueurs existants d'abord
    this.clearCurrentMarkers();

    if (this.isTimelineActive) {
        const locationGroups = new Map();

        // Grouper les données par localisation
        this.birthData.forEach(birth => {
            if (!birth.location?.lat || !birth.location?.lng) {
                console.warn('⚠️ Birth location missing coordinates:', birth);
                return;
            }

            const key = `${birth.location.lat}-${birth.location.lng}`;
            if (!locationGroups.has(key)) {
                locationGroups.set(key, {
                    location: birth.location,
                    births: [],
                    generations: {}
                });
            }

            const group = locationGroups.get(key);
            group.births.push(birth);

            // S'assurer que le tableau pour cette génération existe
            if (!group.generations[birth.generation]) {
                group.generations[birth.generation] = [];
            }
            // Ajouter la naissance à sa génération
            group.generations[birth.generation].push(birth);
        });

        // Créer les marqueurs
        locationGroups.forEach((data, key) => {
            console.log('📍 Création marqueur pour', key, 'avec données:', {
                location: data.location,
                totalBirths: data.births.length,
                generations: Object.entries(data.generations)
                    .reduce((acc, [gen, births]) => ({
                        ...acc,
                        [gen]: births.length
                    }), {})
            });

            const marker = this.createAncestorMarker(
                data.location,
                data.births,
                data.generations
            );
            if (marker) {
                this.activeMarkers[key] = marker;
            }
        });
    }

    // Mettre à jour le cluster
    const validMarkers = Object.values(this.activeMarkers).filter(Boolean);
    if (this.markerCluster && validMarkers.length > 0) {
        this.markerCluster.clearMarkers();
        this.markerCluster.addMarkers(validMarkers);
    }

    // Centrer la carte sur les marqueurs actifs
    this.centerMapOnMarkers();
}

clearCurrentMarkers() {
    // Retirer tous les marqueurs actifs de la carte
    Object.values(this.activeMarkers).forEach(marker => {
        if (marker) {
            marker.setMap(null);
        }
    });
    this.activeMarkers = {};

    // Vider le cluster si présent
    if (this.markerCluster) {
        this.markerCluster.clearMarkers();
    }
}

createPieChartSVG(generations, total) {
    const size = 128; // Taille fixe pour l'infoWindow
    const center = size / 2;
    const radius = (size / 2) - 2;

    // Cas particulier : une seule génération
    if (Object.entries(generations).length === 1) {
        const [[gen, births]] = Object.entries(generations);
        const count = this.isTimelineActive ?
            births.filter(b => b.birthYear <= this.currentYear).length :
            births.length;
        const isFuture = this.isTimelineActive && count === 0;

        return `
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size} ${size}">
                    <circle 
                        cx="${center}" 
                        cy="${center}" 
                        r="${radius}"
                        fill="${this.generationColors[gen]}"
                        opacity="${isFuture ? 0.2 : 1}"
                        stroke="white"
                        stroke-width="1"
                    />
                </svg>`;
    }

    // Cas général : plusieurs générations
    let startAngle = 0;
    const paths = Object.entries(generations)
        .sort(([a], [b]) => parseInt(a) - parseInt(b))
        .map(([gen, births]) => {
            const count = this.isTimelineActive ?
                births.filter(b => b.birthYear <= this.currentYear).length :
                births.length;
            const percentage = births.length / total;
            const angle = percentage * 360;
            const endAngle = startAngle + angle;

            const startRad = (startAngle - 90) * Math.PI / 180;
            const endRad = (endAngle - 90) * Math.PI / 180;

            const x1 = center + radius * Math.cos(startRad);
            const y1 = center + radius * Math.sin(startRad);
            const x2 = center + radius * Math.cos(endRad);
            const y2 = center + radius * Math.sin(endRad);

            const largeArcFlag = angle > 180 ? 1 : 0;
            const path = `
                    M ${center},${center}
                    L ${x1},${y1}
                    A ${radius},${radius} 0 ${largeArcFlag},1 ${x2},${y2}
                    Z`;

            startAngle += angle;
            const isFuture = this.isTimelineActive && count === 0;

            return `
                    <path 
                        d="${path}" 
                        fill="${this.generationColors[gen]}"
                        opacity="${isFuture ? 0.2 : 1}"
                        stroke="white"
                        stroke-width="1"
                    />`;
        }).join('');

    return `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size} ${size}">
                ${paths}
            </svg>`;
}

// Gestion de la timeline
initializeAncestorsMap() {
    if (!this.currentYear && this.birthData.length > 0) {
        this.currentYear = Math.max(...this.birthData
            .filter(b => b.birthYear)
            .map(b => parseInt(b.birthYear, 10)));
        console.log('Initialisation année courante:', this.currentYear);
    }

    if (this.birthData.length > 0) {
        // Mettre à jour les statistiques
        this.statistics = {
            total: this.birthData.length,
            withLocation: this.birthData.length,
            withoutLocation: 0,
            generations: {},
            categories: {
                withCoordinates: this.birthData.length,
                noPlace: 0,
                noCoordinates: 0,
                emptyName: 0,
                unknownParent: 0
            }
        };

        // Calculer les statistiques par génération
        this.birthData.forEach(birth => {
            if (birth.generation !== undefined) {
                this.statistics.generations[birth.generation] = 
                    (this.statistics.generations[birth.generation] || 0) + 1;
            }
        });
    }

    console.log('Année courante:', this.currentYear);
    this.displayProcessingLogs();
    this.activateMapMarkers();
}

updateMarkers() {
    // À implémenter selon les besoins spécifiques
    console.log("Updating markers with timeline:", this.isTimelineActive);
}

// Méthodes utilitaires
moveMapToContainer(containerId) {
    const mapContainer = document.getElementById(containerId);
    if (!mapContainer || !this.map) return;

    const mapDiv = this.map.getDiv();
    // Si la carte est déjà dans le bon conteneur, ne rien faire
    if (mapContainer === mapDiv.parentNode) {
        return;
    }

    try {
        mapContainer.appendChild(mapDiv);
        google.maps.event.trigger(this.map, "resize");
    } catch (error) {
        console.error(`Failed to move map to container ${containerId}:`, error);
        // Si nécessaire, on pourrait essayer de réinitialiser la carte ici
    }
}

clearMap() {
    this.clearMarkers();
    if (this.map) {
        this.map.setCenter({ lat: 46.2276, lng: 2.2137 });
        this.map.setZoom(6.2);
        google.maps.event.trigger(this.map, 'resize');
    }
}

clearMarkers() {
    Object.values(this.activeMarkers).forEach(marker => marker.setMap(null));
    this.activeMarkers = {};
    this.allMarkers = {};
    if (this.markerCluster) {
        this.markerCluster.clearMarkers();
    }
}

isValidCoordinate(coordinate) {
    const num = Number(coordinate);
    return !isNaN(num) && num.toString().trim() !== "";
}

centerMapOnMarkers() {
    if (this.map && Object.keys(this.activeMarkers).length > 0) {
        const bounds = new google.maps.LatLngBounds();
        Object.values(this.activeMarkers).forEach(marker => {
            bounds.extend(marker.getPosition());
        });
        this.map.fitBounds(bounds);
    }
}

analyzeNodeStructure(node, path = '') {
    const seen = new Set();

    function analyze(obj, currentPath) {
        if (!obj || seen.has(obj)) return {};
        if (typeof obj !== 'object') return obj;

        seen.add(obj);
        const structure = {};

        for (const [key, value] of Object.entries(obj)) {
            const newPath = currentPath ? `${currentPath}.${key}` : key;

            if (Array.isArray(value)) {
                structure[key] = `Array(${value.length})`;
            } else if (typeof value === 'object' && value !== null) {
                structure[key] = analyze(value, newPath);
            } else {
                structure[key] = typeof value;
            }
        }

        return structure;
    }

    return analyze(node, path);
}

collectLog(type, data) {
    switch (type) {
        case 'marker':
            this.logsCollection.markers.push({
                timestamp: new Date().toISOString(),
                location: data.location,
                births: data.births,
                generations: data.generations,
                status: 'created'
            });
            this.logsCollection.stats.totalMarkers++;
            break;

        case 'error':
            this.logsCollection.errors.push({
                timestamp: new Date().toISOString(),
                message: data.message,
                details: data.details
            });
            if (data.isMarker) {
                this.logsCollection.stats.failedMarkers++;
            }
            break;

        case 'warning':
            this.logsCollection.warnings.push({
                timestamp: new Date().toISOString(),
                message: data.message,
                details: data.details
            });
            break;

        case 'success':
            if (data.isMarker) {
                this.logsCollection.stats.successfulMarkers++;
            }
            break;
    }
}

displayProcessingLogs() {
    const styles = {
        header: 'color: white; background: #3b82f6; padding: 4px 8px; border-radius: 4px;',
        subheader: 'color: #3b82f6; font-weight: bold;',
        success: 'color: #10b981;',
        error: 'color: #ef4444;',
        warning: 'color: #f59e0b;'
    };

    // S'assurer que les statistiques sont initialisées
    if (!this.statistics) {
        this.statistics = {
            total: this.birthData.length,
            withLocation: this.birthData.length,
            withoutLocation: 0,
            emptyNames: 0,
            generations: {},
            reasons: {
                noData: 0,
                noCoordinates: 0,
                emptyLocation: 0,
                invalidData: 0
            }
        };

        // Calculer les générations à partir des données disponibles
        this.birthData.forEach(birth => {
            if (birth.generation !== undefined) {
                this.statistics.generations[birth.generation] =
                    (this.statistics.generations[birth.generation] || 0) + 1;
            }
        });
    }

    console.group('%c📍 Analyse géographique des individus', styles.header);

    // Statistiques générales
    console.group('Statistiques globales');
    console.table({
        'Total des individus': this.birthData.length,
        'Lieux identifiés': this.birthData.length,
        'Lieux manquants': this.statistics.withoutLocation || 0
    });
    console.groupEnd();

    // Répartition par génération
    if (Object.keys(this.statistics.generations).length > 0) {
        console.group('%cRépartition par génération', styles.subheader);
        console.table(
            Object.entries(this.statistics.generations)
                .sort(([a], [b]) => parseInt(a) - parseInt(b))
                .reduce((acc, [gen, count]) => {
                    acc[`Génération ${gen}`] = count;
                    return acc;
                }, {})
        );
        console.groupEnd();
    }

    // Liste des individus
    if (this.birthData.length > 0) {
        console.group('%cLocalisation des individus', styles.subheader);
        console.table(
            this.birthData.map(birth => ({
                'Nom': birth.name,
                'Lieu': birth.location.name,
                'Département': birth.location.departement || 'Non spécifié',
                'Génération': birth.generation,
                'N° Sosa': birth.sosa,
                'Année': birth.birthYear
            }))
        );
        console.groupEnd();
    }

    console.groupEnd();
}

// Méthode privée pour déterminer la raison de l'absence de coordonnées
#getLocationIssueReason(birth) {
    if (!birth.location) return 'Aucune information de lieu';
    if (!birth.location.name || birth.location.name.trim() === '') return 'Nom du lieu manquant';
    if (!birth.location.lat || !birth.location.lng) return 'Coordonnées manquantes';
    return 'Autre problème';
}

// Gestion de l'historique
undo() {
    if (this.history.length > 1) {
        const lastState = this.history.pop();
        this.redoStack.push(lastState);
        const previousState = this.history[this.history.length - 1];
        this.#applyState(previousState);
    }
}

redo() {
    if (this.redoStack.length > 0) {
        const stateToRestore = this.redoStack.pop();
        this.history.push(stateToRestore);
        this.#applyState(stateToRestore);
    }
}

// Méthodes privées
#setupMapListeners() {
    this.map.addListener('zoom_changed', () => this.#recordState());
    this.map.addListener('center_changed', () => this.#recordState());
}

#recordState() {
    const currentState = {
        zoom: this.map.getZoom(),
        center: this.map.getCenter().toJSON()
    };

    const lastState = this.history[this.history.length - 1];
    if (!this.#isSameState(lastState, currentState)) {
        this.history.push(currentState);
        this.redoStack = [];
    }
}

#isSameState(state1, state2) {
    if (!state1) return false;
    return state1.zoom === state2.zoom &&
        state1.center.lat === state2.center.lat &&
        state1.center.lng === state2.center.lng;
}

#addMapControls() {
    this.#addResetControl();
    this.#addUndoRedoControls();
}

#addResetControl() {
    const controlDiv = document.createElement('div');
    controlDiv.style.margin = '10px';

    const button = document.createElement('button');
    this.#styleControlButton(button);
    button.title = 'Reset map';
    button.innerText = 'Reset Map';
    button.addEventListener('click', () => this.clearMap());

    controlDiv.appendChild(button);
    this.map.controls[google.maps.ControlPosition.TOP_RIGHT].push(controlDiv);
}

#addUndoRedoControls() {
    const controlDiv = document.createElement('div');
    controlDiv.style.margin = '10px';

    const undoButton = document.createElement('button');
    this.#styleControlButton(undoButton);
    undoButton.title = 'Undo';
    undoButton.innerText = 'Undo';
    undoButton.addEventListener('click', () => this.undo());

    const redoButton = document.createElement('button');
    this.#styleControlButton(redoButton);
    redoButton.title = 'Redo';
    redoButton.innerText = 'Redo';
    redoButton.addEventListener('click', () => this.redo());

    controlDiv.appendChild(undoButton);
    controlDiv.appendChild(redoButton);
    this.map.controls[google.maps.ControlPosition.TOP_RIGHT].push(controlDiv);
}

#styleControlButton(button) {
    Object.assign(button.style, {
        backgroundColor: '#fff',
        border: '2px solid #fff',
        borderRadius: '3px',
        boxShadow: '0 2px 6px rgba(0,0,0,.3)',
        cursor: 'pointer',
        marginRight: '5px',
        textAlign: 'center'
    });
}

#applyState(state) {
    this.map.setZoom(state.zoom);
    this.map.setCenter(state.center);
}

#getBranchColor(births) {
    const paternalCount = births.filter(b => this.#determineBranchFromSosa(b.sosa) === 'paternal').length;
    const maternalCount = births.filter(b => this.#determineBranchFromSosa(b.sosa) === 'maternal').length;
    const total = births.length;

    if (paternalCount === total) {
        return '#3b82f6';  // Bleu
    }
    if (maternalCount === total) {
        return '#ec4899';  // Rose
    }
    return '#8b5cf6';  // Violet
}

#getBranchesIndicator(births) {
    const paternalCount = births.filter(b => b.line === 'paternal').length;
    const maternalCount = births.filter(b => b.line === 'maternal').length;
    const total = births.length;

    const paternalWidth = (paternalCount / total) * 100;
    const maternalWidth = (maternalCount / total) * 100;

    return `
            <div class="mt-2">
                <div class="flex h-2 w-full rounded-full overflow-hidden">
                    ${paternalCount > 0 ?
            `<div class="bg-blue-500" style="width: ${paternalWidth}%"></div>` : ''}
                    ${maternalCount > 0 ?
            `<div class="bg-pink-500" style="width: ${maternalWidth}%"></div>` : ''}
                </div>
                <div class="flex justify-between text-xs mt-1">
                    <span class="text-blue-500">Branche paternelle: ${paternalCount}</span>
                    <span class="text-pink-500">Branche maternelle: ${maternalCount}</span>
                </div>
            </div>`;
}

#determineBranchFromSosa(sosa) {
    if (sosa === 1) return null;
    // On détermine l'ancêtre direct (2 = père, 3 = mère)
    while (sosa > 3) {
        sosa = Math.floor(sosa / 2);
    }
    return sosa === 2 ? 'paternal' : 'maternal';
}

getMapStyle() {
    return [
        {
            "featureType": "all",
            "elementType": "labels",
            "stylers": [
                {
                    "visibility": "off"
                },
                {
                    "color": "#f49f53"
                }
            ]
        },
        {
            "featureType": "all",
            "elementType": "labels.text",
            "stylers": [
                {
                    "visibility": "simplified"
                }
            ]
        },
        {
            "featureType": "landscape",
            "elementType": "all",
            "stylers": [
                {
                    "color": "#f9ddc5"
                },
                {
                    "lightness": -7
                }
            ]
        },
        {
            "featureType": "poi.business",
            "elementType": "all",
            "stylers": [
                {
                    "color": "#645c20"
                },
                {
                    "lightness": 38
                }
            ]
        },
        {
            "featureType": "poi.government",
            "elementType": "all",
            "stylers": [
                {
                    "color": "#9e5916"
                },
                {
                    "lightness": 46
                }
            ]
        },
        {
            "featureType": "poi.medical",
            "elementType": "geometry.fill",
            "stylers": [
                {
                    "color": "#813033"
                },
                {
                    "lightness": 38
                },
                {
                    "visibility": "off"
                }
            ]
        },
        {
            "featureType": "poi.park",
            "elementType": "all",
            "stylers": [
                {
                    "color": "#645c20"
                },
                {
                    "lightness": 39
                }
            ]
        },
        {
            "featureType": "poi.school",
            "elementType": "all",
            "stylers": [
                {
                    "color": "#a95521"
                },
                {
                    "lightness": 35
                }
            ]
        },
        {
            "featureType": "poi.sports_complex",
            "elementType": "all",
            "stylers": [
                {
                    "color": "#9e5916"
                },
                {
                    "lightness": 32
                }
            ]
        },
        {
            "featureType": "road",
            "elementType": "all",
            "stylers": [
                {
                    "color": "#813033"
                },
                {
                    "lightness": 43
                }
            ]
        },
        {
            "featureType": "road.local",
            "elementType": "geometry.fill",
            "stylers": [
                {
                    "color": "#f19f53"
                },
                {
                    "weight": 1.3
                },
                {
                    "visibility": "on"
                },
                {
                    "lightness": 16
                }
            ]
        },
        {
            "featureType": "road.local",
            "elementType": "geometry.stroke",
            "stylers": [
                {
                    "color": "#f19f53"
                },
                {
                    "lightness": -10
                }
            ]
        },
        {
            "featureType": "transit",
            "elementType": "all",
            "stylers": [
                {
                    "lightness": 38
                }
            ]
        },
        {
            "featureType": "transit.line",
            "elementType": "all",
            "stylers": [
                {
                    "color": "#813033"
                },
                {
                    "lightness": 22
                }
            ]
        },
        {
            "featureType": "transit.station",
            "elementType": "all",
            "stylers": [
                {
                    "visibility": "off"
                }
            ]
        },
        {
            "featureType": "water",
            "elementType": "all",
            "stylers": [
                {
                    "color": "#1994bf"
                },
                {
                    "saturation": -69
                },
                {
                    "gamma": 0.99
                },
                {
                    "lightness": 43
                }
            ]
        }
    ];
}
}

export const googleMapsStore = new GoogleMapsStore();

================
File: assets/scripts/geneafan/tabs/familyMap/markers.worker.js
================
console.log("markers worker loaded and running.");
self.addEventListener('message', function(e) {
    const towns = e.data.towns;
    console.log("Received message from main thread: ", e.data);
    const markers = {};

    try {
        Object.entries(towns).forEach(([townKey, town]) => {
            if (town.latitude && town.longitude) {
                const latitude = parseFloat(town.latitude);
                const longitude = parseFloat(town.longitude);
                
                if (!isNaN(latitude) && !isNaN(longitude)) {
                    markers[townKey] = {
                        position: { lat: latitude, lng: longitude },
                        title: town.display || town.town || 'Unknown'
                    };
                } else {
                    throw new Error(`Invalid latitude or longitude for town ${townKey}`);
                }
            } else {
                throw new Error(`Missing latitude or longitude for town ${townKey}`);
            }
        });
    } catch (error) {
        console.error('Error processing towns:', error.message);
        self.postMessage({ error: error.message });
        return;
    }

    console.log('Worker sending markers:', markers); 
    self.postMessage({ markersData: markers });
});

================
File: assets/scripts/geneafan/tabs/familyTree/ancestorUtils.js
================
import _ from 'lodash';
import familyTreeDataStore from './familyTreeDataStore.js';

function createAncestorMap(edges) {
    const ancestorMap = new Map();
    edges.forEach(edge => {
        if (!ancestorMap.has(edge.target)) {
            ancestorMap.set(edge.target, {});
        }
        if (edge.relation === "father") {
            ancestorMap.get(edge.target).fid = edge.source;
        } else if (edge.relation === "mother") {
            ancestorMap.get(edge.target).mid = edge.source;
        }
    });
    return ancestorMap;
}

function traceAncestors(id, ancestorMap) {
    let ancestors = [];
    let queue = [id];
    let visited = new Set();

    while (queue.length > 0) {
        const currentId = queue.shift();
        if (!visited.has(currentId)) {
            visited.add(currentId);
            ancestors.push(currentId);
            const parents = ancestorMap.get(currentId) || {};
            if (parents.fid) queue.push(parents.fid);
            if (parents.mid) queue.push(parents.mid);
        }
    }

    return ancestors;
}

export function getOldestAncestorOf(individualId, prioritize = "both") {
    let ancestorMap = familyTreeDataStore.getAncestorMapCache;
    if (ancestorMap.size === 0) {
        // Utilisation directe du store au lieu du wrapper
        const genealogyGraph = familyTreeDataStore.getGenealogyGraph;
        ancestorMap = createAncestorMap(genealogyGraph.edges);
        familyTreeDataStore.setAncestorMapCache(ancestorMap);
    }
    
    let currentId = individualId;
    let queue = [currentId];
    let visited = new Set();
    let oldestAncestor = currentId;

    while (!_.isEmpty(queue)) {
        currentId = queue.shift();
        if (visited.has(currentId)) continue;
        visited.add(currentId);

        const parents = ancestorMap.get(currentId);
        if (!parents) continue;

        switch (prioritize) {
            case 'father':
                if (parents.fid) queue.push(parents.fid);
                break;
            case 'mother':
                if (parents.mid) queue.push(parents.mid);
                break;
            case 'both':
                _.forEach(['fid', 'mid'], parentType => {
                    if (parents[parentType]) queue.push(parents[parentType]);
                });
                break;
        }

        oldestAncestor = currentId;
    }
    return oldestAncestor;
}

function closestAncestor(graph, id1, id2) {
    let ancestorMap = familyTreeDataStore.getAncestorMapCache;
    if (ancestorMap.size === 0) {
        ancestorMap = createAncestorMap(graph.edges);
        familyTreeDataStore.setAncestorMapCache(ancestorMap);
    }

    const ancestors1 = new Set(traceAncestors(id1, ancestorMap));
    const ancestors2 = new Set(traceAncestors(id2, ancestorMap));

    for (let ancestor of ancestors1) {
        if (ancestors2.has(ancestor)) {
            return ancestor;
        }
    }
    return null;
}

function shortestPath(graph, start, end) {
    const adjacencyList = new Map();
    graph.edges.forEach(edge => {
        if (!adjacencyList.has(edge.source)) {
            adjacencyList.set(edge.source, []);
        }
        adjacencyList.get(edge.source).push(edge.target);
    });

    let queue = [start];
    let visited = new Set();
    let parentMap = new Map();

    while (queue.length > 0) {
        let current = queue.shift();
        if (current === end) {
            let path = [];
            while (current !== start) {
                path.unshift(current);
                current = parentMap.get(current);
            }
            path.unshift(start);
            return path;
        }
        visited.add(current);

        const neighbors = adjacencyList.get(current) || [];
        for (let neighbor of neighbors) {
            if (!visited.has(neighbor)) {
                queue.push(neighbor);
                parentMap.set(neighbor, current);
            }
        }
    }
    
    return null;
}

export function commonAncestryGraph(id1, id2) {
    console.time('commonAncestryGraph');
    // Utilisation directe du store au lieu du wrapper
    const graph = familyTreeDataStore.getGenealogyGraph;
    
    let commonAncestorId = closestAncestor(graph, id1, id2);
    if (!commonAncestorId) {
        console.log('No ancestors found for ' + id1 + ' ' + id2);
        return null;
    } else {
        const ancestorNode = graph.nodes.find(node => node.id === commonAncestorId);
        console.log('Closest ancestor is ' + ancestorNode.name + ' with id ' + commonAncestorId);
    }

    let edges1 = shortestPath(graph, commonAncestorId, id1);
    let edges2 = shortestPath(graph, commonAncestorId, id2);
    let commonAncestryGraph = _.union(edges1, edges2);
    
    // Utilisation directe du store au lieu du wrapper
    familyTreeDataStore.setCommonAncestryGraphData(commonAncestryGraph);
    
    console.timeEnd('commonAncestryGraph');
    return commonAncestryGraph;
}

================
File: assets/scripts/geneafan/tabs/familyTree/familyTreeDataStore.js
================
import { makeObservable, observable, action, computed, reaction } from '../../common/stores/mobx-config.js';
import gedcomDataStore from '../../gedcom/stores/gedcomDataSore.js';

class FamilyTreeDataStore {
    constructor() {
        // Initialize observable properties
        this.familyTreeData = [];
        this.genealogyGraph = { nodes: [], edges: [] };
        this.ancestorMapCache = new Map();
        this.commonAncestryGraphData = [];

        // Make properties observable
        makeObservable(this, {
            // Observable properties
            familyTreeData: observable.ref,
            genealogyGraph: observable.ref,
            ancestorMapCache: observable.ref,
            commonAncestryGraphData: observable.ref,

            // Actions
            setFamilyTreeData: action,
            updateFromIndividualsCache: action,
            clearFamilyTreeData: action,
            clearGenealogyGraph: action,
            addNodeToGenealogyGraph: action,
            addEdgeToGenealogyGraph: action,
            setGenealogyGraph: action,
            clearAncestorMap: action,
            setAncestorMapCache: action,
            setCommonAncestryGraphData: action,

            // Computed values
            getFamilyTreeData: computed,
            getGenealogyGraph: computed,
            getAncestorMapCache: computed,
            getCommonAncestryGraphData: computed,
            formatIndividualsForTree: computed
        });

        // Déplacer la réaction dans une méthode séparée
        this.initializeReactions();
    }

    // Nouvelle méthode pour initialiser les réactions
    initializeReactions = () => {
        // Réaction aux changements de la source de données
        reaction(
            () => gedcomDataStore.getSourceData(),
            () => {
                this.clearAncestorMap();
            },
            {
                name: 'FamilyTreeDataStore-SourceDataReaction'
            }
        );

        // Réaction aux changements de la liste des individus
        reaction(
            () => gedcomDataStore.getIndividualsList(),
            (individuals) => {
                if (individuals && Array.isArray(individuals)) {
                    this.updateFromIndividualsCache(individuals);
                }
            },
            {
                name: 'FamilyTreeDataStore-IndividualsCacheReaction'
            }
        );
    }


    // Le reste des méthodes reste inchangé
    setFamilyTreeData = (newData) => {
        this.familyTreeData = [...newData];
    }

    get formatIndividualsForTree() {
        console.time("formatFamilyTreeData");
        const formattedData = this.familyTreeData.map(data => ({
            id: data.id,
            fid: data.fatherId,
            mid: data.motherId,
            pids: data.spouseIds,
            name: `${data.name} ${data.surname}`,
            birthDate: data.birthDate,
            deathDate: data.deathYear,
            gender: data.gender,
            display: true
        }));
        console.timeEnd("formatFamilyTreeData");
        return formattedData;
    }

    updateFromIndividualsCache = (individuals) => {
        if (!individuals) return;
        this.familyTreeData = individuals;
    }

    clearFamilyTreeData = () => {
        this.familyTreeData = [];
    }

    get getFamilyTreeData() {
        return this.familyTreeData;
    }

    // Genealogy Graph Methods
    clearGenealogyGraph = () => {
        this.genealogyGraph = { nodes: [], edges: [] };
        this.clearAncestorMap();
    }

    addNodeToGenealogyGraph = (individual) => {
        const newNodes = [...this.genealogyGraph.nodes];
        if (!newNodes.some(node => node.id === individual.id)) {
            newNodes.push({
                id: individual.id,
                name: individual.name,
                birthDate: individual.birthDate,
                deathDate: individual.deathDate
            });
            this.genealogyGraph = {
                ...this.genealogyGraph,
                nodes: newNodes
            };
        }
    }

    addEdgeToGenealogyGraph = (sourceId, targetId, relation) => {
        const newEdges = [...this.genealogyGraph.edges];
        if (!newEdges.some(edge => edge.source === sourceId && edge.target === targetId)) {
            newEdges.push({
                source: sourceId,
                target: targetId,
                relation: relation
            });
            this.genealogyGraph = {
                ...this.genealogyGraph,
                edges: newEdges
            };
        }
    }

    setGenealogyGraph = (newGraph) => {
        this.genealogyGraph = { ...newGraph };
        this.clearAncestorMap();
    }

    get getGenealogyGraph() {
        return this.genealogyGraph;
    }

    // Ancestor Map Methods
    clearAncestorMap = () => {
        this.ancestorMapCache = new Map();
    }

    setAncestorMapCache = (newMap) => {
        this.ancestorMapCache = new Map(newMap);
    }

    get getAncestorMapCache() {
        return this.ancestorMapCache;
    }

    // Common Ancestry Graph Methods
    setCommonAncestryGraphData = (newData) => {
        this.commonAncestryGraphData = [...newData];
    }

    get getCommonAncestryGraphData() {
        return this.commonAncestryGraphData;
    }
}

const familyTreeDataStore = new FamilyTreeDataStore();
export default familyTreeDataStore;

================
File: assets/scripts/geneafan/tabs/familyTree/treeUI.js
================
import FamilyTree from '@balkangraph/familytree.js';
import _ from 'lodash';
import { reaction } from '../../common/stores/mobx-config.js';
import { getOldestAncestorOf } from './ancestorUtils.js';
import rootPersonStore from '../../common/stores/rootPersonStore.js';
import familyTreeDataStore from './familyTreeDataStore.js';

let family;
let initializing = false;

export function initializeFamilyTree() {
    console.log('Initializing family tree...');
    initializing = true;

    const formattedData = familyTreeDataStore.formatIndividualsForTree;
    if (formattedData.length === 0) {
        console.error('Error: familyTreeData is empty.');
        return;
    }


    const initialRootId = rootPersonStore.root;
    let focusedNodeId = initialRootId;

    family = new FamilyTree(document.getElementById('treeContainer'), {
        mouseScrool: FamilyTree.action.none,
        scaleInitial: FamilyTree.match.width,
        roots: [initialRootId],
        nodeBinding: {
            field_0: 'name',
            field_1: 'birthDate',
            field_2: 'deathDate',
            field_3: 'id'
        },
        orientation: FamilyTree.orientation.top,
        miniMap: true,
        toolbar: {
            layout: false,
            zoom: true,
            fit: true,
            expandAll: false,
            fullScreen: true
        },
        tags: {
            "rootTag": {
                node: {
                    background: "#FFD700",
                    color: "#000000"
                },
                field_0: { color: "#000000" }
            }
        }
    });

    // Event handlers
    family.onInit(() => {
        const rootNode = family.getNode(initialRootId);
        if (rootNode) {
            const rootId = getOldestAncestorOf(rootNode.id, "both");
            family.config.roots = [rootId];
            family.draw();
        }
    });

    family.onNodeDoubleClick((args) => {
        focusedNodeId = args.data.id;
        family.draw();
    });

    family.on('redraw', () => {
        document.querySelector('#treeContainer svg').addEventListener('dblclick', (e) => {
            if (e.target.closest('svg')) {
                focusedNodeId = null;
            }
        });
    });

    family.on("prerender", (sender, args) => {
        const nodes = args.res.nodes;

        if (focusedNodeId == null) {
            clearTags(nodes, ['focused', 'blurred']);
            return;
        }

        const node = nodes[focusedNodeId];
        if (node) {
            applySelectionTags(nodes, node);
        }

        focusedNodeId = null;
    });

    reaction(
        () => familyTreeDataStore.getFamilyTreeData,
        (newData) => {
            if (!initializing && family && newData.length > 0) {
                family.load(newData);
            }
        }
    );

    family.load(formattedData);
    initializing = false;
}

reaction(
    () => familyTreeDataStore.formatIndividualsForTree,
    (newData) => {
        if (!initializing && family && newData.length > 0) {
            family.load(newData);
        }
    }
);

// Function implementations restent les mêmes
function clearTags(nodes, tagsToClear) {
    Object.keys(nodes).forEach(id => {
        nodes[id].tags = nodes[id].tags.filter(tag => !tagsToClear.includes(tag));
    });
}

function applySelectionTags(nodes, node) {
    addTagToNode(node, 'selected');
    iterateParents(nodes, node);
    iterateChildren(nodes, node);
    iteratePartners(nodes, node);
    blurUnfocusedNodes(nodes);
}

function addTagToNode(node, tag) {
    if (!node.tags.includes(tag)) {
        node.tags.push(tag);
    }
}

function blurUnfocusedNodes(nodes) {
    Object.keys(nodes).forEach(id => {
        if (!nodes[id].tags.includes('focused')) {
            addTagToNode(nodes[id], 'blurred');
        }
    });
}

// Root change reaction reste similaire
reaction(
    () => rootPersonStore.root,
    (rootId) => {
        if (!initializing && rootId) {
            if (!family) {
                initializeFamilyTree();
            }
            const oldestAncestorId = getOldestAncestorOf(rootId, "both");
            family.config.roots = [oldestAncestorId];

            const nodeData = family.get(rootId);
            if (nodeData) {
                nodeData.tags = nodeData.tags || [];
                if (!nodeData.tags.includes('rootTag')) {
                    nodeData.tags.push('rootTag');
                }
            }
            
            family.draw();
        }
    }
);

function iteratePartners(nodes, node) {
    if (node.pids) {
        node.pids.forEach(pid => {
            const partnerNode = nodes[pid];
            addFocusedTag(partnerNode);
        });
    }
}

function iterateParents(nodes, node) {
    addFocusedTag(node);

    const motherNode = nodes[node.mid];
    const fatherNode = nodes[node.fid];

    if (motherNode) {
        iterateParents(nodes, motherNode);
    }

    if (fatherNode) {
        iterateParents(nodes, fatherNode);
    }
}

function iterateChildren(nodes, node) {
    addFocusedTag(node);

    node.ftChildrenIds.forEach(childId => {
        const childNode = nodes[childId];
        if (childNode.mid === node.id || childNode.fid === node.id) {
            iterateChildren(nodes, childNode);
        }
    });
}

function addFocusedTag(node) {
    if (node && !node.tags.includes('focused')) {
        node.tags.push('focused');
    }
}

function getFilteredFamilyTreeData(familyTreeData, genealogyGraph, roots) {
    const selectedNodes = new Set(roots);
    let nodesToProcess = [...roots];

    while (nodesToProcess.length > 0) {
        const currentId = nodesToProcess.shift();
        
        genealogyGraph.edges.forEach(edge => {
            if (edge.source === currentId || edge.target === currentId) {
                const connectedNode = edge.source === currentId ? edge.target : edge.source;
                if (!selectedNodes.has(connectedNode)) {
                    selectedNodes.add(connectedNode);
                    nodesToProcess.push(connectedNode);
                }
            }
        });
    }

    return familyTreeData.filter(node => selectedNodes.has(node.id));
}

// Handle common ancestor functionality
document.getElementById("commonAncestor").addEventListener("click", () => {
    // Utilisation directe du store au lieu du wrapper
    const genealogyGraph = familyTreeDataStore.getGenealogyGraph;
    const familyTreeData = familyTreeDataStore.getFamilyTreeData;
    const id1 = '@I789613205@';
    const id2 = '@I170@';

    commonAncestryGraph(id1, id2);

    const selectedIds = familyTreeDataStore.getCommonAncestryGraphData;
    const roots = [selectedIds[0]];
    const filteredFamilyTreeData = getFilteredFamilyTreeData(familyTreeData, genealogyGraph, roots);

    family.on("prerender", (sender, args) => {
        const nodes = args.res.nodes;
        for (const id in nodes) {
            if (!selectedIds.includes(nodes[id].id)) {
                nodes[id].tags.push('blurred');
            } else {
                nodes[id].tags = nodes[id].tags.filter(tag => tag !== 'blurred');
            }
        }
    });

    family.load(filteredFamilyTreeData);
});

export function getTreeInstance() {
    return family;
}

================
File: assets/scripts/geneafan/tabs/fanChart/fan.js
================
import { arc, line } from 'd3-shape';
import { select } from 'd3-selection';
import { hierarchy } from 'd3-hierarchy';
import { xml } from 'd3-fetch';
import tinycolor from "tinycolor2";
import _ from "lodash";
import { mmToPixels } from '../../utils/utils.js';
import { extractYear } from '../../utils/dates.js';
import configStore from './fanConfigStore.js';
import gedcomDataStore from '../../gedcom/stores/gedcomDataSore.js';

const weightFontFirst = 0.25,
    weightFontOther = 0.22,
    weightFontDate = 0.19,
    weightFontMin = 0.16, // Threshold below which first names are abbreviated
    weightFontFar = 0.1,
    weightFontFurthest = 0.06,
    weightFontMarriage = 0.16;
const thirdLevel = 4,
    fourthLevel = 5,
    fifthLevel = 6,
    sixthLevel = 7,
    seventhLayer = 8,
    eighthLayer = 9;
const weightTextMargin = 0.115;

function between(a, b) {
    return d => d.depth >= a && d.depth < b;
}

const isFirstLayer = between(0, 1);
const isSecondLayer = between(1, thirdLevel);
const isThirdLayer = between(thirdLevel, fourthLevel);
const isFourthLayer = between(fourthLevel, fifthLevel);
const isFifthLayer = between(fifthLevel, sixthLevel);
const isSixthLayer = between(sixthLevel, seventhLayer);
const isSeventhLayer = between(seventhLayer, eighthLayer);
const isEightsLayer = d => d.depth >= eighthLayer;

// Constantes pour la conversion et les marges
const MARGIN = 10;
const LOGO_WIDTH = 188.985;
const LOGO_HEIGHT = 38.831; // Ajouté pour la clarté, même si non utilisé ici
const LOGO_MARGIN_TOP = 10;
const TEXT_MARGIN_X = 10;
const TEXT_MARGIN_Y = 10;
const TEXT_ROTATION = -90;
const FONT_SIZE = '12px';

function generateFrame(svg, frameDimensions) {
    const [frameWidthInMm, frameHeightInMm] = frameDimensions.split('x').map(Number);
    const frameWidth = mmToPixels(frameWidthInMm);
    const frameHeight = mmToPixels(frameHeightInMm);

    svg.append('rect')
        .attr('id', 'frame')
        .attr('x', 0)
        .attr('y', 0)
        .attr('width', frameWidth)
        .attr('height', frameHeight)
        .attr('fill', 'none')
        .attr('stroke', 'black')
        .style('stroke', 'hairline'); // Utilisation de .style pour les styles CSS

    const logoSvgContent = `<svg width="188.985" height="38.831" font-family="Helvetica, Arial, serif" xmlns="http://www.w3.org/2000/svg"><g aria-label="Genealogies" style="font-size:40px;line-height:1.25;font-family:Montserrat;-inkscape-font-specification:Montserrat;white-space:pre;shape-inside:url(#rect32540);fill:#32273b;fill-opacity:1;stroke-width:.487243" transform="translate(-89.14 -55.5) scale(.84182)"><path d="M120.649 95.847q-3.2 0-5.92-1.04-2.68-1.08-4.68-3-1.96-1.92-3.08-4.52-1.08-2.6-1.08-5.68 0-3.08 1.08-5.68 1.12-2.6 3.12-4.52 2-1.92 4.68-2.96 2.72-1.08 5.92-1.08 3.2 0 5.84 1 2.68 1 4.56 3.04l-1.84 1.88q-1.76-1.76-3.88-2.52t-4.56-.76q-2.6 0-4.8.88-2.16.84-3.8 2.44-1.6 1.56-2.52 3.68-.88 2.08-.88 4.6 0 2.48.88 4.6.92 2.12 2.52 3.72 1.64 1.56 3.8 2.44 2.2.84 4.76.84 2.4 0 4.52-.72 2.16-.72 3.96-2.44l1.68 2.24q-2 1.76-4.68 2.68-2.68.88-5.6.88zm7.44-3.92v-10.32h2.84v10.68zM147.626 95.807q-3.28 0-5.76-1.36-2.48-1.4-3.88-3.8-1.4-2.44-1.4-5.56 0-3.12 1.32-5.52 1.36-2.4 3.68-3.76 2.36-1.4 5.28-1.4 2.96 0 5.24 1.36 2.32 1.32 3.64 3.76 1.32 2.4 1.32 5.56 0 .2-.04.44v.44h-18.28v-2.12h16.76l-1.12.84q0-2.28-1-4.04-.96-1.8-2.64-2.8-1.68-1-3.88-1-2.16 0-3.88 1-1.72 1-2.68 2.8-.96 1.8-.96 4.12v.44q0 2.4 1.04 4.24 1.08 1.8 2.96 2.84 1.92 1 4.36 1 1.92 0 3.56-.68 1.68-.68 2.88-2.08l1.6 1.84q-1.4 1.68-3.52 2.56-2.08.88-4.6.88zM173.567 74.407q2.56 0 4.48 1 1.96.96 3.04 2.96 1.12 2 1.12 5.04v12.2h-2.84v-11.92q0-3.32-1.68-5-1.64-1.72-4.64-1.72-2.24 0-3.92.92-1.64.88-2.56 2.6-.88 1.68-.88 4.08v11.04h-2.84v-21h2.72v5.76l-.44-1.08q1-2.28 3.2-3.56 2.2-1.32 5.24-1.32zM198.798 95.807q-3.28 0-5.76-1.36-2.48-1.4-3.88-3.8-1.4-2.44-1.4-5.56 0-3.12 1.32-5.52 1.36-2.4 3.68-3.76 2.36-1.4 5.28-1.4 2.96 0 5.24 1.36 2.32 1.32 3.64 3.76 1.32 2.4 1.32 5.56 0 .2-.04.44v.44h-18.28v-2.12h16.76l-1.12.84q0-2.28-1-4.04-.96-1.8-2.64-2.8-1.68-1-3.88-1-2.16 0-3.88 1-1.72 1-2.68 2.8-.96 1.8-.96 4.12v.44q0 2.4 1.04 4.24 1.08 1.8 2.96 2.84 1.92 1 4.36 1 1.92 0 3.56-.68 1.68-.68 2.88-2.08l1.6 1.84q-1.4 1.68-3.52 2.56-2.08.88-4.6.88zM226.554 95.607v-4.64l-.12-.76v-7.76q0-2.68-1.52-4.12-1.48-1.44-4.44-1.44-2.04 0-3.88.68-1.84.68-3.12 1.8l-1.28-2.12q1.6-1.36 3.84-2.08 2.24-.76 4.72-.76 4.08 0 6.28 2.04 2.24 2 2.24 6.12v13.04zm-7.24.2q-2.36 0-4.12-.76-1.72-.8-2.64-2.16-.92-1.4-.92-3.2 0-1.64.76-2.96.8-1.36 2.56-2.16 1.8-.84 4.8-.84h7.24v2.12h-7.16q-3.04 0-4.24 1.08-1.16 1.08-1.16 2.68 0 1.8 1.4 2.88 1.4 1.08 3.92 1.08 2.4 0 4.12-1.08 1.76-1.12 2.56-3.2l.64 1.96q-.8 2.08-2.8 3.32-1.96 1.24-4.96 1.24zM236.987 95.607v-29.68h2.84v29.68zM256.329 95.807q-3.04 0-5.48-1.36-2.4-1.4-3.8-3.8-1.4-2.44-1.4-5.56 0-3.16 1.4-5.56 1.4-2.4 3.8-3.76 2.4-1.36 5.48-1.36 3.12 0 5.52 1.36 2.44 1.36 3.8 3.76 1.4 2.4 1.4 5.56 0 3.12-1.4 5.56-1.36 2.4-3.8 3.8-2.44 1.36-5.52 1.36zm0-2.52q2.28 0 4.04-1 1.76-1.04 2.76-2.88 1.04-1.88 1.04-4.32 0-2.48-1.04-4.32-1-1.84-2.76-2.84-1.76-1.04-4-1.04t-4 1.04q-1.76 1-2.8 2.84-1.04 1.84-1.04 4.32 0 2.44 1.04 4.32 1.04 1.84 2.8 2.88 1.76 1 3.96 1zM281.807 103.567q-2.88 0-5.52-.84-2.64-.84-4.28-2.4l1.44-2.16q1.48 1.32 3.64 2.08 2.2.8 4.64.8 4 0 5.88-1.88 1.88-1.84 1.88-5.76v-5.24l.4-3.6-.28-3.6v-6.36h2.72v18.44q0 5.44-2.68 7.96-2.64 2.56-7.84 2.56zm-.52-8.76q-3 0-5.4-1.28-2.4-1.32-3.8-3.64-1.36-2.32-1.36-5.32 0-3 1.36-5.28 1.4-2.32 3.8-3.6 2.4-1.28 5.4-1.28 2.8 0 5.04 1.16t3.56 3.44q1.32 2.28 1.32 5.56t-1.32 5.56q-1.32 2.28-3.56 3.48-2.24 1.2-5.04 1.2zm.28-2.52q2.32 0 4.12-.96 1.8-1 2.84-2.72 1.04-1.76 1.04-4.04 0-2.28-1.04-4-1.04-1.72-2.84-2.68-1.8-1-4.12-1-2.28 0-4.12 1-1.8.96-2.84 2.68-1 1.72-1 4 0 2.28 1 4.04 1.04 1.72 2.84 2.72 1.84.96 4.12.96z" style="fill:#32273b;fill-opacity:1;stroke-width:.487243"/><path d="M301.729 81.328q1.599 0 2.689 1.123 1.09 1.122 1.09 2.694 0 1.572-1.09 2.62-1.09 1.122-2.69 1.122-1.598 0-2.689-1.048-1.09-1.048-1.09-2.62 0-1.646 1.09-2.768 1.018-1.123 2.69-1.123z" style="fill:#fff;fill-opacity:1;stroke:#32273b;stroke-width:.276232;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"/><path d="M303.149 91.055v21h-2.84v-21zM320.944 95.807q-3.28 0-5.76-1.36-2.48-1.4-3.88-3.8-1.4-2.44-1.4-5.56 0-3.12 1.32-5.52 1.36-2.4 3.68-3.76 2.36-1.4 5.28-1.4 2.96 0 5.24 1.36 2.32 1.32 3.64 3.76 1.32 2.4 1.32 5.56 0 .2-.04.44v.44h-18.28v-2.12h16.76l-1.12.84q0-2.28-1-4.04-.96-1.8-2.64-2.8-1.68-1-3.88-1-2.16 0-3.88 1-1.72 1-2.68 2.8-.96 1.8-.96 4.12v.44q0 2.4 1.04 4.24 1.08 1.8 2.96 2.84 1.92 1 4.36 1 1.92 0 3.56-.68 1.68-.68 2.88-2.08l1.6 1.84q-1.4 1.68-3.52 2.56-2.08.88-4.6.88z" style="fill:#32273b;fill-opacity:1;stroke-width:.487243"/></g></svg>`; // Insérer le code SVG complet ici

    const logoXPosition = frameWidth - LOGO_WIDTH - MARGIN;
    svg.append('g')
        .html(logoSvgContent)
        .attr('id', 'logo')
        .attr('transform', `translate(${logoXPosition}, ${LOGO_MARGIN_TOP})`);

    svg.append('text')
        .attr('id', 'info')
        .attr('x', TEXT_MARGIN_X)
        .attr('y', frameHeight - TEXT_MARGIN_Y)
        .attr('font-size', FONT_SIZE)
        .text(`Visitez le site genealog.ie pour commander cet éventail généalogique gravé sur bois ou sur métal. Dimensions réelles avec le cadre : ${frameWidthInMm}x${frameHeightInMm} (mm). Contact : contact@genealog.ie`)
        .attr('transform', `rotate(${TEXT_ROTATION}, ${TEXT_MARGIN_X}, ${frameHeight - TEXT_MARGIN_Y})`);
}

function createBoxes(g, descendants, showMarriages) {
    const config = configStore.getConfig;
    const weightRadiusMarriage = showMarriages ? 0.27 : 0;
    const maxGen = config.maxGenerations;

    const individualBoxGenerator = arc()
        .startAngle(d => !isFirstLayer(d) ? d.x0 : 0)
        .endAngle(d => !isFirstLayer(d) ? d.x1 : 2 * Math.PI)
        .innerRadius(d => d.y0)
        .outerRadius(d => d.y1);

    const marriageBoxGenerator = arc()
        .startAngle(d => d.x0)
        .endAngle(d => d.x1)
        .innerRadius(d => d.y1)
        .outerRadius(d => d.y1 + weightRadiusMarriage);

    const coloringOption = config.coloringOption;

    function getBoxColor(d) {
        if (coloringOption === 'individual') {
            const text = d.data.name || d.data.surname || '';
            return getBoxColorFromText(text);
        } else if (coloringOption === 'departement') {
            return d.data.bgColor ? d.data.bgColor : '#FFFFFF';
        } else if (coloringOption === 'none') {
            return '#FFFFFF';
        }
    }

    function getBoxColorFromText(text) {
        if (!text) {
            return '#FFFFFF';
        }
        let hash = 0;
        for (let i = 0; i < text.length; i++) {
            hash = text.charCodeAt(i) + ((hash << 5) - hash);
        }
        const c = (hash & 0x00FFFFFF)
            .toString(16)
            .toUpperCase();

        return "#" + "00000".substring(0, 6 - c.length) + c;
    }

    function generateAndStyleBoxes(nodeId, filter, boxGenerator, coloringOption) {
        const showMissing = config.showMissing;
        
        g.selectAll(`.${nodeId}`)
            .data(descendants)
            .enter()
            .filter(d => {
                // Ne pas afficher les nœuds au-delà de maxGen
                if (d.depth >= maxGen) {
                    return false;
                }

                // Pour les boîtes de mariage, vérifier aussi que les enfants ne dépassent pas maxGen
                if (nodeId === 'marriage-boxes' && d.children) {
                    const hasValidChildren = d.children.some(child => 
                        child.depth < maxGen && 
                        (showMissing || (child.data.name && child.data.surname))
                    );
                    if (!hasValidChildren) {
                        return false;
                    }
                }

                if (!showMissing && (!d.data.name || !d.data.surname)) {
                    return false;
                }

                return filter(d);
            })
            .append('path')
            .attr('d', boxGenerator)
            .attr('stroke', '#32273B')
            .attr('style', '-inkscape-stroke:hairline')
            .attr('stroke-width', '0.01')
            .attr('fill', d => getBoxColor(d, coloringOption))
            .attr('class', 'individual-boxes')
            .attr('data-id', d => d.data.id);
    }

    // Boîtes individuelles 
    generateAndStyleBoxes('individual-boxes', d => true, individualBoxGenerator, coloringOption);

    // Boîtes de mariage
    if (showMarriages) {
        generateAndStyleBoxes('marriage-boxes', d => d.children, marriageBoxGenerator, coloringOption);
    }
}

function createTextElements(g, defs, descendants, showMarriages) {
    const config = configStore.getConfig;
    const weightRadiusMarriage = config.showMarriages ? 0.27 : 0;
    const weightRadiusFirst = config.weights.generations[0];
    const fixOrientations = true;
    const angleInterpolate = config.angle / Math.PI - 1;
    const maxGen = config.maxGenerations;

    // Fonction auxiliaire pour générer un identifiant de chemin
    function pathId(sosa, line) {
        return "s" + sosa + "l" + line;
    }

    // Fonction auxiliaire pour générer une ligne simple
    function simpleLine(x0, y0, x1, y1) {
        const generator = line();
        return generator([
            [x0, y0],
            [x1, y1]
        ]);
    }

    // Fonction auxiliaire pour fixer un générateur d'arc
    function fixArc(arcGenerator) {
        return d => arcGenerator(d).split('A').slice(0, 2).join("A");
    }

    function meanAngle(arr) {
        function sum(a, b) {
            return a + b;
        }
        return Math.atan2(
            arr.map(Math.sin).reduce(sum) / arr.length,
            arr.map(Math.cos).reduce(sum) / arr.length
        );
    }

    // Stockez les angles moyens pour éviter de recalculer
    const meanAngles = new Map();
    descendants.forEach(d => {
        meanAngles.set(d, meanAngle([d.x0, d.x1]));
    });

    // Marriage text conditions
    // config.angle > 6 = fan angle = 360°
    const isMarriageFirst = d => {
        if (d.depth >= maxGen - 1) return false;
        return config.angle > 6 
            ? between(0, fifthLevel)(d) && d.children 
            : between(0, fourthLevel)(d) && d.children;
    };

    const isMarriageSecond = d => {
        if (d.depth >= maxGen - 1) return false;
        return config.angle > 6 
            ? d.depth >= fifthLevel && d.children 
            : d.depth >= fourthLevel && d.children;
    };

    /** Text paths **/
    // Pré-calcul des descendants par couche et en respectant maxGen
    const filteredDescendants = descendants.filter(d => d.depth < maxGen);
    const descendantsByLayer = {
        firstLayer: filteredDescendants.filter(isFirstLayer),
        secondLayer: filteredDescendants.filter(isSecondLayer),
        thirdLayer: filteredDescendants.filter(isThirdLayer),
        fourthLayer: filteredDescendants.filter(isFourthLayer),
        fifthLayer: filteredDescendants.filter(isFifthLayer),
        sixthLayer: filteredDescendants.filter(isSixthLayer),
        seventhLayer: filteredDescendants.filter(isSeventhLayer),
        eighthLayer: filteredDescendants.filter(isEightsLayer)
    };

    // First node
    const weightFirstLineSpacing = weightFontFirst + 0.05;
    const linesFirst = 4;
    const halfHeightFirst = (linesFirst - 1) * weightFirstLineSpacing / 2;
    
    // First node paths creation...
    for (let i = 0; i < linesFirst; i++) {
        const y = i * weightFirstLineSpacing - halfHeightFirst;
        const yabs = Math.abs(y) + weightFirstLineSpacing / 2;
        const x = Math.sqrt(Math.max(weightRadiusFirst * weightRadiusFirst - yabs * yabs, 0));
        defs.append('path')
            .attr('id', pathId(1, i))
            .attr('d', simpleLine(-2 * x, y, 2 * x, y));
    }

    // Secondary nodes
    const weightSecondLineSpacing = weightFontOther + 0.03;
    const linesSecond = 3;
    const halfHeightSecond = (linesSecond - 1) * weightSecondLineSpacing / 2;

    const invert = config.invertTextArc ? d => {
        const angle = meanAngles.get(d);
        return angle < -Math.PI / 2 || angle > Math.PI / 2;
    } : () => false;

    // Secondary nodes paths creation...
    for (let i = 0; i < linesSecond; i++) {
        const y = d => (invert(d) ? i : (linesSecond - 1 - i)) * weightSecondLineSpacing - halfHeightSecond;
        const radiusF = d => (d.y0 + d.y1) / 2 + y(d);
        const marginAngleF = d => weightTextMargin / radiusF(d) * (d.depth === 1 ? 1.5 : 1);
        const minA = d => Math.min(d.x0, d.x1);
        const maxA = d => Math.max(d.x0, d.x1);
        const rangeA = d => Math.abs(d.x0 - d.x1) - 2 * marginAngleF(d);
        const start = d => minA(d) + -0.5 * rangeA(d) + marginAngleF(d);
        const end = d => maxA(d) + 0.5 * rangeA(d) - marginAngleF(d);

        const arcGenerator = fixArc(arc()
            .startAngle(d => invert(d) ? end(d) : start(d))
            .endAngle(d => invert(d) ? start(d) : end(d))
            .innerRadius(radiusF)
            .outerRadius(radiusF));

        descendantsByLayer.secondLayer.forEach(d => {
            defs.append('path')
                .attr('id', pathId(d.data.sosa, i))
                .attr('d', arcGenerator(d));
        });
    }

    function generateThirdLevelTextPaths(lines, spacing, filter) {
        const filteredDescendants = descendants.filter(filter);
    
        for (let i = 0; i < lines; i++) {
            const trueI = lines - 1 - i;
            
            filteredDescendants.forEach(d => {
                const angleSplitting = 1.35 / (1 << d.depth); // impact line spacing
                const weightThirdLineSpacing = angleSplitting * spacing;
                const halfHeightThird = (lines - 1) * weightThirdLineSpacing / 2;
                const angleMid = (((meanAngle([d.x0, d.x1]) - Math.PI / 2) % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
                const inverted = fixOrientations && angleMid >= Math.PI / 2 && angleMid < 3 * Math.PI / 2;
                const adjustedI = inverted ? trueI : i;
                const angle = adjustedI * weightThirdLineSpacing - halfHeightThird;
                const x = Math.cos(angle + angleMid);
                const y = Math.sin(angle + angleMid);
                const halfRange = (d.y1 - d.y0) / 2 - weightTextMargin;
                const y0 = inverted ? (d.y1 - weightTextMargin + halfRange) : (d.y0 + weightTextMargin - halfRange);
                const y1 = inverted ? (d.y0 + weightTextMargin - halfRange) : (d.y1 - weightTextMargin + halfRange);
    
                defs.append('path')
                    .attr('id', pathId(d.data.sosa, i))
                    .attr('d', simpleLine(x * y0, y * y0, x * y1, y * y1));
            });
        }
    }

    function generateTextPaths(linesIfAngleGreaterThan6, linesIfAngleLessThanOrEqual6, spacing, filter) {
        const lines = config.angle > 6 ? linesIfAngleGreaterThan6 : linesIfAngleLessThanOrEqual6;
        generateThirdLevelTextPaths(lines, spacing, filter);
    }

    const PI = Math.PI;

    // Third nodes 
    generateThirdLevelTextPaths(4, PI / 5, isThirdLayer);

    // Fourth nodes (3 or 4 lines depending on fanAngle value)
    generateTextPaths(4, 3, PI / 3.5, isFourthLayer);

    // Fifth nodes (2 or 3 lines depending on fanAngle value)
    generateTextPaths(3, 2, PI / 2.5, isFifthLayer);

    // Sixth nodes (1 or 2 lines depending on fanAngle value)
    generateTextPaths(2, 1, PI / 1.5, isSixthLayer);

    // Seventh nodes
    generateThirdLevelTextPaths(1, 0, d => d.depth >= seventhLayer);

    // Modification des chemins de texte pour les nœuds mariage
    if (showMarriages) {
        descendants.filter(d => d.children).forEach(d => {
            const angle = meanAngle([d.x0, d.x1]);
            let isTextInverted = (angle < -Math.PI / 2 || angle > Math.PI / 2);

            // Ajoutez la vérification pour config.invertTextArc ici
            if (!config.invertTextArc) {
                isTextInverted = false; // Ne pas inverser le texte si config.invertTextArc est faux
            }

            const isParentArc = isFirstLayer(d); // Vérifie si c'est le noeud des parents du rootNode
            const r = d.y1 + weightRadiusMarriage / 2 * 0.96; // Centrage vertical du texte dans l'arc de mariage
            const marginAngle = d.depth < sixthLevel ? weightTextMargin / r : weightTextMargin / (4 * r);
            const min = Math.min(d.x0, d.x1),
                max = Math.max(d.x0, d.x1),
                range = Math.abs(d.x0 - d.x1) - 2 * marginAngle;

            // Assurez-vous que l'arc pour les parents est toujours au sommet
            const startAngle = isParentArc ? -Math.PI / 2 : (isTextInverted ? max + 0.5 * range - marginAngle : min - 0.5 * range + marginAngle);
            const endAngle = isParentArc ? Math.PI / 2 : (isTextInverted ? min - 0.5 * range + marginAngle : max + 0.5 * range - marginAngle);

            // Utilisez startAngle et endAngle pour dessiner l'arc de mariage
            const marriageArcGenerator = fixArc(arc()
                .startAngle(startAngle)
                .endAngle(endAngle)
                .innerRadius(r)
                .outerRadius(r));

            defs.append('path')
                .attr('id', pathId(d.data.sosa, 'm'))
                .attr('fill', 'none')
                .attr('d', marriageArcGenerator(d));
        });

    }

    //Optimized version of generateTexts. Including text overflow check.
    const checkOverflow = (textElem, totalLength) => textElem.getComputedTextLength() > totalLength;

    const handleOverflow = (textPath, initialSize, step, checkOverflow) => {
        let lower = step, upper = initialSize, mid, doesOverflow;
        while (upper - lower > step) {
            mid = (lower + upper) / 2;
            textPath.style('font-size', `${mid}px`);
            doesOverflow = checkOverflow();
            if (doesOverflow) upper = mid;
            else lower = mid;
        }
        return { finalSize: lower, overflowed: doesOverflow };
    };

    const createGroupElement = (anchor, line, alignment, special) => {
        const group = anchor.append('g')
            .on('click', (event, d) => { // Utilisez d3.js pour gérer le clic
                event.stopPropagation(); // Empêche l'événement de se propager
                const customEvent = new CustomEvent('showPersonDetails', { detail: d });
                // console.log('Dispatching showPersonDetails event:', customEvent);
                document.dispatchEvent(customEvent);
            });

        return group;
    };

    const createTextElement = (group, line, alignment, special) => {
        return group.append('text')
            .attr('dominant-baseline', 'middle')
            .attr('alignment-baseline', 'middle')
            .append('textPath')
            .attr('font-size', `${line.size}px`)
            .attr('font-weight', line.bold ? "bold" : "")
            .attr('fill', d => determineTextColor(d))
            .attr('text-anchor', alignment)
            .attr('startOffset', '50%')
            .attr('href', d => `#${pathId(d.data.sosa, special ? 'm' : line.index)}`);
    };

    function determineTextColor(d) {
        // Adjust the selection to use the group 'boxes'
        const boxSelector = `#boxes path.individual-boxes[data-id="${d.data.id}"]`;
        const boxElement = select(boxSelector).node();
        
        if (!boxElement) {
            return 'black'; // Default to black if no box element is found
        }
        
        const boxColor = boxElement.getAttribute('fill');
        if (!boxColor || boxColor === '#FFFFFF') {
            return 'black'; // Return white if the text is empty
        }
        const color = tinycolor(boxColor);
        return color.isLight() ? 'black' : 'white';
    }

    // Handle Text Content: Extract the logic for determining the text content into a separate function.
    const setTextContent = (textPath, line, d, special) => {
        const display = config.contemporary.generations <= (d.depth + (special ? 1 : 0)) || (line.bold ? config.contemporary.showNames : config.contemporary.showEvents);
        textPath.text(display ? line.text(d) : '');
    };

    // Optimize Text Size: Separate the logic for handling overflow and adjusting text size.
    const optimizeTextSize = (textPath, textElem, pathElem, line, d) => {
        let size = parseFloat(textPath.style('font-size'));
        const step = 0.01 * size;
        const totalLength = pathElem.getTotalLength() / 2;
        let result = handleOverflow(textPath, size, step, () => checkOverflow(textElem, totalLength));

        if (shouldAdjustTextSize(result, line)) {
            adjustText(textPath, textElem, d, result, step, totalLength);
        }
    };

    function shouldAdjustTextSize(result, line) {
        return (line.filter === isFifthLayer || line.filter === isSixthLayer || line.filter === isSeventhLayer)
            && line.text === nameInline
            && result.finalSize < weightFontMin;
    }

    function adjustText(textPath, textElem, d, result, step, totalLength) {
        textPath.text(nameFirst(d).charAt(0) + '. ' + nameSecond(d));
        textPath.style('font-size', `${weightFontOther}px`);
        let newResult = handleOverflow(textPath, weightFontOther, step, () => checkOverflow(textElem, totalLength));
        if (newResult.overflowed) {
            textPath.style('font-size', `${newResult.finalSize}px`);
        }
    }

    // Optimized version of generateTexts. 
    const generateTexts = (filter, lines, alignment, special) => {
        const showMissing = configStore.config.showMissing;
        
        const anchor = g.selectAll('path')
            .data(descendants)
            .enter()
            .filter(d => {
                if (!showMissing && (!d.data.name || !d.data.surname)) {
                    return false;
                }
                return filter(d);
            });

        const group = createGroupElement(anchor, lines[0], alignment, special);

        lines.forEach((line, i) => {
            line.index = i;
            line.filter = filter;
            const textPath = createTextElement(group, line, alignment, special);
            textPath.each(function (d) {
                const textElem = this.parentNode;
                const pathHref = select(this).attr('href');
                const pathElem = document.querySelector(pathHref);

                if (!pathElem) {
                    return;
                }

                setTextContent(select(this), line, d, special);
                optimizeTextSize(select(this), textElem, pathElem, line, d);
            });
        });
    };

    // Optimized textBirth and textDeath
    const textBirth = ({ data: { birthYear = '', fanBirthPlace = '' } }) => {
        const place = config.places.showPlaces && fanBirthPlace ? ` ${fanBirthPlace}` : '';
        return `${birthYear}${place}`;
    };

    const textDeath = ({ data: { deathYear = '', fanDeathPlace = '' } }) => {
        const place = config.places.showPlaces && fanDeathPlace ? ` ${fanDeathPlace}` : '';
        return `${deathYear}${place}`;
    };

    const textRange = ({ data: { birthYear = '', deathYear = '' } }) => {
        return birthYear && deathYear ? `${birthYear} - ${deathYear}` : birthYear || deathYear;
    };

    // Optimized givenName, nameInline, nameFirst, nameSecond
    const givenName = d => config.showFirstNameOnly ? d.data.name.split(/\s+/)[0] : d.data.name;
    const nameInline = d => `${nameFirst(d)} ${nameSecond(d)}`;
    const nameFirst = d => config.givenThenFamilyName ? givenName(d) : d.data.surname;
    const nameSecond = d => config.givenThenFamilyName ? d.data.surname : givenName(d);

    // Text generation based on generations...
    const generations = [
        { condition: isFirstLayer, texts: [{ text: nameFirst, size: weightFontFirst, bold: true }, { text: nameSecond, size: weightFontFirst, bold: true }, { text: textBirth, size: weightFontOther }, { text: textDeath, size: weightFontOther }] },
        { condition: isSecondLayer, texts: [{ text: nameInline, size: weightFontOther, bold: true }, { text: textBirth, size: weightFontDate }, { text: textDeath, size: weightFontDate }] },
        { condition: isThirdLayer, texts: [{ text: nameFirst, size: weightFontOther, bold: true }, { text: nameSecond, size: weightFontOther, bold: true }, { text: textBirth, size: weightFontDate }, { text: textDeath, size: weightFontDate }] },
        { condition: isFourthLayer, texts: config.angle > 6 ? [{ text: nameFirst, size: weightFontOther, bold: true }, { text: nameSecond, size: weightFontOther, bold: true }, { text: textBirth, size: weightFontDate }, { text: textDeath, size: weightFontDate }] : [{ text: nameFirst, size: weightFontOther, bold: true }, { text: nameSecond, size: weightFontOther, bold: true }, { text: textRange, size: weightFontDate }] },
        { condition: isFifthLayer, texts: config.angle > 6 ? [{ text: nameInline, size: weightFontOther, bold: true }, { text: textBirth, size: weightFontDate }, { text: textDeath, size: weightFontDate }] : [{ text: nameInline, size: weightFontOther, bold: true }, { text: textRange, size: weightFontDate }] },
        { condition: isSixthLayer, texts: config.angle > 6 ? [{ text: nameInline, size: weightFontOther, bold: true }, { text: textRange, size: weightFontDate }] : [{ text: nameInline, size: weightFontOther, bold: true }] },
        { condition: isSeventhLayer, texts: [{ text: nameInline, size: angleInterpolate * weightFontOther + (1 - angleInterpolate) * weightFontFar, bold: true }] },
        { condition: isEightsLayer, texts: [{ text: nameInline, size: angleInterpolate * weightFontFar + (1 - angleInterpolate) * weightFontFurthest, bold: true }] }
    ];

    // Apply generation conditions and create texts
    generations.forEach(generation => {
        if (generation.condition) {
            generateTexts(d => generation.condition(d) && d.depth < maxGen, 
                        generation.texts, "middle", false);
        }
    });

    // Marriage texts
    if (showMarriages) {
        const getMarriageText = (d, includePlace) => {
            if (d.data.marriage && d.data.marriage.date && d.data.marriage.date.display) {
                let text = extractYear(d.data.marriage.date.display);
                if (includePlace && config.places.showPlaces && d.data.marriage.place && d.data.marriage.place.display) {
                    text += ' ' + d.data.marriage.place.display.split(/,| \(| \s\d/)[0];
                }
                return text;
            }
            return '';
        };

        // Marriage texts first
        generateTexts(isMarriageFirst, [
            { text: d => getMarriageText(d, true), size: weightFontMarriage },
        ], "middle", true);

        // Marriage texts second
        generateTexts(isMarriageSecond, [
            { text: d => getMarriageText(d, false), size: weightFontMarriage },
        ], "middle", true);
    }
}

function adjustFanVerticalPosition(svg, fanHeight, frameHeight, scale) {
    // Calculez le décalage vertical nécessaire pour centrer l'éventail
    let verticalOffset = (frameHeight - fanHeight) / 2;
    // console.log("frameHeightInPixels: ", frameHeight);
    // console.log("fanHeight: ", fanHeight);    
    // console.log("verticalOffset: ", verticalOffset);

    // Sélectionnez vos groupes 'boxes' et 'texts' et ajustez leur position verticale tout en conservant l'échelle
    function applyTransform(elementId) {
        svg.select(`g[id="${elementId}"]`).attr('transform', function () {
            let match = /translate\(([^,]+), ([^\)]+)\)/.exec(select(this).attr('transform'));
            let translateX = match ? parseFloat(match[1]) : 0;
            let translateY = match ? parseFloat(match[2]) : 0;
    
            let newTransform = `translate(${translateX}, ${translateY + verticalOffset}) scale(${scale})`;
            return newTransform;
        });
    }
    
    applyTransform('texts');
    applyTransform('boxes');
}

export function drawFan(currentRoot) {
    console.log('starting drawFan with root:', currentRoot);
    console.log('Starting fan chart drawing');
    
    const config = configStore.getConfig;
    const angle = configStore.angle;

    // Utiliser la hiérarchie existante du store
    const data = gedcomDataStore.getHierarchy();

    console.log('Data:', data);
    
    if (data == null) {
        console.log("Data is null for drawFan. Exiting.");
        window.alert(__('geneafan.cannot_read_this_file'));
        return null;
    }
    
    if (!config.fanDimensions) {
        console.error("Fan chart configuration error: Dimensions not specified");
        return null;
    }
    
    const [fanWidthInMm, fanHeightInMm] = config.fanDimensions.split('x').map(Number);
    if (!fanWidthInMm || !fanHeightInMm) {
        console.error("Invalid fan dimensions:", config.fanDimensions);
        return null;
    }

    const radius = mmToPixels(Math.round((fanWidthInMm / 2)));
    const showMarriages = config.showMarriages;

    const weightRadiusFirst = config.weights.generations[0],
        // weightRadiusClose = config.weights.generations[1],
        // weightRadiusFar = config.weights.generations[2],
        weightRadiusMarriage = showMarriages ? 0.27 : 0; //FB

    function applyNormalWeights(tree) {
        const generationLimits = [1, thirdLevel, seventhLayer, Infinity];

        function computeRecursive(tree, generation) {
            if (!tree) return; // Sortie rapide si tree est null ou undefined

            let i = 0;
            while (generation >= generationLimits[i]) {
                i++;
            }
            tree.weight = config.weights.generations[i];

            // Assurez-vous que tree.children est bien un tableau avant de l'itérer
            if (Array.isArray(tree.children)) {
                tree.children.forEach(child => computeRecursive(child, generation + 1));
            }
        }
        computeRecursive(tree, 0);
    }

    function applyTimeWeights(tree) {
        const defaultAgeForBirth = 22,
            defaultAgeDead = 80,
            maxAgeAlive = 110; // TODO actually use these (for the first ind.)
        const minimumAgeForBirth = 14,
            maximumAgeForBirth = 60;
        let minimums = [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY];

        function computeRecursive(tree, year, generation) {
            let timeDifference = defaultAgeForBirth;
            const isYearDefined = tree.birth && tree.birth.date && tree.birth.date.year;
            if (isYearDefined) {
                timeDifference = year - tree.birth.date.year;
            }
            if (timeDifference < minimumAgeForBirth || timeDifference > maximumAgeForBirth) {
                timeDifference = defaultAgeForBirth;
            }
            if (generation === 0) { // For now
                timeDifference = defaultAgeForBirth;
            }

            tree.weight = timeDifference;
            let i;
            if (generation < 1) { // (1)
                i = 0;
            } else if (generation < thirdLevel) { // (2)
                i = 1;
            } else if (generation < seventhLayer) { // (3)
                i = 2;
            } else { // (4)
                i = 3;
            }
            minimums[i] = Math.min(timeDifference, minimums[i]);

            if (tree.children) {
                tree.children.map(parent => computeRecursive(parent, isYearDefined ? tree.birth.date.year : year - timeDifference, generation + 1));
            }
        }
        const baseYear = new Date().getFullYear();
        computeRecursive(tree, baseYear, 0);

        let maxScale = 0;
        for (let i = 0; i < minimums.length; i++) {
            const scale = (config.weights.generations[i] + (i > 0 ? weightRadiusMarriage : 0)) / minimums[i];
            maxScale = Math.max(scale, maxScale);
        }

        function normalizeRecursive(tree, generation) {
            if (generation === 0) {
                tree.weight *= maxScale;
            } else {
                tree.weight = tree.weight * maxScale - weightRadiusMarriage;
            }
            if (tree.children) {
                tree.children.map(parent => normalizeRecursive(parent, generation + 1));
            }
        }

        normalizeRecursive(tree, 0);
    }

    if (config.isTimeVisualisationEnabled) {
        applyTimeWeights(data);
    } else {
        applyNormalWeights(data);
    }

    function computeTotalWeight(tree, generation) {
        if (!tree) return 0; 

        let currentWeight = tree.weight || 0; // Fallback sur 0 si tree.weight est indéfini
        if (generation > 0) {
            currentWeight += weightRadiusMarriage;
        }

        // Vérifiez si tree.children est un tableau et non vide avant de réduire
        if (Array.isArray(tree.children) && tree.children.length > 0) {
            return currentWeight + Math.max(...tree.children.map(child => computeTotalWeight(child, generation + 1)));
        } else {
            return currentWeight;
        }
    }

    const totalWeight = computeTotalWeight(data, 0); // Math.min(depth, 1) * weightRadiusFirst + Math.max(Math.min(depth, thirdLevel) - 1, 0) * weightRadiusClose + Math.max(depth - thirdLevel, 0) * weightRadiusFar + (depth - 1) * weightRadiusMarriage;

    // Calculate polar coordinates
    function calculateNodeProperties(node) {
        const maxGen = configStore.config.maxGenerations; 
        
        // Ne pas traiter les nœuds au-delà de maxGenerations
        if (node.depth >= maxGen) {
            return;
        }
    
        const space = 2 * Math.PI - angle;
        if (node.parent == null) {
            node.x0 = Math.PI - space / 2;
            node.x1 = -Math.PI + space / 2;
            node.y0 = 0;
            node.y1 = node.data.weight;
        } else {
            let p = node.parent;
            let add = (p.x1 - p.x0) / 2;
            node.x0 = p.x0 + (node.data.sosa % 2 === 0 ? add : 0);
            node.x1 = node.x0 + add;
            node.y0 = p.y1 + weightRadiusMarriage;
            node.y1 = node.y0 + node.data.weight;
        }
    }

    let rootNode = hierarchy(data).each(calculateNodeProperties);
    let descendants = rootNode.descendants().filter(node => {
        const maxGen = configStore.config.maxGenerations;
        const showMissing = configStore.config.showMissing;
        
        // Filtre par génération
        if (node.depth >= maxGen) {
            return false;
        }
        
        // Filtre des personnes manquantes
        if (!showMissing && (!node.data.name || !node.data.surname)) {
            return false;
        }
        
        return true;
    });

    const fanSvg = document.getElementById("fan");
    if (fanSvg) {
        fanSvg.innerHTML = "";
    }
    
    const width = 2 * radius,
        height = radius + Math.max(radius * Math.cos(Math.PI - angle / 2), radius * weightRadiusFirst / totalWeight); // Utiliser angle ici aussi

    const hasTitle = config.title.length > 0;
    const titleBlock = hasTitle ? titleSize + titleSpace : 0;
    const realHeight = height + titleBlock; // Keep for future use

    // Initialisation du SVG
    if (!config.frameDimensions) {
        console.error("Frame dimensions are undefined");
        return null;
    }

    const [frameWidthInMm, frameHeightInMm] = config.frameDimensions.split('x').map(Number);
    if (!frameWidthInMm || !frameHeightInMm) {
        console.error("Invalid frame dimensions:", config.frameDimensions);
        return null;
    }
    
    const svg = select('svg#fan')
        .attr('width', `${frameWidthInMm}mm`)
        .attr('height', `${frameHeightInMm}mm`)
        .style('overflow', 'visible')
        .attr('font-family', 'Helvetica Neue,Helvetica');

    // Création des définitions réutilisables
    const defs = svg.append('defs');

    // Génération du cadre SVG
    generateFrame(svg, config.frameDimensions); // Supposons que cette fonction est définie ailleurs

    // Création des groupes pour les boîtes et les éléments de texte
    const scale = radius / totalWeight;
    const baseTransform = `translate(${mmToPixels(frameWidthInMm) / 2}, ${mmToPixels(frameHeightInMm) / 2}) scale(${scale})`;

    const boxesGroup = svg.append('g').attr('id', 'boxes').attr('transform', baseTransform);
    const textsGroup = svg.append('g').attr('id', 'texts').attr('transform', baseTransform);

    // Génération des boîtes et des éléments de texte
    createBoxes(boxesGroup, descendants, showMarriages);

    createTextElements(textsGroup, defs, descendants, showMarriages);

    adjustFanVerticalPosition(svg, mmToPixels(fanHeightInMm), mmToPixels(frameHeightInMm), scale);
    
    console.log('Fan chart drawing completed');
    return {
        data: data,
        rootPersonName: { name: rootNode.data.name, surname: rootNode.data.surname }
    };
}

export function drawEmptyFan() {
    // Initialisation du conteneur SVG
    const fanSvg = document.getElementById("fan");
    if (fanSvg) {
        fanSvg.innerHTML = ""; // Efface le contenu existant
    }

    // Charger le fichier SVG à partir de l'URL
    xml("/dist/images/Fan_270_8GM.svg").then(data => {
        // Ajouter le contenu du fichier SVG à l'élément SVG existant
        select("#fan").node().append(data.documentElement);
    });
}

export { drawFan as draw };

================
File: assets/scripts/geneafan/tabs/fanChart/fanChartManager.js
================
import _ from 'lodash';
import screenfull from "screenfull";
import { draw } from "./fan.js";
import rootPersonStore from "../../common/stores/rootPersonStore.js";
import configStore from "./fanConfigStore.js";
import { SVGPanZoomManager } from "./SVGPanZoomManager.js";

export class FanChartManager {
    static panZoomInstance = null;

    /**
     * Initialize the fan chart manager
     */
    static initialize() {
        console.log("Initializing fan chart...");
        this.setupEventListeners();
        return this;
    }

    /**
     * Set up event listeners for the fan chart
     */
    static setupEventListeners() {
        this.setupFullscreenListeners();
        this.setupTabListeners();
        this.setupFanParameterListeners();
    }

    /**
     * Set up listeners for fullscreen mode
     */
    static setupFullscreenListeners() {
        if (screenfull.isEnabled) {
            const fullscreenButton = document.getElementById('fullscreenButton');
            if (fullscreenButton) {
                fullscreenButton.addEventListener('click', this.handleFullscreen);
            }

            screenfull.on('change', () => this.handleFullscreenChange());
        }
    }

    static debouncedDraw = _.debounce((root) => {
        this.drawFanForRoot(root, false);
    }, 50);
    
    /**
     * Set up tab listeners for the fan chart
     */
    static setupTabListeners() {
        const tabFan = document.querySelector('[href="#tab1"]');
        if (tabFan) {
            tabFan.addEventListener("shown.bs.tab", () => {
                if (rootPersonStore.root) {
                    this.debouncedDraw(rootPersonStore.root);
                }
            });
        }
    }

    /**
     * Set up listeners for fan chart parameters
     */
    static setupFanParameterListeners() {
        const parameterMapping = {
            showMarriages: "showMarriages",
            "invert-text-arc": "invertTextArc",
            showMissing: "showMissing",
            fanAngle: "fanAngle",
            "max-generations": "maxGenerations",
            fanColor: "coloringOption"
        };

        const booleanParameters = [
            "showMarriages",
            "invert-text-arc",
            "showMissing"
        ];

        // Handle fan parameters
        document.querySelectorAll(".parameter").forEach((item) => {
            const oldHandler = item._changeHandler;
            if (oldHandler) {
                item.removeEventListener("change", oldHandler);
            }

            const handleParameterChange = (event) => {
                const input = event.target;
                let value;

                if (booleanParameters.includes(input.name)) {
                    value = input.value === "true";
                } else if (
                    input.type === "number" ||
                    ["fanAngle", "max-generations"].includes(input.name)
                ) {
                    value = parseInt(input.value, 10);
                } else {
                    value = input.value;
                }

                const storeParamName = parameterMapping[input.name];
                if (!storeParamName) {
                    console.warn("Unknown parameter:", input.name);
                    return;
                }

                console.log(
                    `Updating ${storeParamName} with value:`,
                    value,
                    `(type: ${typeof value})`
                );
                configStore.updateFanParameter(storeParamName, value);
            };

            item._changeHandler = handleParameterChange;
            item.addEventListener("change", handleParameterChange);
        });
    }

    /**
     * Centralized error handling with visual feedback
     */
    static handleError(error, context) {
        console.error(`Fan chart error ${context ? `(${context})` : ''}: `, error);

        const loadingElement = document.getElementById('loading');
        const overlayElement = document.getElementById('overlay');
        
        if (loadingElement) {
            loadingElement.style.display = 'none';
        }
        
        if (overlayElement) {
            overlayElement.classList.add('overlay-error');
            setTimeout(() => {
                overlayElement.classList.remove('overlay-error');
            }, 3000);
        }
    }

    /**
     * Handle fullscreen mode toggle
     */
    static handleFullscreen = async () => {
        try {
            const container = document.getElementById('fanContainer');
            if (screenfull.isEnabled) {
                await screenfull.toggle(container);
            }
        } catch (error) {
            this.handleError(error, 'fullscreen');
        }
    }

    /**
     * Handle fullscreen state changes
     */
    static handleFullscreenChange() {
        try {
            if (!this.panZoomInstance) return;

            const fan = document.getElementById("fan");
            if (!fan) return;

            if (screenfull.isFullscreen) {
                this.panZoomInstance.handleResize();
                this.panZoomInstance.centerAndFit();
                fan.style.cursor = "grab";
            } else {
                this.panZoomInstance.handleResize();
                fan.style.cursor = "default";
            }
        } catch (error) {
            this.handleError(error, 'fullscreen-change');
        }
    }

    /**
     * Display fan chart with transition animation
     */
    static async displayFan() {
        try {
            const svg = document.querySelector('#fan');
            const container = document.getElementById('fanContainer');

            if (!svg || !container) {
                throw new Error('Required elements not found');
            }

            // Appearance transition
            svg.style.opacity = '0';

            // Set up pan/zoom
            this.panZoomInstance = new SVGPanZoomManager(svg, {
                minZoom: 0.1,
                maxZoom: 10,
                zoomScaleSensitivity: 0.2,
                fitPadding: 20
            });

            // Appearance animation
            requestAnimationFrame(() => {
                svg.style.transition = 'opacity 0.3s ease-in-out';
                svg.style.opacity = '1';
            });

        } catch (error) {
            this.handleError(error, 'display');
            throw error;
        }
    }

    /**
     * Draw fan chart for a given root person
     */
    static async drawFanForRoot(root, skipCleanup = false) {
        console.group('🎨 FanChartManager.drawFanForRoot');
        console.log('Root:', root);
        console.log('skipCleanup:', skipCleanup);
        
        try {
            // Prerequisites validation
            if (!configStore.config.gedcomFileName) {
                throw new Error('No GEDCOM file loaded');
            }
    
            const fanContainer = document.getElementById('fanContainer');
            if (!fanContainer || fanContainer.offsetParent === null) {
                console.log('Fan container not visible - skipping draw');
                console.groupEnd();
                return null;
            }

            if (!skipCleanup) {
                await this.cleanupExistingInstance();
            }

            console.log('Drawing fan with root:', root);
            const drawResult = draw(root);
            if (!drawResult) {
                throw new Error('Failed to draw fan');
            }

            await this.displayFan();
            this.updateUIAfterRedraw();

            console.groupEnd();
            return drawResult;

        } catch (error) {
            this.handleError(error, 'draw');
            console.groupEnd();
            return null;
        }
    }

    /**
     * Apply configuration changes to the fan chart
     */
    static async applyConfigChanges() {
        if (!rootPersonStore.root) return null;
        
        console.group('🔧 FanChartManager.applyConfigChanges');
        try {
            if (!configStore.config.gedcomFileName) {
                console.log('No GEDCOM file loaded');
                return null;
            }

            const fanContainer = document.getElementById('fanContainer');
            if (!fanContainer || fanContainer.offsetParent === null) {
                console.log('Fan container not visible');
                return null;
            }

            console.log('Applying config changes');
            return FanChartManager.drawFanForRoot(rootPersonStore.root);

        } catch (error) {
            FanChartManager.handleError(error, 'config-change');
            return null;
        } finally {
            console.groupEnd();
        }
    }

    /**
     * Redraw the fan chart
     */
    static async redrawFan() {
        return FanChartManager.drawFanForRoot(rootPersonStore.root);
    }

    /**
     * Clean up existing fan chart instance
     */
    static async cleanupExistingInstance() {
        try {
            const svgElement = document.querySelector('#fan');

            if (this.panZoomInstance) {
                this.panZoomInstance.destroy();
                this.panZoomInstance = null;
            }

            if (svgElement) {
                svgElement.innerHTML = '';
            }
        } catch (error) {
            this.handleError(error, 'cleanup');
            throw error;
        }
    }

    /**
     * Update UI elements after redrawing the fan
     */
    static updateUIAfterRedraw() {
        const loadingElement = document.getElementById("loading");
        const overlayElement = document.getElementById("overlay");

        if (loadingElement) {
            loadingElement.style.display = "none";
        }

        if (overlayElement) {
            overlayElement.classList.add("overlay-hidden");
        }
    }

    /**
     * Complete reset of the fan chart
     */
    static reset() {
        try {
            this.cleanupExistingInstance();
            
            const fanSvg = document.getElementById("fan");
            if (fanSvg) {
                fanSvg.innerHTML = "";
            }

            this.setupEventListeners();
        } catch (error) {
            this.handleError(error, 'reset');
        }
    }
}

================
File: assets/scripts/geneafan/tabs/fanChart/fanConfigStore.js
================
import { makeAutoObservable, action, reaction, runInAction, computed, comparer } from '../../common/stores/mobx-config.js';
import 'tom-select/dist/css/tom-select.css';
import { FanChartManager } from "./fanChartManager.js";
import _ from 'lodash';

class ConfigStore {
    config = {
        fanAngle: 270,
        maxGenerations: 8,
        availableGenerations: 8,
        showMarriages: true,
        invertTextArc: true,
        coloringOption: "none",
        showMissing: true,
        dates: {
            showYearsOnly: true,
            showInvalidDates: false,
        },
        places: {
            showPlaces: true,
            showReducedPlaces: true,
        },
        givenThenFamilyName: true,
        showFirstNameOnly: true,
        substituteEvents: false,
        isTimeVisualisationEnabled: false,
        title: "",
        titleSize: 1.0,
        titleMargin: 0.25,
        weights: {
            generations: [1.0, 1.0, 1.7, 1.4],
            strokes: 0.02,
        },
        contemporary: {
            showEvents: true,
            showNames: true,
            trulyAll: false,
            generations: 1,
        },
        fanDimensions: undefined,
        frameDimensions: undefined,
        computeChildrenCount: false,
        filename: "",
        gedcomFileName: "",
    };

    _batchUpdating = false;
    _queueTimeout = null;
    _updateQueued = false;
    _pendingUpdates = new Set();
    _drawInProgress = false;
    _isRootChangeInProgress = false;
    _rootChangeTimeout = null;
    _skipNextUpdate = false;
    _isInitialDraw = true;

    constructor() {
        const initialDimensions = this.calculateDimensions(
            this.config.fanAngle,
            this.config.maxGenerations,
            this.config.showMarriages
        );

        if (initialDimensions) {
            this.config.fanDimensions = initialDimensions.fanDimensionsInMm;
            this.config.frameDimensions = initialDimensions.frameDimensionsInMm;
        }

        const style = document.createElement('style');
        style.textContent = `
            .btn-outline-primary.disabled,
            .btn-outline-primary:disabled {
                background-color: var(--bg-color-dark);
                border-color: var(--color-light);
                color: var(--color-light);
                opacity: 0.5;
                cursor: not-allowed;
            }
            
            .btn-check:disabled + .btn-outline-primary, 
            .btn-check[disabled] + .btn-outline-primary {
                background-color: var(--bg-color-dark);
                border-color: var(--color-light);
                color: var(--color-light);
                opacity: 0.5;
                pointer-events: none;
            }
        `;
        document.head.appendChild(style);

        makeAutoObservable(this, {
            batchUpdate: action,
            updateFanParameter: action,
            handleSettingChange: action,
            handleSettingChangeInternal: action,
            setConfig: action,
            setGedcomFileName: action,
            queueSettingChange: action,
            
            angle: computed,
            dimensions: computed,
            
            configHistory: false,
            _rootChangeTimeout: false,
            _skipNextUpdate: false,
            _isRootChangeInProgress: false,
            _queueTimeout: false,
            _updateQueued: false,
            _batchUpdating: false,
            _pendingUpdates: false,
            _isInitialDraw: false,
        });

        // Écouteur d'événements pour le changement de root
        document.addEventListener('rootChange', () => {
            runInAction(() => {
                console.group('🔄 Root Change Detection');
                console.log('Setting root change flags');
                
                this._isRootChangeInProgress = true;
                this._skipNextUpdate = true;
                
                if (this._rootChangeTimeout) {
                    console.log('Clearing previous root change timeout');
                    clearTimeout(this._rootChangeTimeout);
                }
                
                this._rootChangeTimeout = setTimeout(() => {
                    runInAction(() => {
                        console.log('Resetting root change flags');
                        this._isRootChangeInProgress = false;
                        this._skipNextUpdate = false;
                        this._isInitialDraw = false;
                    });
                }, 100);
                
                console.groupEnd();
            });
        });

        // La réaction pour les paramètres de l'éventail
        reaction(
            () => ({
                fanAngle: this.config.fanAngle,
                maxGenerations: this.config.maxGenerations,
                showMarriages: this.config.showMarriages,
                invertTextArc: this.config.invertTextArc,
                coloringOption: this.config.coloringOption,
                showMissing: this.config.showMissing
            }),
            (params, previousParams) => {
                // Ne pas traiter si un changement de root est en cours et que ce n'est pas le dessin initial
                if (this._batchUpdating || (this._isRootChangeInProgress && !this._isInitialDraw)) {
                    console.log('⏭️ Skipping - Update in progress or subsequent root change');
                    return;
                }
                
                if (previousParams && _.isEqual(params, previousParams)) {
                    console.log('⏭️ Skipping - No real changes');
                    return;
                }

                runInAction(() => {
                    // ... reste de la logique ...
                });
            },
            {
                equals: comparer.structural,
                name: 'ConfigStore-FanParametersReaction'
            }
        );

        reaction(
            () => this.config.availableGenerations,
            (availableGens) => {
                runInAction(() => {
                    const gen8Radio = document.getElementById('max-generations-8');
                    const gen8Label = document.querySelector('label[for="max-generations-8"]');
                    const gen7Radio = document.getElementById('max-generations-7');
                    
                    if (gen8Radio && gen8Label && gen7Radio) {
                        if (availableGens < 8) {
                            // Désactiver l'option 8 générations
                            gen8Radio.disabled = true;
                            gen8Label.classList.add('disabled');
                            
                            // Ajouter l'événement click sur le label
                            gen8Label.onclick = (e) => {
                                e.preventDefault();
                                const alertElement = document.getElementById('alert');
                                const alertContent = document.getElementById('alert-content');
                                if (alertElement && alertContent) {
                                    alertContent.textContent = "Votre fichier Gedcom comporte moins de 8 générations";
                                    alertElement.classList.remove('d-none');
                                    alertElement.classList.add('show');
                                    
                                    // Cacher l'alerte après 3 secondes
                                    setTimeout(() => {
                                        alertElement.classList.remove('show');
                                        alertElement.classList.add('d-none');
                                    }, 3000);
                                }
                            };
                            
                            // Toujours passer à 7 générations
                            this.setConfig({ maxGenerations: 7 });
                            gen7Radio.checked = true;
                            gen8Radio.checked = false;
                        } else {
                            // Réactiver l'option 8 générations
                            gen8Radio.disabled = false;
                            gen8Label.classList.remove('disabled');
                            // Retirer l'événement click
                            gen8Label.onclick = null;
                        }
                    }
                });
            },
            {
                name: 'ConfigStore-GenerationButtonsReaction',
                fireImmediately: true
            }
        );
    }

    get angle() {
        return (2 * Math.PI * this.config.fanAngle) / 360.0;
    }

    get dimensions() {
        return this.calculateDimensions(
            this.config.fanAngle,
            this.config.maxGenerations,
            this.config.showMarriages
        );
    }

    queueSettingChange = _.debounce(action(() => {
        if (this._batchUpdating) return;
        
        console.log('Processing queued settings changes');
        this._pendingUpdates.clear();
        this.handleSettingChangeInternal();
    }), 50);

    handleSettingChange = action(() => {
        console.log('🎯 handleSettingChange called');
        if (this._batchUpdating) {
            console.log('⏭️ Skipping - batch update in progress');
            return;
        }
        this.queueSettingChange();
    });

    handleSettingChangeInternal = action(() => {
        console.group('🛠️ handleSettingChangeInternal');
        
        if (!this.config.gedcomFileName) {
            console.log('⏭️ Skipping config update: No GEDCOM file loaded');
            console.groupEnd();
            return false;
        }
    
        // Permettre le dessin initial ou si le changement de root est terminé
        if (!this._isInitialDraw && this._isRootChangeInProgress) {
            console.log('⏭️ Skipping - Not initial draw and root change in progress');
            console.groupEnd();
            return false;
        }
        
        console.log('✨ Applying config changes');
        if (this._isInitialDraw) {
            console.log('📌 Initial draw in progress');
        }
        console.groupEnd();
        return FanChartManager.applyConfigChanges();
    });

    batchUpdate = action((updates) => {
        if (this._batchUpdating) return;
        
        this._batchUpdating = true;
        try {
            updates();
            this.queueSettingChange();
        } finally {
            this._batchUpdating = false;
        }
    });

    setConfig = action((params) => {
        runInAction(() => {
            Object.assign(this.config, params);

            if (params.fanAngle !== undefined) {
                console.log('Angle updated to:', this.angle);
            }
        });

        if (!this._batchUpdating) {
            this.queueSettingChange();
        }
    });

    updateFanParameter = action((paramName, value) => {
        this.setConfig({ [paramName]: value });
    });

    calculateDimensions(fanAngle, maxGenerations, showMarriages) {
        const dimensionsMap = {
            270: {
                8: { fanDimensionsInMm: "301x257", frameDimensionsInMm: "331x287" },
                7: {
                    true: { fanDimensionsInMm: "301x257", frameDimensionsInMm: "331x287" },
                    false: { fanDimensionsInMm: "245x245", frameDimensionsInMm: "260x260" },
                },
            },
            360: {
                8: { fanDimensionsInMm: "297x297", frameDimensionsInMm: "331x331" },
                7: {
                    true: { fanDimensionsInMm: "297x297", frameDimensionsInMm: "331x331" },
                    false: { fanDimensionsInMm: "245x245", frameDimensionsInMm: "260x260" },
                },
            },
        };

        const defaultDimensions = { fanDimensionsInMm: undefined, frameDimensionsInMm: undefined };
        const angleDimensions = dimensionsMap[fanAngle];
        if (!angleDimensions) return defaultDimensions;

        const generationDimensions = angleDimensions[maxGenerations];
        if (!generationDimensions) return defaultDimensions;

        return generationDimensions[showMarriages] || generationDimensions;
    }

    setGedcomFileName = action((fileName) => {
        this.config.gedcomFileName = fileName;
    });

    get getConfig() {
        return this.config;
    }

    // Méthode pour mettre à jour le nombre de générations disponibles
    setAvailableGenerations = action((generations) => {
        this.config.availableGenerations = generations;
        // Logs pour le débogage
        console.log(`Available generations set to: ${generations}`);
    });
}

const configStore = new ConfigStore();
export default configStore;

================
File: assets/scripts/geneafan/tabs/fanChart/offcanvasManager.js
================
import { Offcanvas } from "bootstrap";
import { googleMapsStore } from "../familyMap/googleMapsStore.js";

class OffcanvasManager {
    constructor() {
        this.personDetailsInstance = null;
        this.individualMapInstance = null;
    }

    getOffCanvasInstance(elementId, options) {
        let instance = Offcanvas.getInstance(document.getElementById(elementId));
        if (!instance) {
            instance = new Offcanvas(document.getElementById(elementId), options);
        }
        return instance;
    }

    showOffCanvasDetails() {
        const personDetailsElement = document.getElementById("personDetails");
        const individualMapContainerElement = document.getElementById("individualMapContainer");

        this.personDetailsInstance = this.getOffCanvasInstance("personDetails", {});
        this.individualMapInstance = this.getOffCanvasInstance("individualMapContainer", {
            backdrop: false
        });

        if (!this.personDetailsInstance._isShown) {
            this.personDetailsInstance.show();
        }
        if (!this.individualMapInstance._isShown) {
            this.individualMapInstance.show();
        }

        individualMapContainerElement.removeEventListener("shown.bs.offcanvas", this.handleMapResize);
        individualMapContainerElement.addEventListener("shown.bs.offcanvas", this.handleMapResize);

        personDetailsElement.removeEventListener("hidden.bs.offcanvas", this.handleOffcanvasHide);
        personDetailsElement.addEventListener("hidden.bs.offcanvas", this.handleOffcanvasHide);
    }

    handleMapResize() {
        const offCanvasBody = document.querySelector("#individualMapContainer .offcanvas-body");
        const mapElement = document.getElementById("individualMap");
        mapElement.style.height = `${offCanvasBody.clientHeight}px`;

        googleMapsStore.moveMapToContainer("individualMap");
        google.maps.event.trigger(googleMapsStore.map, "resize");
        googleMapsStore.map.setCenter({ lat: 46.2276, lng: 2.2137 });
    }

    handleOffcanvasHide = () => {
        if (this.individualMapInstance) {
            this.individualMapInstance.hide();
        }
    }
}

export const offcanvasManager = new OffcanvasManager();

================
File: assets/scripts/geneafan/tabs/fanChart/personDetailsDisplay.js
================
// MobX state management
import { googleMapsStore } from "../familyMap/googleMapsStore.js";
import { offcanvasManager } from "./offcanvasManager.js";

// Utility libraries
import _ from "lodash";

export function displayPersonDetailsUI(personDetails) {
    const {
        personLink,
        formattedOccupations,
        formattedSiblings,
        individualTowns,
        individualEvents,
        deceased,
    } = personDetails.data;

    const personDetailsLabelElement = document.getElementById("personDetailsLabel");
    const individualTimelineElement = document.getElementById("individualTimeline");

    // Affiche le nom de la personne dans l'en-tête
    personDetailsLabelElement.innerHTML = `<h4>${personLink}</h4>`;

    const eventTypeDescriptions = {
        birth: "Naissance",
        marriage: "Mariage",
        death: "Décès",
        today: "Aujourd'hui",
    };

    // Fonction pour parser les dates au format "dd/mm/yyyy"
    const parseDateString = (dateString) => {
        if (!dateString) return null;
        const [day, month, year] = dateString.split("/");
        return new Date(year, month - 1, day);
    };

    const birthEvent = individualEvents.find((event) => event.type === "birth") || {
        type: "birth",
        date: "",
        description: "Date inconnue",
    };
    const deathEvent = individualEvents.find((event) => event.type === "death");

    const otherEvents = individualEvents
        .filter((event) => event.type !== "birth" && event.type !== "death")
        .sort((a, b) => {
            const dateA = parseDateString(a.date);
            const dateB = parseDateString(b.date);

            if (dateA && dateB) return dateA - dateB;
            if (dateA) return -1;
            if (dateB) return 1;
            return 0;
        });

    const timelineEvents = [birthEvent, ...otherEvents];
    if (deceased && deathEvent) {
        timelineEvents.push(deathEvent);
    }

    const timelineFragment = document.createDocumentFragment();
    let childBirthCount = 0;

    const getEventDescription = (event, childBirthOrder) => {
        const ageText = event.ageAtEvent ? ` à ${event.ageAtEvent} ans` : "";
        switch (event.type) {
            case "child-birth":
                return `${childBirthOrder}${ordinalSuffixOf(childBirthOrder)} enfant${ageText}`;
            case "death":
                return `Décès${ageText}`;
            case "marriage":
                return `Mariage${ageText}`;
            default:
                return eventTypeDescriptions[event.type] || _.startCase(event.type);
        }
    };

    timelineEvents.forEach((event) => {
        if (event.type === "child-birth") {
            childBirthCount++;
        }
        const description = getEventDescription(event, childBirthCount);

        const li = document.createElement("li");
        li.innerHTML = `
            <div class="event-header">
                <h6 class="mt-0">${description}</h6>
                <h6 class="float-end">${event.date || "Date inconnue"}</h6>
            </div>
            <p class="mt-0">${event.description}</p>
        `;
        timelineFragment.appendChild(li);
    });

    // Création des sections supplémentaires
    const createSection = (title, content) => {
        return `
            <h6>${title}</h6>
            <ul class="list-group">
                <li class="list-group-item">${content}</li>
            </ul>
        `;
    };

    const siblingsSection = formattedSiblings ? createSection("Fratrie", formattedSiblings) : "";
    const occupationsSection = formattedOccupations ? createSection("Profession", formattedOccupations) : "";
    const additionalInfo = `${siblingsSection}${occupationsSection}`;

    // Construction du conteneur principal
    const container = document.createElement("div");
    container.classList.add("container");
    container.innerHTML = `
        <div class="row">
            <div class="col-md-12">
                <ul class="timeline-3"></ul>
            </div>
        </div>
        <div class="additional-info">${additionalInfo}</div>
    `;

    container.querySelector(".timeline-3").appendChild(timelineFragment);
    individualTimelineElement.innerHTML = "";
    individualTimelineElement.appendChild(container);

    // Gestion de la carte Google Maps
    if (!googleMapsStore.map) {
        googleMapsStore.initMap("individualMap");
    }

    const individualTownKeys = Object.keys(individualTowns);
    googleMapsStore.activateMapMarkers(individualTownKeys);

    offcanvasManager.showOffCanvasDetails();
}

function ordinalSuffixOf(i) {
    const j = i % 10;
    const k = i % 100;
    if (j == 1 && k != 11) {
        return "er";
    }
    return "ème";
}

================
File: assets/scripts/geneafan/tabs/fanChart/SVGPanZoomManager.js
================
export class SVGPanZoomManager {
    constructor(svgElement, options = {}) {
        this.svg = svgElement;
        this.container = svgElement.parentElement;
        this.options = {
            minZoom: options.minZoom || 0.1,
            maxZoom: options.maxZoom || 10,
            zoomScaleSensitivity: options.zoomScaleSensitivity || 0.2,
            fitPadding: options.fitPadding || 20,
            ...options
        };

        this.state = {
            zoom: 1,
            panning: false,
            pointX: 0,
            pointY: 0,
            startX: 0,
            startY: 0,
            viewBox: null,
            containerWidth: 0,
            containerHeight: 0
        };

        this.svg.style.width = 'auto';
        this.svg.style.height = 'auto';
        this.svg.style.maxWidth = '100%';
        this.svg.style.maxHeight = '100%';
        this.svg.style.display = 'block';

        this._initialDisplay = true;

        requestAnimationFrame(() => {
            this.initialize();
            this.handleResize(); // Appelé une fois après l'initialisation
        
            // Attachez le ResizeObserver après une courte attente
            setTimeout(() => {
                const resizeObserver = new ResizeObserver(() => {
                    if (resizeTimeout) clearTimeout(resizeTimeout);
                    resizeTimeout = setTimeout(() => this.handleResize(), 100);
                });
                resizeObserver.observe(this.container);
            }, 200);
            
            this._initialDisplay = false;
        });

        let resizeTimeout;
        const resizeObserver = new ResizeObserver(() => {
            if (resizeTimeout) clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => this.handleResize(), 100);
        });
        resizeObserver.observe(this.container);
    }

    initialize() {
        if (!this.svg.isConnected) return;
    
        const bbox = this.svg.getBBox();
        const viewBox = `${bbox.x} ${bbox.y} ${bbox.width} ${bbox.height}`;
        this.svg.setAttribute('viewBox', viewBox);
    
        this.state.viewBox = {
            x: bbox.x,
            y: bbox.y,
            width: bbox.width,
            height: bbox.height
        };
    
        // Ne pas définir de transform initial
        this.setupEventListeners();
    }

    setupEventListeners() {
        this.svg.addEventListener('wheel', (e) => {
            e.preventDefault();
            const delta = -Math.sign(e.deltaY);
            const scale = 1 + delta * this.options.zoomScaleSensitivity;
            const point = this.getRelativeMousePosition(e);
            this.zoomAtPoint(scale, point);
        }, { passive: false });

        this.svg.addEventListener('mousedown', (e) => {
            if (e.button === 0) {
                this.state.panning = true;
                this.state.startX = e.clientX - this.state.pointX;
                this.state.startY = e.clientY - this.state.pointY;
                this.svg.style.cursor = 'grabbing';
            }
        });

        window.addEventListener('mousemove', (e) => {
            if (this.state.panning) {
                e.preventDefault();
                const newX = e.clientX - this.state.startX;
                const newY = e.clientY - this.state.startY;

                this.state.pointX = newX;
                this.state.pointY = newY;
                this.updateTransform();
            }
        });

        window.addEventListener('mouseup', () => {
            if (this.state.panning) {
                this.state.panning = false;
                this.svg.style.cursor = 'grab';
            }
        });

        this.svg.addEventListener('dblclick', (e) => {
            e.preventDefault();
            this.centerAndFit();
        });

        this.setupTouchEvents();
    }

    setupTouchEvents() {
        let lastTouchDistance = 0;
        let initialZoom = 1;

        this.svg.addEventListener('touchstart', (e) => {
            if (e.touches.length === 2) {
                e.preventDefault();
                lastTouchDistance = this.getTouchDistance(e.touches);
                initialZoom = this.state.zoom;
            } else if (e.touches.length === 1) {
                this.state.panning = true;
                this.state.startX = e.touches[0].clientX - this.state.pointX;
                this.state.startY = e.touches[0].clientY - this.state.pointY;
            }
        }, { passive: false });

        this.svg.addEventListener('touchmove', (e) => {
            if (e.touches.length === 2) {
                e.preventDefault();
                const distance = this.getTouchDistance(e.touches);
                const scale = (distance / lastTouchDistance);
                const center = this.getTouchCenter(e.touches);

                this.zoomAtPoint(scale, center, initialZoom);
            } else if (e.touches.length === 1 && this.state.panning) {
                const newX = e.touches[0].clientX - this.state.startX;
                const newY = e.touches[0].clientY - this.state.pointY;

                this.state.pointX = newX;
                this.state.pointY = newY;
                this.updateTransform();
            }
        }, { passive: false });

        this.svg.addEventListener('touchend', () => {
            this.state.panning = false;
        });
    }

    handleResize() {
        if (this._isResizing) return; // Ajout d'un verrou pour éviter les appels simultanés
        this._isResizing = true;
    
        const rect = this.container.getBoundingClientRect();
        this.state.containerWidth = rect.width;
        this.state.containerHeight = rect.height;
    
        // console.log("=== handleResize ===");
        // console.log("Container dimensions:", rect.width, "x", rect.height);
        // console.trace("Trace of handleResize"); // Affiche la pile d'appels
    
        this.centerAndFit();
    
        // Retirez le verrou après une courte attente
        setTimeout(() => {
            this._isResizing = false;
        }, 100);
    }

    getRelativeMousePosition(event) {
        const rect = this.svg.getBoundingClientRect();
        return {
            x: event.clientX - rect.left,
            y: event.clientY - rect.top
        };
    }

    zoomAtPoint(scale, point, baseZoom = this.state.zoom) {
        const oldZoom = baseZoom;
        const newZoom = Math.min(Math.max(baseZoom * scale, this.options.minZoom), this.options.maxZoom);
        const scaleFactor = newZoom / oldZoom;

        this.state.pointX = point.x - (point.x - this.state.pointX) * scaleFactor;
        this.state.pointY = point.y - (point.y - this.state.pointY) * scaleFactor;
        this.state.zoom = newZoom;

        this.updateTransform();
    }

    updateTransform() {
        // N'utiliser cette méthode que pour les interactions utilisateur
        if (!this.state.panning && this.state.zoom === this.lastCenteredZoom) {
            return;
        }
        
        const transform = `translate(${this.state.pointX}px, ${this.state.pointY}px) scale(${this.state.zoom})`;
        this.svg.style.transform = transform;
        this.svg.style.transformOrigin = '0 0';
    
        // console.log("=== updateTransform ===");
        // console.log("Applied transform:", transform);
    }

    centerAndFit() {
        const containerRect = this.container.getBoundingClientRect();
        const viewBox = this.state.viewBox;

        // Calcul de l'échelle pour ajuster aux dimensions du conteneur
        const scaleX = containerRect.width / viewBox.width;
        const scaleY = containerRect.height / viewBox.height;
        const scale = Math.min(scaleX, scaleY) * 0.95; // Réduit de 5%

        // Largeur et hauteur du SVG après application de l'échelle
        const scaledWidth = viewBox.width * scale;
        const scaledHeight = viewBox.height * scale;

        // Calcul du centrage
        const offsetX = (containerRect.width - scaledWidth) / 2;
        const offsetY = (containerRect.height - scaledHeight) / 2;

        // Mise à jour de l'état
        this.state.zoom = scale;
        this.state.pointX = offsetX;
        this.state.pointY = offsetY;

        // console.log("=== centerAndFit ===");
        // console.log("Container dimensions:", containerRect.width, "x", containerRect.height);
        // console.log("SVG viewBox:", viewBox.width, "x", viewBox.height);
        // console.log("Scaled dimensions:", scaledWidth, "x", scaledHeight);
        // console.log("Computed scale:", scale);
        // console.log("Offsets - X:", offsetX, "Y:", offsetY);
    }

    destroy() {
        this.svg.style.cursor = '';
        this.svg.style.transform = '';
        this.svg.style.transformOrigin = '';
    }
}

================
File: assets/scripts/geneafan/tabs/statistics/services/statisticsService.js
================
import statisticsStore from '../statisticsStore.js';
import gedcomDataStore from '../../../gedcom/stores/gedcomDataSore.js';

class StatisticsService {
    constructor() {
        this.worker = null;
        this.onProgressCallback = null;
    }

    initialize() {
        if (this.worker) {
            this.worker.terminate();
        }

        this.worker = new Worker(
            new URL('../workers/statisticsWorker.js', import.meta.url),
            { type: 'module' }
        );
        
        this.worker.addEventListener('message', (e) => {
            switch (e.data.type) {
                case 'statistics':
                    this.updateStatisticsStore(e.data.data, e.data.scope);
                    break;
                case 'progress':
                    if (this.onProgressCallback) {
                        this.onProgressCallback(e.data.data);
                    }
                    break;
            }
        });
    }

    onProgress(callback) {
        this.onProgressCallback = callback;
    }

    processFamilyData() {
        if (!this.worker) {
            this.initialize();
        }
    
        const individuals = Array.from(gedcomDataStore.getIndividualsCache().values());
        const sanitizedData = this.sanitizeIndividuals(individuals);
        
        this.worker.postMessage({
            type: 'process',
            data: { 
                individuals: sanitizedData,
                scope: 'family'
            }
        });
    }

    processIndividualData(rootId, hierarchy) {
        if (!this.worker || !rootId || !hierarchy) {
            return;
        }

        const ancestorIds = new Set(hierarchy.map(person => person.id));
        const relevantIndividuals = Array.from(gedcomDataStore.getIndividualsCache().values())
            .filter(individual => ancestorIds.has(individual.id));
        
        const sanitizedData = this.sanitizeIndividuals(relevantIndividuals);

        this.worker.postMessage({
            type: 'process',
            data: {
                individuals: sanitizedData,
                scope: {
                    type: 'individual',
                    rootId: rootId
                }
            }
        });
    }

    sanitizeIndividuals(individuals) {
        return individuals.map(individual => {
            return {
                stats: {
                    demography: {
                        birthInfo: {
                            date: individual.stats.demography.birthInfo.date,
                            year: individual.stats.demography.birthInfo.year,
                            place: {
                                town: individual.stats.demography.birthInfo.place.town,
                                departement: individual.stats.demography.birthInfo.place.departement,
                                country: individual.stats.demography.birthInfo.place.country,
                                coordinates: {
                                    latitude: individual.stats.demography.birthInfo.place.coordinates?.latitude,
                                    longitude: individual.stats.demography.birthInfo.place.coordinates?.longitude
                                }
                            }
                        },
                        deathInfo: {
                            date: individual.stats.demography.deathInfo.date,
                            year: individual.stats.demography.deathInfo.year,
                            place: {
                                town: individual.stats.demography.deathInfo.place.town,
                                departement: individual.stats.demography.deathInfo.place.departement,
                                country: individual.stats.demography.deathInfo.place.country,
                                coordinates: {
                                    latitude: individual.stats.demography.deathInfo.place.coordinates?.latitude,
                                    longitude: individual.stats.demography.deathInfo.place.coordinates?.longitude
                                }
                            },
                            ageAtDeath: individual.stats.demography.deathInfo.ageAtDeath
                        },
                        generation: individual.stats.demography.generation
                    },
                    family: {
                        parentalFamily: {
                            fatherId: individual.stats.family.parentalFamily.fatherId,
                            motherId: individual.stats.family.parentalFamily.motherId,
                            siblingCount: individual.stats.family.parentalFamily.siblingCount
                        },
                        marriages: individual.stats.family.marriages.map(m => ({
                            date: m.date,
                            place: {
                                town: m.place.town,
                                departement: m.place.departement,
                                country: m.place.country
                            },
                            spouseId: m.spouseId,
                            childrenCount: m.childrenCount
                        })),
                        totalChildren: individual.stats.family.totalChildren
                    },
                    identity: {
                        firstName: individual.stats.identity.firstName,
                        lastName: individual.stats.identity.lastName,
                        gender: individual.stats.identity.gender,
                        occupations: individual.stats.identity.occupations.map(o => ({
                            value: o.value,
                            date: o.date,
                            year: o.year,
                            type: o.type
                        }))
                    }
                }
            };
        });
    }

    updateStatisticsStore(statistics, scope) {
        if (scope === 'family') {
            statisticsStore.updateFamilyStatistics(statistics);
        } else if (scope?.type === 'individual') {
            statisticsStore.updateIndividualStatistics(scope.rootId, statistics);
        }
    }

    destroy() {
        if (this.worker) {
            this.worker.terminate();
            this.worker = null;
        }
    }
}

export const statisticsService = new StatisticsService();

================
File: assets/scripts/geneafan/tabs/statistics/workers/statisticsWorker.js
================
function getPeriod(year) {
    if (!year) return null;
    const baseYear = Math.floor(year / 25) * 25;
    return `${baseYear}-${baseYear + 24}`;
}

function calculateMedian(ages) {
    if (!ages.length) return null;
    const sorted = [...ages].sort((a, b) => a - b);
    const middle = Math.floor(sorted.length / 2);
    if (sorted.length % 2 === 0) {
        return (sorted[middle - 1] + sorted[middle]) / 2;
    }
    return sorted[middle];
}

function getCentury(year) {
    if (!year) return null;
    
    // Convert to number if string
    year = parseInt(year);
    
    // Get century using Math.floor((year-1)/100) + 1
    const century = Math.floor((year - 1) / 100) + 1;
    
    // Map to our coding scheme - tout ce qui est 18e siècle et avant est regroupé
    if (century <= 18) return 's18';
    return `s${century}`;
}

function processAgeStats(individual, statistics) {
    const { demography: demoStats, identity } = individual.stats;
    
    if (!demoStats.birthInfo.year || !demoStats.deathInfo.year || !demoStats.deathInfo.ageAtDeath) {
        return;
    }

    const age = demoStats.deathInfo.ageAtDeath;
    const birthYear = demoStats.birthInfo.year;
    
    // Déterminer le siècle de naissance selon la convention standard (00-99)
    const birthCentury = getCentury(birthYear);

    // Découpage des tranches d'âge
    const ageRange = age <= 1 ? "0-1" :
                    age <= 5 ? "1-5" :
                    age <= 10 ? "6-10" : getAgeRange(age);

    // Distribution globale
    if (statistics.demography.ageDistribution[ageRange] !== undefined) {
        statistics.demography.ageDistribution[ageRange]++;
    }

    // Initialisation des statistiques par siècle si nécessaire
    if (!statistics.demography.mortality.byCentury) {
        statistics.demography.mortality.byCentury = {};
    }

    if (!statistics.demography.mortality.byCentury[birthCentury]) {
        statistics.demography.mortality.byCentury[birthCentury] = {
            total: 0,
            ages: [],
            ageRanges: {
                "0-1": 0, "1-5": 0, "6-10": 0, "11-20": 0,
                "21-30": 0, "31-40": 0, "41-50": 0, "51-60": 0,
                "61-70": 0, "71-80": 0, "81-90": 0, "91+": 0
            }
        };
    }

    // Mise à jour des statistiques du siècle
    const centuryStats = statistics.demography.mortality.byCentury[birthCentury];
    centuryStats.total++;
    centuryStats.ages.push(age);
    
    if (ageRange in centuryStats.ageRanges) {
        centuryStats.ageRanges[ageRange]++;
    }

    // Statistiques espérance de vie par décennie
    const birthDecade = Math.floor(birthYear / 10) * 10;
    if (!statistics.demography.lifeExpectancy.byDecade[birthDecade]) {
        statistics.demography.lifeExpectancy.byDecade[birthDecade] = [];
    }
    statistics.demography.lifeExpectancy.byDecade[birthDecade].push(age);
}

function processStatistics(data) {
    const { individuals, scope } = data;
    
    const statistics = {
        demography: {
            total: 0,
            gender: { male: 0, female: 0, unknown: 0 },
            generations: new Map(),
            lifeExpectancy: {
                byDecade: {},
                average: 0
            },
            ageDistribution: {
                "0-1": 0, "1-5": 0, "6-10": 0, 
                "11-20": 0, "21-30": 0, "31-40": 0,
                "41-50": 0, "51-60": 0, "61-70": 0, 
                "71-80": 0, "81-90": 0, "91+": 0
            },
            mortality: {
                byPeriod: {},
                infantMortality: {},
                medianAge: {},
                byGender: {
                    male: {},
                    female: {}
                }
            }
        },

        // Géographie - structure mise à jour
        geography: {
            birthPlaces: new Map(),
            deathPlaces: new Map(),
            migrations: {
                count: 0,
                localCount: 0,
                paths: new Map(),
                distances: [],
                averageDistance: 0
            },
            byGeneration: new Map()
        },

        // Reste des statistiques inchangé
        occupations: {
            total: 0,
            byType: new Map(),
            byGeneration: new Map(),
            evolution: new Map(),
            mobility: {
                parentChild: new Map(),
                count: 0
            }
        },

        family: {
            marriages: {
                total: 0,
                ageAtMarriage: [],
                byDecade: new Map()
            },
            children: {
                average: 0,
                distribution: new Map(),
                byGeneration: new Map()
            },
            siblings: {
                average: 0,
                distribution: new Map()
            }
        },

        names: {
            firstNames: {
                male: new Map(),
                female: new Map()
            },
            transmission: {
                fromParents: 0,
                total: 0
            },
            byDecade: new Map()
        }
    };

    self.postMessage({
        type: 'progress',
        data: 0
    });

    console.log('Initial age distribution:', statistics.demography.ageDistribution);

    individuals.forEach((individual, index) => {
        const { family, identity } = individual.stats;

        // Compteurs globaux
        statistics.demography.total++;
        statistics.demography.gender[identity.gender]++;

        // Traitement des statistiques d'âge et mortalité
        processAgeStats(individual, statistics);;
    
        // Traitement des statistiques géographiques
        processGeographyStats(individual, statistics);

        // Traitement des professions
        if (identity.occupations && identity.occupations.length > 0) {
            statistics.occupations.total++;
            identity.occupations.forEach(occ => {
                statistics.occupations.byType.set(
                    occ.value,
                    (statistics.occupations.byType.get(occ.value) || 0) + 1
                );

                if (occ.year) {
                    const decade = Math.floor(occ.year / 10) * 10;
                    if (!statistics.occupations.evolution.has(decade)) {
                        statistics.occupations.evolution.set(decade, new Map());
                    }
                    const decadeMap = statistics.occupations.evolution.get(decade);
                    decadeMap.set(occ.value, (decadeMap.get(occ.value) || 0) + 1);
                }
            });
        }

        // Statistiques familiales
        if (family.marriages && family.marriages.length > 0) {
            statistics.family.marriages.total++;
            family.marriages.forEach(marriage => {
                if (marriage.date) {
                    const decade = Math.floor(marriage.date.year / 10) * 10;
                    statistics.family.marriages.byDecade.set(
                        decade,
                        (statistics.family.marriages.byDecade.get(decade) || 0) + 1
                    );
                }
            });
        }

        if (family.totalChildren > 0) {
            statistics.family.children.distribution.set(
                family.totalChildren,
                (statistics.family.children.distribution.get(family.totalChildren) || 0) + 1
            );
        }

        if (family.parentalFamily.siblingCount > 0) {
            statistics.family.siblings.distribution.set(
                family.parentalFamily.siblingCount,
                (statistics.family.siblings.distribution.get(family.parentalFamily.siblingCount) || 0) + 1
            );
        }

        // Statistiques des prénoms
        if (identity.firstName) {
            const genderMap = identity.gender === 'male' ?
                statistics.names.firstNames.male :
                statistics.names.firstNames.female;

            genderMap.set(
                identity.firstName,
                (genderMap.get(identity.firstName) || 0) + 1
            );
        }

        // Progression
        if (index % 100 === 0) {
            self.postMessage({
                type: 'progress',
                data: Math.round((index / individuals.length) * 100)
            });
        }
    });

    // Finalisation
    finalizeDemographyStats(statistics);
    finalizeGeographyStats(statistics);
    finalizeFamilyStats(statistics);
    finalizeNameStats(statistics);

    console.log('Final age distribution:', statistics.demography.ageDistribution);

    self.postMessage({
        type: 'statistics',
        data: statistics,
        scope: scope
    });
}

function processGeographyStats(individual, statistics) {
    const { demography } = individual.stats;

    if (demography.birthInfo.place.town) {
        const birthPlace = `${demography.birthInfo.place.town}, ${demography.birthInfo.place.departement}`;
        const deathPlace = demography.deathInfo.place.town ?
            `${demography.deathInfo.place.town}, ${demography.deathInfo.place.departement}` : null;

        // Initialiser ou obtenir les stats pour ce lieu de naissance
        let birthStats = statistics.geography.birthPlaces.get(birthPlace) || {
            total: 0,           // Total des naissances
            stayedCount: 0,     // Restés sur place (<10km)
            localMoveCount: 0,  // Déplacement local (10-20km)
            movedCount: 0,      // Migration réelle (>20km)
            unknownCount: 0     // Lieu de décès inconnu
        };

        birthStats.total++;

        if (deathPlace) {
            const distance = calculateDistance(
                demography.birthInfo.place.coordinates,
                demography.deathInfo.place.coordinates
            );

            let moveType = 'unknown';
            if (birthPlace === deathPlace) {
                moveType = 'stayed';
            } else if (distance !== null) {
                if (distance <= 10) {
                    moveType = 'stayed';
                } else if (distance <= 20) {
                    moveType = 'local';
                } else {
                    moveType = 'moved';
                }
            } else {
                // Si pas de coordonnées mais lieux différents
                moveType = 'moved';
            }

            // Mise à jour des statistiques du lieu de décès
            let deathStats = statistics.geography.deathPlaces.get(deathPlace) || {
                total: 0,
                fromHere: 0,        // Nés et décédés ici ou très proche
                fromLocal: 0,       // Venus d'un lieu proche
                fromElsewhere: 0    // Venus de plus loin
            };
            deathStats.total++;

            // Mettre à jour les statistiques selon le type de déplacement
            switch (moveType) {
                case 'stayed':
                    birthStats.stayedCount++;
                    deathStats.fromHere++;
                    break;

                case 'local':
                    birthStats.localMoveCount++;
                    deathStats.fromLocal++;
                    statistics.geography.migrations.localCount =
                        (statistics.geography.migrations.localCount || 0) + 1;
                    break;

                case 'moved':
                    birthStats.movedCount++;
                    deathStats.fromElsewhere++;
                    statistics.geography.migrations.count++;

                    // Enregistrer le chemin de migration
                    const pathKey = `${birthPlace}=>${deathPlace}`;
                    statistics.geography.migrations.paths.set(
                        pathKey,
                        (statistics.geography.migrations.paths.get(pathKey) || 0) + 1
                    );
                    break;
            }

            // Enregistrer la distance si disponible
            if (distance !== null) {
                statistics.geography.migrations.distances.push({
                    distance,
                    type: moveType,
                    birthPlace,
                    deathPlace
                });
            }

            // Mettre à jour les statistiques des lieux de décès
            statistics.geography.deathPlaces.set(deathPlace, deathStats);
        } else {
            // Cas où le lieu de décès est inconnu
            birthStats.unknownCount++;
        }

        // Vérification de l'égalité des totaux
        const computedTotal = birthStats.stayedCount +
            birthStats.localMoveCount +
            birthStats.movedCount +
            birthStats.unknownCount;

        if (computedTotal !== birthStats.total) {
            console.error(`Incohérence dans les totaux pour ${birthPlace}: 
                Total=${birthStats.total}, 
                Somme=${computedTotal} 
                (Stayed=${birthStats.stayedCount}, 
                Local=${birthStats.localMoveCount}, 
                Moved=${birthStats.movedCount}, 
                Unknown=${birthStats.unknownCount})`);
        }

        // Mettre à jour les statistiques des lieux de naissance
        statistics.geography.birthPlaces.set(birthPlace, birthStats);

        // Mettre à jour les statistiques par génération
        if (demography.generation) {
            const genStats = statistics.geography.byGeneration.get(demography.generation) || new Map();
            const genCount = genStats.get(birthPlace) || 0;
            genStats.set(birthPlace, genCount + 1);
            statistics.geography.byGeneration.set(demography.generation, genStats);
        }
    }
}

function getAgeRange(age) {
    // Simplification de la fonction pour éviter les erreurs de calcul
    if (age <= 10) return '0-10';
    if (age <= 20) return '11-20';
    if (age <= 30) return '21-30';
    if (age <= 40) return '31-40';
    if (age <= 50) return '41-50';
    if (age <= 60) return '51-60';
    if (age <= 70) return '61-70';
    if (age <= 80) return '71-80';
    if (age <= 90) return '81-90';
    return '91+';
}

function calculateDistance(coord1, coord2) {
    if (!coord1 || !coord2) return null;

    const R = 6371; // Rayon de la Terre en km
    const lat1 = parseFloat(coord1.latitude) * Math.PI / 180;
    const lat2 = parseFloat(coord2.latitude) * Math.PI / 180;
    const lon1 = parseFloat(coord1.longitude) * Math.PI / 180;
    const lon2 = parseFloat(coord2.longitude) * Math.PI / 180;

    const dLat = lat2 - lat1;
    const dLon = lon2 - lon1;

    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(lat1) * Math.cos(lat2) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c;
}

function finalizeDemographyStats(statistics) {
    // Log de la distribution globale des âges
    console.log('Final age distribution:', {
        distribution: { ...statistics.demography.ageDistribution },
        total: Object.values(statistics.demography.ageDistribution)
            .reduce((sum, count) => sum + count, 0)
    });

    // Log de la distribution par siècle de naissance avec labels corrects
    if (statistics.demography.mortality.byCentury) {
        console.group('Distribution par siècle de naissance:');
        const centuryLabels = {
            's18': '18ème siècle et avant',
            's19': '19ème siècle (1800-1899)',
            's20': '20ème siècle (1900-1999)',
            's21': '21ème siècle (2000-2099)'
        };

        Object.entries(statistics.demography.mortality.byCentury)
            .sort(([a], [b]) => {
                // Tri des siècles dans l'ordre chronologique
                const order = ['s18', 's19', 's20', 's21'];
                return order.indexOf(a) - order.indexOf(b);
            })
            .forEach(([century, stats]) => {
                const percentage = ((stats.total / statistics.demography.total) * 100).toFixed(1);
                console.log(`${centuryLabels[century]}: ${stats.total} personnes (${percentage}%)`);
                
                // Log détaillé de la distribution des âges pour ce siècle
                console.group('Distribution des âges:');
                Object.entries(stats.ageRanges)
                    .filter(([, count]) => count > 0)  // Ne montrer que les tranches d'âge non vides
                    .forEach(([range, count]) => {
                        const rangePercentage = ((count / stats.total) * 100).toFixed(1);
                        console.log(`${range} ans: ${count} personnes (${rangePercentage}%)`);
                    });
                console.groupEnd();
            });
        console.groupEnd();
    }

    // Calculer l'espérance de vie moyenne par décennie
    Object.entries(statistics.demography.lifeExpectancy.byDecade).forEach(([decade, ages]) => {
        statistics.demography.lifeExpectancy.byDecade[decade] =
            ages.reduce((a, b) => a + b, 0) / ages.length;
    });

    // Calculer l'espérance de vie moyenne globale
    const allAges = Object.values(statistics.demography.ageDistribution)
        .reduce((a, b) => a + b, 0);
    statistics.demography.lifeExpectancy.average = allAges /
        statistics.demography.total;
}

function finalizeGeographyStats(statistics) {
    // Convertir les Maps en objets
    statistics.geography.birthPlaces = Object.fromEntries(
        Array.from(statistics.geography.birthPlaces.entries()).map(([place, stats]) => {
            // Ajouter des statistiques sur la répartition
            stats.percentages = {
                stayed: (stats.stayedCount / stats.total * 100).toFixed(1),
                local: (stats.localMoveCount / stats.total * 100).toFixed(1),
                moved: (stats.movedCount / stats.total * 100).toFixed(1),
                unknown: (stats.unknownCount / stats.total * 100).toFixed(1)
            };
            return [place, stats];
        })
    );
    statistics.geography.deathPlaces = Object.fromEntries(statistics.geography.deathPlaces);
    statistics.geography.migrations.paths = Object.fromEntries(statistics.geography.migrations.paths);

    // Calculer la distance moyenne de migration
    if (statistics.geography.migrations.distances.length > 0) {
        statistics.geography.migrations.averageDistance =
            statistics.geography.migrations.distances.reduce((a, b) => a + b, 0) /
            statistics.geography.migrations.distances.length;
    }

    // Convertir les statistiques par génération
    statistics.geography.byGeneration = Object.fromEntries(
        Array.from(statistics.geography.byGeneration.entries())
            .map(([gen, places]) => [gen, Object.fromEntries(places)])
    );
}

function finalizeFamilyStats(statistics) {
    // Calculer la moyenne d'enfants par couple
    let totalChildren = 0;
    let totalFamilies = 0;
    statistics.family.children.distribution.forEach((count, size) => {
        totalChildren += size * count;
        totalFamilies += count;
    });
    statistics.family.children.average =
        totalFamilies > 0 ? totalChildren / totalFamilies : 0;

    // Convertir les Maps en objets
    statistics.family.children.distribution =
        Object.fromEntries(statistics.family.children.distribution);
    statistics.family.siblings.distribution =
        Object.fromEntries(statistics.family.siblings.distribution);
}

function finalizeNameStats(statistics) {
    // Convertir les Maps de prénoms en objets
    statistics.names.firstNames.male =
        Object.fromEntries(statistics.names.firstNames.male);
    statistics.names.firstNames.female =
        Object.fromEntries(statistics.names.firstNames.female);

    // Calculer le taux de transmission des prénoms
    if (statistics.names.transmission.total > 0) {
        statistics.names.transmission.rate =
            statistics.names.transmission.fromParents /
            statistics.names.transmission.total;
    }
}

self.addEventListener('message', (e) => {
    if (e.data.type === 'process') {
        processStatistics(e.data.data);
    }
});

================
File: assets/scripts/geneafan/tabs/statistics/statisticsManager.js
================
import * as d3 from 'd3';
import statisticsStore from './statisticsStore.js';
import { Tooltip } from 'bootstrap';

class StatisticsManager {
    constructor() {
        this.charts = {};
        this.margins = { top: 20, right: 20, bottom: 30, left: 40 };
        this.initialized = false;
        this.minHeight = 1;
        this.minChartWidth = 300;
        this.minChartHeight = 200;

        // Bind methods
        this.initialize = this.initialize.bind(this);
        this.updateCharts = this.updateCharts.bind(this);
        this.resize = this.resize.bind(this);

        // Subscribe to statistics updates
        statisticsStore.subscribeToUpdates(this.updateCharts);
    }

    initialize() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', this.initialize);
            return;
        }

        const containers = ['#age-chart', '#lifespan-chart'];

        // Vérifier que les conteneurs et les données sont disponibles
        const stats = statisticsStore.getStatistics('family');
        if (!containers.every(id => document.querySelector(id)) || !stats?.demography) {
            setTimeout(this.initialize, 500);
            return;
        }

        try {
            this.cleanupContainers();
            this.updateBasicStats();
            this.createDemographyCharts();
            this.initializeNavigation();

            if (!this.initialized) {
                window.addEventListener('resize', this.resize);
                this.initialized = true;
            }
        } catch (error) {
            console.error('Error initializing statistics manager:', error);
        }
    }

    initializeNavigation() {
        const navLinks = document.querySelectorAll('.statistics-container .nav.nav-pills .nav-link');

        if (!navLinks.length) {
            console.warn('Navigation links not found');
            return;
        }

        navLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();

                const targetId = this.getAttribute('href');
                const targetSection = document.querySelector(targetId);
                const container = document.querySelector('.tab-pane.statistics-container');
                const stickyOverview = document.querySelector('.sticky-overview');

                if (targetSection && container && stickyOverview) {
                    const headerHeight = stickyOverview.offsetHeight + 20;
                    const containerRect = container.getBoundingClientRect();
                    const sectionRect = targetSection.getBoundingClientRect();
                    const scrollTop = container.scrollTop + (sectionRect.top - containerRect.top) - headerHeight;

                    container.scrollTo({
                        top: scrollTop,
                        behavior: 'smooth'
                    });

                    navLinks.forEach(l => l.classList.remove('active'));
                    this.classList.add('active');
                }
            });
        });
    }

    updateBasicStats(stats = null) {
        stats = stats || statisticsStore.getStatistics('family');
        if (!stats?.demography) return;

        const format = (value, decimals = 1) => {
            if (value === undefined || isNaN(value)) return '0.0';
            return parseFloat(value).toFixed(decimals);
        };

        const avgLifeExpectancy = stats.demography.lifeExpectancy.average ||
            this.calculateAverageLifeExpectancy(stats.demography.lifeExpectancy.byDecade);

        d3.select('#total-individuals').text(stats.demography.total || 0);
        d3.select('#total-marriages').text(stats.family?.marriages?.total || 0);
        d3.select('#avg-children').text(format(stats.family?.children?.average, 1));
        d3.select('#avg-lifespan').text(`${format(avgLifeExpectancy, 1)} ans`);
    }

    updateCharts(newStats) {
        if (!this.initialized || newStats?.scope !== 'family') return;

        try {
            this.cleanupContainers();
            this.updateBasicStats(newStats);
            this.createDemographyCharts();
        } catch (error) {
            console.error('Error updating charts:', error);
        }
    }

    createDemographyCharts() {
        const stats = statisticsStore.getStatistics('family');
        if (!stats?.demography) {
            console.warn('No family demography statistics available');
            return;
        }

        if (stats.demography.ageDistribution) {
            this.createAgeDistributionChart();
        }
        if (stats.demography.lifeExpectancy) {
            this.createLifeExpectancyChart();
        }
        if (stats.geography) {
            this.createBirthDeathPlacesChart();
        }
    }

    createGenderDistributionChart() {
        const stats = statisticsStore.getStatistics('family')?.demography?.gender;
        if (!stats) return;

        const container = d3.select('#gender-chart');
        const width = this.getContainerWidth(container);
        const height = this.getContainerHeight(width, true);
        const radius = Math.min(width, height) / 2;

        const svg = this.createSvg(container, width, height, true);

        const data = [
            { name: 'Hommes', value: stats.male || 0 },
            { name: 'Femmes', value: stats.female || 0 }
        ].filter(d => d.value > 0);

        if (data.length > 0) {
            this.createPieChart(svg, data, radius);
            this.charts.gender = { svg, width, height };
        }
    }

    createAgeDistributionChart() {
        const stats = statisticsStore.getStatistics('family');
        if (!stats?.demography?.mortality?.byCentury) return;
    
        const container = d3.select('#age-chart');
        if (!container.node()) return;
    
        // Nettoyer le conteneur
        container.selectAll('*').remove();
    
        const margins = {
            top: 20,
            right: 160,
            bottom: 80,
            left: 50
        };
    
        const containerWidth = container.node().getBoundingClientRect().width;
        const width = Math.max(this.minChartWidth, containerWidth - margins.left - margins.right);
        const height = Math.max(this.getContainerHeight(width), 400);
    
        const svg = container.append('svg')
            .attr('width', width + margins.left + margins.right)
            .attr('height', height + margins.top + margins.bottom)
            .append('g')
            .attr('transform', `translate(${margins.left},${margins.top})`);
    
        const ageRanges = ["0-1", "1-5", "6-10", "11-20", "21-30", "31-40",
            "41-50", "51-60", "61-70", "71-80", "81-90", "91+"];
    
        const centuries = ['s18', 's19', 's20', 's21'];
        const centuryLabels = {
            's18': '18ème siècle et avant',
            's19': '19ème siècle',
            's20': '20ème siècle',
            's21': '21ème siècle'
        };
    
        const colors = {
            's18': '#082f49',
            's19': '#0891b2',
            's20': '#22d3ee',
            's21': '#67e8f9'
        };
    
        // Préparation des données avec pourcentages
        const data = ageRanges.map(range => {
            const rangeData = { range };
            centuries.forEach(century => {
                const centuryData = stats.demography.mortality.byCentury[century];
                const count = centuryData?.ageRanges[range] || 0;
                const total = centuryData?.total || 0;
                rangeData[century] = total > 0 ? (count / total) * 100 : 0;
                rangeData[`${century}_count`] = count;
            });
            return rangeData;
        });
    
        const x = d3.scaleBand()
            .domain(ageRanges)
            .range([0, width])
            .padding(0.1);
    
        const y = d3.scaleLinear()
            .domain([0, 100])
            .nice()
            .range([height, 0]);
    
        const stack = d3.stack()
            .keys(centuries)
            .order(d3.stackOrderNone)
            .offset(d3.stackOffsetNone);
    
        const stackedData = stack(data);
    
        // Grille horizontale
        svg.append('g')
            .attr('class', 'grid')
            .selectAll('line')
            .data(y.ticks())
            .enter()
            .append('line')
            .attr('x1', 0)
            .attr('x2', width)
            .attr('y1', d => y(d))
            .attr('y2', d => y(d))
            .attr('stroke', '#e5e7eb')
            .attr('stroke-width', 1);
    
        // Barres empilées
        svg.selectAll('g.century')
            .data(stackedData)
            .enter()
            .append('g')
            .attr('class', 'century')
            .attr('fill', d => colors[d.key])
            .selectAll('rect')
            .data(d => d)
            .enter()
            .append('rect')
            .attr('x', d => x(d.data.range))
            .attr('y', d => y(d[1]))
            .attr('height', d => y(d[0]) - y(d[1]))
            .attr('width', x.bandwidth())
            .attr('data-bs-toggle', 'tooltip')
            .attr('data-bs-placement', 'top')
            .attr('data-bs-html', 'true')
            .attr('data-bs-title', function(d) {
                const century = d3.select(this.parentNode).datum().key;
                const percentage = (d[1] - d[0]).toFixed(1);
                const count = d.data[`${century}_count`];
                return `
                    <div style="text-align: left;">
                        <strong>${centuryLabels[century]}</strong><br>
                        Âge: ${d.data.range}<br>
                        Nombre: ${count}<br>
                        Pourcentage: ${percentage}%
                    </div>
                `;
            })
            .on('mouseenter', function() {
                d3.select(this).attr('fill-opacity', 0.8);
            })
            .on('mouseleave', function() {
                d3.select(this).attr('fill-opacity', 1);
            });
    
        // Calculer les totaux par tranche d'âge
        const totals = data.reduce((acc, d) => {
            const totalForRange = centuries.reduce((sum, century) => {
                return sum + d[`${century}_count`];
            }, 0);
            acc[d.range] = totalForRange;
            return acc;
        }, {});
    
        const grandTotal = Object.values(totals).reduce((sum, val) => sum + val, 0);
    
        // Ajouter les labels au-dessus des barres empilées
        svg.selectAll('.bar-total-label')
            .data(data)
            .enter()
            .append('text')
            .attr('class', 'bar-total-label')
            .attr('x', d => x(d.range) + x.bandwidth() / 2)
            .attr('y', d => {
                const total = centuries.reduce((sum, century) => sum + d[century], 0);
                return y(total) - 5;
            })
            .attr('text-anchor', 'middle')
            .attr('font-size', '10px')
            .text(d => {
                const total = totals[d.range];
                const percentage = ((total / grandTotal) * 100).toFixed(1);
                return `${total} (${percentage}%)`;
            });
    
        // Axes
        svg.append('g')
            .attr('class', 'x-axis')
            .attr('transform', `translate(0,${height})`)
            .call(d3.axisBottom(x))
            .selectAll('text')
            .attr('transform', 'rotate(-45)')
            .style('text-anchor', 'end')
            .attr('dx', '-.8em')
            .attr('dy', '.15em');
    
        svg.append('g')
            .attr('class', 'y-axis')
            .call(d3.axisLeft(y).tickFormat(d => d + '%'));
    
        // Labels des axes
        svg.append('text')
            .attr('x', width / 2)
            .attr('y', height + margins.bottom - 10)
            .attr('text-anchor', 'middle')
            .text('Âge au décès (années)');
    
        svg.append('text')
            .attr('transform', 'rotate(-90)')
            .attr('y', -margins.left + 15)
            .attr('x', -height / 2)
            .attr('text-anchor', 'middle')
            .text('Pourcentage de personnes par siècle');
    
        // Légende
        const legend = svg.append('g')
            .attr('class', 'legend')
            .attr('transform', `translate(${width + 20}, 0)`);
    
        centuries.forEach((century, i) => {
            const legendGroup = legend.append('g')
                .attr('transform', `translate(0, ${i * 25})`);
    
            legendGroup.append('rect')
                .attr('width', 18)
                .attr('height', 18)
                .attr('fill', colors[century]);
    
            legendGroup.append('text')
                .attr('x', 24)
                .attr('y', 14)
                .style('font-size', '12px')
                .text(centuryLabels[century]);
        });
    
        // Initialiser les tooltips
        const tooltipTriggerList = svg.selectAll('[data-bs-toggle="tooltip"]').nodes();
        tooltipTriggerList.forEach(el => {
            new Tooltip(el, {
                container: 'body',
                html: true
            });
        });
    
        return { svg, width, height };
    }

    createLifeExpectancyChart() {
        const stats = statisticsStore.getStatistics('family');
        if (!stats?.demography?.lifeExpectancy?.byDecade) return;

        const container = d3.select('#lifespan-chart');
        const width = this.getContainerWidth(container);
        const height = this.getContainerHeight(width);

        const svg = this.createSvg(container, width, height);

        // Convert data to array format
        const data = Object.entries(stats.demography.lifeExpectancy.byDecade)
            .map(([decade, value]) => ({
                decade: parseInt(decade),
                value: value
            }))
            .sort((a, b) => a.decade - b.decade);

        // Only create chart if we have valid data
        if (data.length > 0) {
            this.createLineChart(svg, data, width, height, {
                lineColor: '#0ea5e9',
                xLabel: 'Décennie',
                yLabel: 'Espérance de vie moyenne (années)'
            });

            this.charts.lifespan = { svg, width, height };
        }
    }

    calculateAverageLifeExpectancy(byDecade) {
        if (!byDecade) return 0;
        const values = Object.values(byDecade);
        if (values.length === 0) return 0;

        const validValues = values.filter(v => !isNaN(v));
        if (validValues.length === 0) return 0;

        return validValues.reduce((sum, val) => sum + val, 0) / validValues.length;
    }

    createLineChart(svg, data, width, height, options) {
        if (!data || data.length === 0) return;

        const x = d3.scaleLinear()
            .range([0, width])
            .domain(d3.extent(data, d => d.decade));

        const y = d3.scaleLinear()
            .range([height, 0])
            .domain([0, d3.max(data, d => d.value) * 1.1]);

        // Axes
        svg.append('g')
            .attr('transform', `translate(0,${height})`)
            .call(d3.axisBottom(x).tickFormat(d => d));

        svg.append('g')
            .call(d3.axisLeft(y));

        // Ligne
        const line = d3.line()
            .x(d => x(d.decade))
            .y(d => y(d.value));

        svg.append('path')
            .datum(data)
            .attr('fill', 'none')
            .attr('stroke', options.lineColor)
            .attr('stroke-width', 2)
            .attr('d', line);

        if (options.xLabel) {
            svg.append('text')
                .attr('transform', `translate(${width / 2},${height + 25})`)
                .style('text-anchor', 'middle')
                .text(options.xLabel);
        }

        if (options.yLabel) {
            svg.append('text')
                .attr('transform', 'rotate(-90)')
                .attr('y', -40)
                .attr('x', -height / 2)
                .style('text-anchor', 'middle')
                .text(options.yLabel);
        }
    }

    createBarChart(svg, data, width, height, options = {}) {
        if (!data || data.length === 0) return;

        const x = d3.scaleBand()
            .range([0, width])
            .padding(0.1)
            .domain(data.map(d => d.range));

        const y = d3.scaleLinear()
            .range([height, 0])
            .domain([0, d3.max(data, d => d.value) * 1.1]);

        svg.append('g')
            .attr('transform', `translate(0,${height})`)
            .call(d3.axisBottom(x));

        svg.append('g')
            .call(d3.axisLeft(y));

        svg.selectAll('.bar')
            .data(data)
            .enter()
            .append('rect')
            .attr('class', 'bar')
            .attr('x', d => x(d.range))
            .attr('width', x.bandwidth())
            .attr('y', d => y(d.value))
            .attr('height', d => Math.max(this.minHeight, height - y(d.value)))
            .attr('fill', '#36A2EB');

        if (options.xLabel) {
            svg.append('text')
                .attr('transform', `translate(${width / 2},${height + 25})`)
                .style('text-anchor', 'middle')
                .text(options.xLabel);
        }

        if (options.yLabel) {
            svg.append('text')
                .attr('transform', 'rotate(-90)')
                .attr('y', -40)
                .attr('x', -height / 2)
                .style('text-anchor', 'middle')
                .text(options.yLabel);
        }
    }

    createPieChart(svg, data, radius) {
        if (!data || data.length === 0) {
            console.warn('No valid data for pie chart');
            return;
        }

        const color = d3.scaleOrdinal()
            .domain(data.map(d => d.name))
            .range(['#36A2EB', '#FF6384']);

        const pie = d3.pie()
            .value(d => d.value);

        const arc = d3.arc()
            .innerRadius(0)
            .outerRadius(radius * 0.8);

        const arcs = svg.selectAll('arc')
            .data(pie(data))
            .enter()
            .append('g');

        arcs.append('path')
            .attr('d', arc)
            .attr('fill', d => color(d.data.name));

        const total = d3.sum(data, d => d.value);
        arcs.append('text')
            .attr('transform', d => `translate(${arc.centroid(d)})`)
            .attr('dy', '.35em')
            .style('text-anchor', 'middle')
            .style('fill', 'white')
            .text(d => `${((d.data.value / total) * 100).toFixed(1)}%`);

        this.addLegend(svg, data, color, radius);
    }

    createBirthDeathPlacesChart() {
        const stats = statisticsStore.getStatistics()?.geography;
        if (!stats?.birthPlaces) {
            console.warn('No geographic statistics available');
            return;
        }

        const container = d3.select('#birth-death-places-chart');
        container.selectAll('*').remove();

        // Préparer les données : filtrer les lieux avec plus d'une naissance
        const data = Object.entries(stats.birthPlaces)
            .map(([place, stats]) => ({
                place,
                stayedCount: stats.stayedCount || 0,
                localMoveCount: stats.localMoveCount || 0,
                movedCount: stats.movedCount || 0,
                unknownCount: stats.unknownCount || 0,
                total: stats.total || 0,
                percentages: stats.percentages || {}
            }))
            .filter(d => d.total > 1) // Filtrer les lieux avec plus d'une naissance
            .sort((a, b) => b.total - a.total)
            .slice(0, 15); // Limiter aux 15 premières villes

        // Dimensions ajustées pour plus de places
        const margins = {
            top: 30,
            right: 240,
            bottom: 40,
            left: 240
        };

        // Augmentation de la hauteur pour accommoder plus de villes
        const width = Math.max(800, container.node().getBoundingClientRect().width * (8 / 12) - margins.left - margins.right);
        const height = Math.max(500, data.length * 35); // Hauteur ajustée: 35px par ville

        // Create SVG
        const svg = container.append('svg')
            .attr('width', width + margins.left + margins.right)
            .attr('height', height + margins.top + margins.bottom)
            .append('g')
            .attr('transform', `translate(${margins.left},${margins.top})`);

        // Scales
        const y = d3.scaleBand()
            .domain(data.map(d => d.place))
            .range([0, height])
            .padding(0.2);

        const x = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.total)])
            .range([0, width]);

        // Axes
        svg.append('g')
            .attr('class', 'x-axis')
            .attr('transform', `translate(0,${height})`)
            .call(d3.axisBottom(x).ticks(10).tickFormat(d3.format('d')))
            .selectAll('text')
            .style('font-size', '12px');

        svg.append('g')
            .attr('class', 'y-axis')
            .call(d3.axisLeft(y))
            .selectAll('text')
            .style('font-size', '12px')
            .style('text-anchor', 'end')
            .attr('dx', '-0.5em')
            .attr('dy', '0.3em');

        // Barres empilées
        const barGroups = svg.append('g')
            .selectAll('g')
            .data(data)
            .enter()
            .append('g')
            .attr('transform', d => `translate(0,${y(d.place)})`);

        // Configuration des couleurs
        const colors = {
            stayed: '#4ade80',      // vert
            localMove: '#facc15',   // jaune
            moved: '#f87171',       // rouge
            unknown: '#94a3b8'      // gris
        };

        // Fonction pour calculer la position x de chaque segment
        function getXPosition(d, segment) {
            switch (segment) {
                case 'stayed': return 0;
                case 'localMove': return x(d.stayedCount);
                case 'moved': return x(d.stayedCount + d.localMoveCount);
                case 'unknown': return x(d.stayedCount + d.localMoveCount + d.movedCount);
                default: return 0;
            }
        }

        // Fonction pour calculer la largeur de chaque segment
        function getWidth(d, segment) {
            switch (segment) {
                case 'stayed': return x(d.stayedCount);
                case 'localMove': return x(d.localMoveCount);
                case 'moved': return x(d.movedCount);
                case 'unknown': return x(d.unknownCount);
                default: return 0;
            }
        }

        // Créer les segments de barres
        const segments = ['stayed', 'localMove', 'moved', 'unknown'];
        segments.forEach(segment => {
            // Barres
            barGroups.append('rect')
                .attr('class', `bar-${segment}`)
                .attr('x', d => getXPosition(d, segment))
                .attr('y', 0)
                .attr('height', y.bandwidth())
                .attr('width', d => getWidth(d, segment))
                .attr('fill', colors[segment])
                .attr('rx', 2)
                .attr('ry', 2);

            // Texte dans les barres
            barGroups.append('text')
                .attr('x', d => getXPosition(d, segment) + getWidth(d, segment) / 2)
                .attr('y', y.bandwidth() / 2)
                .attr('dy', '0.35em')
                .attr('text-anchor', 'middle')
                .style('fill', 'white')
                .style('font-size', '11px')  // Taille légèrement réduite pour mieux s'adapter
                .text(d => {
                    const value = {
                        'stayed': d.stayedCount,
                        'localMove': d.localMoveCount,
                        'moved': d.movedCount,
                        'unknown': d.unknownCount
                    }[segment];
                    return value > 0 ? value : '';
                });
        });

        // Total values
        barGroups.append('text')
            .attr('x', d => x(d.total) + 5)
            .attr('y', y.bandwidth() / 2)
            .attr('dy', '0.35em')
            .style('font-size', '12px')
            .text(d => d.total);

        // Légende
        const legend = svg.append('g')
            .attr('class', 'legend')
            .attr('transform', `translate(${width + 20}, 0)`);

        legend.append('text')
            .attr('x', 0)
            .attr('y', -10)
            .style('font-size', '14px')
            .style('font-weight', 'bold')
            .text('Légende');

        // Items de légende
        const legendItems = [
            { key: 'stayed', text: 'Nés et décédés ici (<10km)' },
            { key: 'localMove', text: 'Migration locale (10-20km)' },
            { key: 'moved', text: 'Migration (>20km)' },
            { key: 'unknown', text: 'Lieu de décès inconnu' }
        ];

        legendItems.forEach((item, i) => {
            legend.append('rect')
                .attr('y', i * 25)
                .attr('width', 15)
                .attr('height', 15)
                .attr('fill', colors[item.key]);

            legend.append('text')
                .attr('x', 25)
                .attr('y', i * 25 + 12)
                .style('font-size', '12px')
                .text(item.text);
        });

        // Titre mis à jour pour refléter le nouveau critère
        svg.append('text')
            .attr('x', width / 2)
            .attr('y', -10)
            .attr('text-anchor', 'middle')
            .style('font-size', '16px')
            .style('font-weight', 'bold')
            .text('Lieux de naissance (>1 naissance) et migrations');
    }

    addLegend(svg, data, color, radius) {
        const legend = svg.append('g')
            .attr('font-family', 'sans-serif')
            .attr('font-size', 10)
            .attr('text-anchor', 'start')
            .selectAll('g')
            .data(data)
            .enter()
            .append('g')
            .attr('transform', (d, i) =>
                `translate(${radius + 10},${i * 20 - radius + 20})`);

        legend.append('rect')
            .attr('width', 15)
            .attr('height', 15)
            .attr('fill', d => color(d.name));

        legend.append('text')
            .attr('x', 20)
            .attr('y', 9.5)
            .attr('dy', '0.32em')
            .text(d => d.name);
    }

    getContainerWidth(container) {
        const node = container.node();
        if (!node) {
            console.warn('Container not found:', container);
            return this.minChartWidth;
        }
        const width = node.getBoundingClientRect().width;
        // Utiliser la largeur du conteneur ou la largeur minimale
        return Math.max(this.minChartWidth, width - this.margins.left - this.margins.right);
    }

    getContainerHeight(width, isGenderChart = false) {
        // Calculer la hauteur en fonction de la largeur, avec une hauteur minimale
        const calculatedHeight = width * (isGenderChart ? 0.6 : 0.5);
        return Math.max(this.minChartHeight, calculatedHeight);
    }

    cleanupContainers() {
        const containers = {
            age: '#age-chart',
            lifespan: '#lifespan-chart'
        };

        Object.values(containers).forEach(id => {
            const container = d3.select(id);
            if (container.node()) {
                container.selectAll('*').remove();
                container
                    .style('min-height', `${this.minChartHeight}px`)
                    .style('min-width', `${this.minChartWidth}px`);
            }
        });
    }

    createSvg(container, width, height, center = false) {
        // Nettoyer le conteneur d'abord
        container.selectAll('svg').remove();

        // S'assurer que le conteneur a une taille minimale
        container
            .style('min-height', `${this.minChartHeight}px`)
            .style('min-width', `${this.minChartWidth}px`);

        const svg = container.append('svg')
            .attr('width', width + this.margins.left + this.margins.right)
            .attr('height', height + this.margins.top + this.margins.bottom)
            .append('g');

        if (center) {
            svg.attr('transform', `translate(${width / 2},${height / 2})`);
        } else {
            svg.attr('transform', `translate(${this.margins.left},${this.margins.top})`);
        }

        return svg;
    }


    resize() {
        if (!this.initialized) return;

        this.cleanupContainers();

        // Appeler directement les méthodes de création de graphiques
        this.createAgeDistributionChart();
        this.createLifeExpectancyChart();
        this.createBirthDeathPlacesChart();  // <- Correction ici
    }

    destroy() {
        if (this.initialized) {
            Object.keys(this.charts).forEach(key => {
                d3.select(`#${key}-chart`).selectAll('*').remove();
            });
            this.charts = {};
            window.removeEventListener('resize', () => this.resize());
            this.initialized = false;
        }
    }
}

export const statisticsManager = new StatisticsManager();

================
File: assets/scripts/geneafan/tabs/statistics/statisticsStore.js
================
import { makeAutoObservable, runInAction, reaction } from 'mobx';
import gedcomDataStore from '../../gedcom/gedcomDataStore';
import { statisticsService } from './services/statisticsService';

const AGE_RANGE_ORDER = [
    "0-10", "11-20", "21-30", "31-40", "41-50",
    "51-60", "61-70", "71-80", "81-90", "91+"
];

const CENTURY_LABELS = {
    's18': '18ème siècle et avant',
    's19': '19ème siècle',
    's20': '20ème siècle',
    's21': '21ème siècle'
};

class StatisticsStore {
    familyStatistics = null;
    individualStatistics = null;
    subscribers = new Set();

    constructor() {
        makeAutoObservable(this, {
            updateFamilyStatistics: true,
            updateIndividualStatistics: true,
            resetStatistics: true,
            subscribers: false
        });

        reaction(
            () => gedcomDataStore.hierarchy,
            (hierarchy) => {
                if (hierarchy) {
                    statisticsService.processIndividualData(
                        hierarchy[0]?.id,
                        hierarchy
                    );
                }
            },
            {
                name: 'StatisticsStore-HierarchyReaction'
            }
        );
    }

    updateFamilyStatistics(newStats) {
        runInAction(() => {
            // Log détaillé des statistiques par siècle
            if (newStats?.demography?.mortality?.byCentury) {
                console.group('Statistiques détaillées par siècle de naissance');
                
                // Calcul du total des décès par siècle
                const totalDeathsByCentury = Object.values(newStats.demography.mortality.byCentury)
                    .reduce((sum, century) => sum + century.total, 0);
                
                // Vérification de cohérence
                console.group('Vérification de cohérence des données');
                console.log('Total des individus:', newStats.demography.total);
                console.log('Total des décès par siècle:', totalDeathsByCentury);
                
                // Compter les individus avec dates de naissance et décès connues
                const individualsWithKnownDates = Object.values(newStats.demography.mortality.byCentury)
                    .reduce((total, century) => {
                        return total + Object.values(century.ageRanges)
                            .reduce((sum, count) => sum + count, 0);
                    }, 0);
                
                console.log('Total des individus avec dates connues:', individualsWithKnownDates);
                
                if (totalDeathsByCentury !== individualsWithKnownDates) {
                    console.warn('⚠️ Incohérence dans les totaux de la distribution par âge !');
                    console.log('Différence:', Math.abs(totalDeathsByCentury - individualsWithKnownDates));
                }
                
                const percentageWithDates = ((individualsWithKnownDates / newStats.demography.total) * 100).toFixed(1);
                console.log(`Pourcentage d'individus avec dates connues: ${percentageWithDates}%`);
                console.groupEnd();
                
                const totalIndividuals = newStats.demography.total;
                
                Object.entries(newStats.demography.mortality.byCentury)
                    .sort(([a], [b]) => {
                        const order = ['s18', 's19', 's20', 's21'];
                        return order.indexOf(a) - order.indexOf(b);
                    })
                    .forEach(([century, stats]) => {
                        const percentage = ((stats.total / totalIndividuals) * 100).toFixed(1);
                        console.group(`${CENTURY_LABELS[century]} (${stats.total} personnes, ${percentage}%)`);
                        
                        // Distribution des âges pour ce siècle
                        if (stats.ageRanges) {
                            const sortedRanges = Object.entries(stats.ageRanges)
                                .filter(([, count]) => count > 0)
                                .sort((a, b) => {
                                    // Tri personnalisé pour les tranches d'âge
                                    const getOrder = range => {
                                        if (range === "0-1") return -1;
                                        if (range === "1-5") return -0.5;
                                        if (range === "6-10") return 0;
                                        return parseInt(range.split('-')[0]);
                                    };
                                    return getOrder(a[0]) - getOrder(b[0]);
                                });

                            // Calculer les statistiques pour ce siècle
                            const totalForCentury = stats.total;
                            const averageAge = stats.ages ? 
                                (stats.ages.reduce((sum, age) => sum + age, 0) / stats.ages.length).toFixed(1) : 
                                'N/A';

                            console.log(`Âge moyen au décès: ${averageAge} ans`);
                            console.log('Distribution des âges au décès:');
                            
                            sortedRanges.forEach(([range, count]) => {
                                const rangePercentage = ((count / totalForCentury) * 100).toFixed(1);
                                console.log(`  ${range} ans: ${count} personnes (${rangePercentage}%)`);
                            });
                        }
                        
                        console.groupEnd();
                    });

                console.groupEnd();
            }

            // Log des métriques principales
            console.group('Métriques principales');
            console.log({
                'Total des individus': newStats?.demography?.total,
                'Mariages': newStats?.family?.marriages?.total,
                'Moyenne d\'enfants': newStats?.family?.children?.average?.toFixed(1)
            });
            console.groupEnd();
    
            this.familyStatistics = newStats;
            this.notifySubscribers('family');
        });
    }

    updateIndividualStatistics(rootId, newStats) {
        runInAction(() => {
            console.group('Updating Individual Statistics');
            console.log('Root ID:', rootId);
            console.log('Individual statistics:', {
                total: newStats?.demography?.total,
                gender: newStats?.demography?.gender,
                ageDistribution: newStats?.demography?.ageDistribution
            });
            console.groupEnd();

            this.individualStatistics = newStats;
            this.notifySubscribers('individual');
        });
    }

    resetStatistics() {
        runInAction(() => {
            this.familyStatistics = null;
            this.individualStatistics = null;
        });
    }

    // Obtenir les statistiques selon le scope désiré
    getStatistics(scope = 'current') {
        const stats = (() => {
            switch (scope) {
                case 'family':
                    return this.familyStatistics;
                case 'individual':
                    return this.individualStatistics;
                case 'current':
                default:
                    return this.individualStatistics || this.familyStatistics;
            }
        })();
    
        // Ne logger que lors des mises à jour majeures
        if (scope === 'family' && stats?.demography?.ageDistribution) {
            // Utiliser l'ordre prédéfini pour créer le tableau complet
            const orderedRanges = AGE_RANGE_ORDER.map(range => ({
                range,
                count: stats.demography.ageDistribution[range] || 0
            }));
    
            console.group('Age Distribution Summary');
            console.table(orderedRanges);
            console.groupEnd();
        }
    
        return stats;
    }

    getOrderedAgeDistribution(scope = 'current') {
        const stats = this.getStatistics(scope);
        if (!stats?.demography?.ageDistribution) return [];
        
        return AGE_RANGE_ORDER.map(range => ({
            range,
            count: stats.demography.ageDistribution[range] || 0
        }));
    }

    getDemographyStats(scope = 'current') {
        return this.getStatistics(scope)?.demography;
    }

    getGeographyStats(scope = 'current') {
        return this.getStatistics(scope)?.geography;
    }

    getOccupationStats(scope = 'current') {
        return this.getStatistics(scope)?.occupations;
    }

    getFamilyStats(scope = 'current') {
        return this.getStatistics(scope)?.family;
    }

    getNameStats(scope = 'current') {
        return this.getStatistics(scope)?.names;
    }

    getAverageLifespan(scope = 'current') {
        return this.getStatistics(scope)?.demography?.lifeExpectancy?.average;
    }

    getGenderDistribution(scope = 'current') {
        const gender = this.getStatistics(scope)?.demography?.gender;
        if (!gender) return null;

        const total = Object.values(gender).reduce((a, b) => a + b, 0);
        return {
            male: (gender.male / total * 100).toFixed(1),
            female: (gender.female / total * 100).toFixed(1)
        };
    }

    getAverageChildrenPerCouple(scope = 'current') {
        return this.getStatistics(scope)?.family?.children?.average?.toFixed(1);
    }

    getMostCommonBirthPlaces(limit = 10, scope = 'current') {
        const birthPlaces = this.getStatistics(scope)?.geography?.birthPlaces;
        if (!birthPlaces) return [];

        return Object.entries(birthPlaces)
            .sort(([,a], [,b]) => b.total - a.total)
            .slice(0, limit);
    }

    getMostCommonOccupations(limit = 10, scope = 'current') {
        const occupations = this.getStatistics(scope)?.occupations?.byType;
        if (!occupations) return [];

        return Object.entries(occupations)
            .sort(([,a], [,b]) => b - a)
            .slice(0, limit);
    }

    getMostCommonFirstNames(gender, limit = 10, scope = 'current') {
        const names = this.getStatistics(scope)?.names?.firstNames?.[gender];
        if (!names) return [];

        return Object.entries(names)
            .sort(([,a], [,b]) => b - a)
            .slice(0, limit);
    }

    subscribeToUpdates(callback) {
        this.subscribers.add(callback);
    }

    notifySubscribers(scope) {
        console.log(`Notifying ${this.subscribers.size} subscribers for scope: ${scope}`);
        this.subscribers.forEach(callback => {
            try {
                callback(this.getStatistics(scope), scope);
            } catch (error) {
                console.error('Error in statistics subscriber:', error);
            }
        });
    }
}

const statisticsStore = new StatisticsStore();
export default statisticsStore;

================
File: assets/scripts/geneafan/tabs/timeline/horizontalTimeline.js
================
/* --------------------------------

Horizontal Timeline 2.0
by Studocwho @ yCodeTech

Version: 2.0.5.3

Original Horizontal Timeline by CodyHouse

Licensed under the MIT license

Docs at http://horizontal-timeline.ycodetech.co.uk

-------------------------------- */


// the semi-colon before the function invocation is a safety
// net against concatenated scripts and/or other plugins
// that are not closed properly.
;(function ( $, window, document, undefined ) {

	// undefined is used here as the undefined global
	// variable in ECMAScript 3 and is mutable (i.e. it can
	// be changed by someone else). undefined isn't really
	// being passed in so we can ensure that its value is
	// truly undefined. In ES5, undefined can no longer be
	// modified.

	// window and document are passed through as local
	// variables rather than as globals, because this (slightly)
	// quickens the resolution process and can be more
	// efficiently minified (especially when both are
	// regularly referenced in your plugin).

	// Create the defaults once
	var pluginName = 'horizontalTimeline',
		defaults = {
			// ! Deprecate these individual options in favour of the object options. //

			desktopDateIntervals: 200,   //************\\
			tabletDateIntervals: 150,   // Minimum: 120 \\
			mobileDateIntervals: 120,  //****************\\
			minimalFirstDateInterval: true,

			// ! End Deprecated options //

			/* New object options... */
			// If the deprecated single options exist in the user options, then use them,
			// otherwise default to the new object options.

			// Can not use in conjunction with the single options...
			// If both single and object options are set in the options, the object will take precedence.

			dateIntervals: {
				"desktop": 200,   //************\\
				"tablet": 150,   // Minimum: 120 \\
				"mobile": 120,  //****************\\
				"minimal": true
			},

			/* End new object options */

			dateDisplay: "dateTime", // dateTime, date, time, dayMonth, monthYear, year
			dateOrder: "normal", // normal, reverse

			autoplay: false,
			autoplaySpeed: 8, // Sec
			autoplayPause_onHover: false,

			useScrollWheel: false,
			useTouchSwipe: true,
			useKeyboardKeys: false,
			addRequiredFile: true,
			useFontAwesomeIcons: true,
			useNavBtns: true,
			useScrollBtns: true,

			// ! Deprecate these individual options in favour of the object options. //

			iconBaseClass: "fas fa-3x", // Space separated class names
			scrollLeft_iconClass: "fa-chevron-circle-left",
			scrollRight_iconClass: "fa-chevron-circle-right",
			prev_iconClass: "fa-arrow-circle-left",
			next_iconClass: "fa-arrow-circle-right",
			pause_iconClass: "fa-pause-circle",
			play_iconClass: "fa-play-circle",

			animation_baseClass: "animationSpeed", // Space separated class names
			enter_animationClass: {
				"left": "enter-left",
				"right": "enter-right"
			},
			exit_animationClass: {
				"left": "exit-left",
				"right": "exit-right"
			},

			// ! End Deprecated options //

			/* New object options... */
			// If the deprecated single options exist in the user options, then use them,
			// otherwise default to the new object options.

			// Can not use in conjunction with the single options...
			// If both single and object options are set in the options, the object will take precedence.

			iconClass: {
				"base": "fas fa-3x", // Space separated class names
				"scrollLeft": "fa-chevron-circle-left",
				"scrollRight": "fa-chevron-circle-right",
				"prev": "fa-arrow-circle-left",
				"next": "fa-arrow-circle-right",
				"pause": "fa-pause-circle",
				"play": "fa-play-circle"
			},
			animationClass: {
				"base": "animationSpeed", // Space separated class names,
				"enter": {
					"left": "enter-left",
					"right": "enter-right"
				},
				"exit": {
					"left": "exit-left",
					"right": "exit-right"
				}
			}
			/* End new object options */
		};

	// The actual plugin constructor
	function Timeline( element, options ) {
		this.element = element;

		// jQuery has an extend method that merges the
		// contents of two or more objects, storing the
		// result in the first object. The first object
		// is generally empty because we don't want to alter
		// the default options for future instances of the plugin
		// (deep recursive copy for nested objects, empty object, the defaults object, the options object)
		this.settings = $.extend(true, {}, defaults, options);

		this._defaults = defaults;
		this._options = (options != undefined)? options : "Nothing overridden";
		this._name = pluginName;
		this.$element = $(element);

		this.init();
	}
	Timeline.prototype = {
		init: function () {
			// You already have access to the DOM element and
			// the options via the instance, e.g. this.element
			// and this.settings
			var dataAttribute = this._eventContentListData(),
			    contentList = this.$element.find('li['+ dataAttribute +']');
			if(contentList.length == 0) {
				var text = "There are no events at this point in time. Please add some content.";

				this.$element.css('opacity', 1).append('<h3>'+ text +'</h3>');
				throw new Error(text);
			}
			
			if (this.settings.useFontAwesomeIcons == true) {
				var url = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.min.css";

				// Function to load the file
				// (url, type)
				this._addFile(url, 'css');
			}
			this._create();

			// Wait about 300s to make sure the all elements are created properly.
			// Otherwise the width of the timeline would report as bigger than it actually is.
			window.setTimeout($.proxy(function(){
				var timelineTotalWidth,
					timelineComponents = {};

				this._addIdsAndClasses(timelineComponents);

				this._timelineComponents(timelineComponents);

				//** Select the correct event **//

				// If any events-content has .selected class...
				if (timelineComponents['eventsContentList'].hasClass('selected')) {
						// Get date from data-attribute
						var date = this._timelineData(timelineComponents['eventsContentSelected'], "date"),
							// Find the event date matching the date
							selectedDate = timelineComponents['eventsWrapper'].find("a").filter($.proxy(function(index, element) {
								var data = this._timelineData($(element), "date");
								if (data == date) return $(element);
							}, this));

					// Add .selected class to the matched element
					selectedDate.addClass('selected');
					// Update all previous dates for styling.
					this._updateOlderEvents(selectedDate);
				}
				// If no class found at all...
				else {
					// If dateOrder is normal (Ascending)... start from the left.
					if (this.settings.dateOrder == "normal") {
						// Add .selected class to the first event.
						timelineComponents['eventsWrapper'].find('a.first').addClass('selected');

							// Find the selected event
						var selectedEvent = timelineComponents['eventsWrapper'].find('a.selected'),
							// Get the selected event's date.
							selectedDate = this._timelineData(selectedEvent, "date");

						// Find the selected event's content using the date and add selected class to the content.
						timelineComponents['eventsContentList'].filter($.proxy(function(index, element) {
							var data = this._timelineData($(element), "date");
							if (data == selectedDate) $(element).addClass('selected');
						}, this));
					}
					// Else dateOrder is reverse (Descending)... start from the right.
					else if (this.settings.dateOrder == "reverse") {
						// Add .selected class to the last event.
						timelineComponents['eventsWrapper'].find('a.last').addClass('selected');

							// Find the selected event
						var selectedEvent = timelineComponents['eventsWrapper'].find('a.selected'),
							// Get the selected event's date.
							selectedDate = this._timelineData(selectedEvent, "date");

						// Find the selected event's content using the date and add selected class to the content.
						timelineComponents['eventsContentList'].filter($.proxy(function(index, element) {
							var data = this._timelineData($(element), "date");
							if (data == selectedDate) $(element).addClass('selected');
						}, this));


						this._updateOlderEvents(selectedEvent);
					}
				}

				// Assign a left postion to the single events along the timeline
				this._setDatePosition(timelineComponents);
				// Assign a width to the timeline
				timelineTotalWidth = this._setTimelineWidth(timelineComponents);
				// Set the filling line to the selected event
				this._updateFilling(timelineComponents['eventsWrapper']
					.find('a.selected'), timelineComponents['fillingLine'], timelineTotalWidth);
				// The timeline has been initialised - show it
				this.$element.addClass('loaded');
				
				/* Custom namespaced event: initialised with the data passed to the event as the instance and timelineSelector (jQuery object). */
				this.$element.trigger({
					type: "initialised."+this._name,
					instance: this,
					timelineSelector: this.$element
				});

				this._setup(this, timelineComponents, timelineTotalWidth);
			}, this), 300);

		}, // End init function

		_addIdsAndClasses: function (timelineComponents) {
			//** Adding IDs and Classes **//
			this._timelineComponents(timelineComponents);

			if (timelineComponents['eventsContentList'].length == 1) {
				timelineComponents['eventsContentList'].first().attr('id', 'first');
				timelineComponents['timelineEvents'].first().addClass("first");
			}
			else {
				// Check if the deprecated single options are defined in the user options, if they are use them,
				// otherwise use the new object options.

				// A variable to include in an if statement that queries if the single option is defined 
				// AND the object option is also defined.
				var bothDefined = (this._options.animation_baseClass != undefined && this._options.animationClass != undefined),

					// If single option are undefined OR both single and object options are defined
					// then default to the object options, otherwise use the deprecated single option.
					animationObj = (this._options.animation_baseClass == undefined || bothDefined) ? this.settings.animationClass : this.settings,

					// If animationObj equals the object options...
					animationBase = (animationObj == this.settings.animationClass) ? animationObj.base : animationObj.animation_baseClass;

				// Adds id to the first and last li of the event-content list respectively.
				timelineComponents['eventsContentList'].addClass(animationBase)
					.first().attr('id', 'first').end()
					.last().attr('id', 'last');

				// Adds class to the first and last timeline event dates respectively.
				timelineComponents['timelineEvents']
					.first().addClass("first").end()
					.last().addClass("last");
			}
		}, // End _addIdsAndClasses

		/* Dynamically creates the timeline according to the amount of events. */
		_create: function () {
			var timelineHTML = "",

				// All buttons uses Font Awesome for the icons
				// Icons require Font Awesome CSS
				// The CSS file has been added to the document if not already present.

				// Check if the deprecated single options are defined in the user options, if they are use them,
				// otherwise use the new object options.

				// Set the single options into an array to check against.
				optionArray = [this._options.iconBaseClass, 
					this._options.scrollLeft_iconClass, 
					this._options.scrollRight_iconClass, 
					this._options.prev_iconClass, 
					this._options.next_iconClass, 
					this._options.pause_iconClass],

				// A variable to include in an if statement that queries if the single options are undefined.
				singleUndefined = (optionArray[0] == undefined 
					&& optionArray[1] == undefined 
					&& optionArray[2] == undefined 
					&& optionArray[3] == undefined 
					&& optionArray[4] == undefined 
					&& optionArray[5] == undefined),

				// A variable to include in an if statement that queries if the single option is defined 
				// AND the object option is also defined.
				bothDefined = (optionArray[0] != undefined && this._options.iconClass != undefined)
					|| (optionArray[1] != undefined && this._options.iconClass != undefined) 
					|| (optionArray[2] != undefined && this._options.iconClass != undefined)
					|| (optionArray[3] != undefined && this._options.iconClass != undefined)
					|| (optionArray[4] != undefined && this._options.iconClass != undefined)
					|| (optionArray[5] != undefined && this._options.iconClass != undefined),

				// If single option are undefined OR both single and object options are defined
				// then default to the object options, otherwise use the deprecated single option.
				iconClass = (singleUndefined || bothDefined) ? this.settings.iconClass : this.settings,

				// If iconClass equals the object options...
				
				iconBase = (iconClass == this.settings.iconClass) ? iconClass.base : iconClass.iconBaseClass,

				iconScrollLeft = (iconClass == this.settings.iconClass) ? iconClass.scrollLeft : iconClass.scrollLeft_iconClass,
				
				iconScrollRight = (iconClass == this.settings.iconClass) ? iconClass.scrollRight : iconClass.scrollRight_iconClass,
				
				iconPrev = (iconClass == this.settings.iconClass) ? iconClass.prev : iconClass.prev_iconClass,
				
				iconNext = (iconClass == this.settings.iconClass) ? iconClass.next : iconClass.next_iconClass,
				
				iconPause = (iconClass == this.settings.iconClass) ? iconClass.pause : iconClass.pause_iconClass,

				// Left Nav
				$scrollLeftButton = '<a href="" class="'+ iconBase +' '+ iconScrollLeft +' scroll-left inactive"></a>',
				$prevButton = '<a href="" class="'+ iconBase +' '+ iconPrev +' prev inactive"></a>',

				// Right Nav
				$nextButton = '<a href="" class="'+ iconBase +' '+ iconNext +' next"></a>',
				$scrollRightButton = '<a href="" class="'+ iconBase +' '+ iconScrollRight +' scroll-right"></a>',

				// Pause button
				$pauseButton = '<a href="" class="'+ iconBase +' '+ iconPause +' pause"></a>';

			//** Create the timeline HTML **//

			timelineHTML += '<div class="timeline">';

			if (this.settings.useNavBtns == true || this.settings.useScrollBtns == true) {
				// Add the left nav.
				timelineHTML += '<div class="timeline-navigation" id="leftNav">'

				if (this.settings.useNavBtns == false && this.settings.useScrollBtns == true)
					// Add the scroll left button.
					timelineHTML += $scrollLeftButton;

				else if (this.settings.useNavBtns == true && this.settings.useScrollBtns == false)
					// Add the prev button.
					timelineHTML += $prevButton;

				else if (this.settings.useNavBtns == true && this.settings.useScrollBtns == true)
					// Add the scroll left button and the prev button.
					timelineHTML += $scrollLeftButton + $prevButton;

				timelineHTML += '</div>'

					+'<div class="events-wrapper"><div class="events"><span class="filling-line" aria-hidden="true"></span></div></div>'
					
					// Add the right nav.
					+'<div class="timeline-navigation" id="rightNav">';

				if (this.settings.useNavBtns == false && this.settings.useScrollBtns == true)
					// Add the scroll right button.
					timelineHTML += $scrollRightButton;

				else if (this.settings.useNavBtns == true && this.settings.useScrollBtns == false)
					// Add the next button.
					timelineHTML += $nextButton;

				else if (this.settings.useNavBtns == true && this.settings.useScrollBtns == true)
					// Add the next button and the scroll right button.
					timelineHTML += $nextButton + $scrollRightButton;

				timelineHTML += '</div>';
			}
			else {
				timelineHTML += '<div class="events-wrapper" style="min-width: 100%"><div class="events"><span class="filling-line" aria-hidden="true"></span></div></div>';
			}
			if (this.settings.autoplay == true)
				timelineHTML += '<div class="timeline-navigation" id="pausePlay">'
					+ $pauseButton
					+'</div>';

			timelineHTML +='</div>';

			// Prepend the timeline HTML to the element (before the event content).
			this.$element.prepend(timelineHTML);

			//** Create the HTML for the event date display **//
			this._createDate(this, 'append');

		}, // End create() function

		// (instance, insertMethod (append, before, after [last 2 for addEvent method]), date to insert before/after [from addEvent method])
		_createDate: function (self, insertMethod, arrangementDate) {
			var dataAttribute = this._eventContentListData();

			// If dateOrder is normal (starting from the left).
			if (self.settings.dateOrder == "normal") {
				// Find the event content.
				var $element = self.$element.children('.events-content').find('li['+ dataAttribute +']');
			}
			// Else if dateOrder is reverse (starting from the right).
			else if (self.settings.dateOrder == "reverse") {
				var $element = $(self.$element.children('.events-content').find('li['+ dataAttribute +']').get().reverse());
			}

			/* dateTime = the date and time */
			if(self.settings.dateDisplay == "dateTime") {
				$element.each(function() {
					self._eventDateDisplay(self, $(this), "dateTime", insertMethod, arrangementDate);
				});
			}
			/* date = the date only */
			else if (self.settings.dateDisplay == "date") {
				$element.each(function() {
					self._eventDateDisplay(self, $(this), "date", insertMethod, arrangementDate);
				});
			}
			/* time = the time only */
			else if (self.settings.dateDisplay == "time") {
				$element.each(function() {
					self._eventDateDisplay(self, $(this), "time", insertMethod, arrangementDate);
				});
			}
			/* dayMonth = the day and monthName only */
			else if (self.settings.dateDisplay == "dayMonth") {
				$element.each(function() {
					self._eventDateDisplay(self, $(this), "dayMonth", insertMethod, arrangementDate);
				});
			}
			/* monthYear = the monthName and year only */
			else if (self.settings.dateDisplay == "monthYear") {
				$element.each(function() {
					self._eventDateDisplay(self, $(this), "monthYear", insertMethod, arrangementDate);
				});
			}
			/* year = the year only */
			else if (self.settings.dateDisplay == "year") {
				$element.each(function() {
					self._eventDateDisplay(self, $(this), "year", insertMethod, arrangementDate);
				});
			}
		},// End _createDate

		/* Function to create the event date display
		(instance, element, displayType, insertMethod (append, before, after [last 2 for addEvent method]), date to insert before/after [from addEvent method])*/
		_eventDateDisplay: function (self, eventElement, display, insertMethod, arrangementDate) {
				// Get date from data-attribute
			var dataDate = self._timelineData(eventElement, "date"),
				// Check if element data-date format is DD/MM/YYYYTHH:MM by checking for 'T'
				isDateTime = dataDate.includes("T"),
				// Check if element data-date format is HH:MM by checking for ':' but doesn't have 'T'
				isTime = !isDateTime && dataDate.includes(":"),
				// Display type checks
				dateTimeDisplay = display == "dateTime",
				dateDisplay = display == "date",
				timeDisplay = display == "time",
				dayMonthDisplay = display == "dayMonth",
				monthYearDisplay = display == "monthYear",
				yearDisplay = display == "year",
				// Find .events for the date display
				$eventDateDisplay = self.$element.find('.events'),
				dateLink = '<a href="" data-horizontal-timeline=\'{"date": "'+ dataDate +'"}\'>';

				// For use with the addEvent public method.
				// If arrangementDate isn't undefined or null...
				if(typeof arrangementDate != 'undefined' || arrangementDate != null) {
					// Finds the event with the specific date.
					var $arrangementEvent = $eventDateDisplay.find("a").filter(function() {
						var data = self._timelineData($(this), "date");
						if (data == arrangementDate) return $(this);
					});
				}

			// Function to add the number suffix st, nd, rd, th (eg: 1st, 2nd, 3rd, 4th)
			// Part of answer on StackOverflow: https://stackoverflow.com/a/15397495/2358222
			function numSuffix(num) {
				if (num > 3 && num < 21) return 'th';
				switch (num % 10) {
					case 1:  return "st";
					case 2:  return "nd";
					case 3:  return "rd";
					default: return "th";
				}
			}
			// Function to get the month name according to a number supplied.
			// Answer on StackOverflow: https://stackoverflow.com/a/10996297/2358222
			function getMonthName(num) {
				// Create an array of the months, with the index 0 = null,
				// so that we can get the month by its corresponding index number.
				var monthNames = [null, "January", "February", "March", "April", "May", "June",
								"July", "August", "September", "October", "November", "December" ];
				return monthNames[num];
			}

			var dateExists = $eventDateDisplay.children('a').map(function() {
					if ($(this).data('horizontal-timeline')) {
						var data = $(this).data('horizontal-timeline');

						return data.date;
					}
					// data-date deprecated as of v2.0.5.alpha.3
					// and will be removed in a later major version.
					else {
						var dataDate = $(this).data('date');

						return dataDate;
					}
				}).get();

			if(jQuery.inArray(dataDate, dateExists) == -1) {
				// Date and Time format (DD/MM/YYYYTHH:MM)
				if (isDateTime){
						// Separate the date at point of T, to get individually date and time
					var dateSplit = dataDate.split('T'),
						// Date
						date = dateSplit[0],
						// Time
						time = dateSplit[1],
						// Separate the date at point of /, to get individual date parts
						dateParts = date.split('/'),
						// Remove the leading 0 (zero) from the day
						dayPart = dateParts[0].replace(/^0+/, ''),
						// Remove the leading 0 (zero) from the month
						monthPart = dateParts[1].replace(/^0+/, ''),
						yearPart = dateParts[2];

					/* Add the event date displays according to the display types */

					// Custom Date Display

					// Get the custom text from the data-attribute object.
					var customDisplay = self._timelineData(eventElement, "customDisplay");

					// If customDisplay is defined in the data-attribute object...
					if(typeof customDisplay !== 'undefined') {


						// Add in the custom Text depending on which insertMethod used.
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + customDisplay +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + customDisplay +'</a>');
						else $arrangementEvent.before(dateLink + customDisplay +'</a>');
					}

					else if(dateTimeDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + date +'<br>'+ time +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + date +'<br>'+ time +'</a>');
						else $arrangementEvent.before(dateLink + date +'<br>'+ time +'</a>');
					}
					else if(dateDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + date +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + date +'</a>');
						else $arrangementEvent.before(dateLink + date +'</a>');
					}
					else if(timeDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + time +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + time +'</a>');
						else $arrangementEvent.before(dateLink + time +'</a>');
					}
					else if(dayMonthDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + dayPart + numSuffix(dayPart) + '<br>' + getMonthName(monthPart) +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + dayPart + numSuffix(dayPart) + '<br>' + getMonthName(monthPart) +'</a>');
						else $arrangementEvent.before(dateLink + dayPart + numSuffix(dayPart) + '<br>' + getMonthName(monthPart) +'</a>');
					}
					else if(monthYearDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + getMonthName(monthPart) + '<br>' + yearPart +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + getMonthName(monthPart) + '<br>' + yearPart +'</a>');
						else $arrangementEvent.before(dateLink + getMonthName(monthPart) + '<br>' + yearPart +'</a>');
					}
					else if(yearDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + yearPart +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + yearPart +'</a>');
						else $arrangementEvent.before(dateLink + yearPart +'</a>');
					}
				}
				// Time format (HH:MM)
				else if (isTime) {
					var time = dataDate;
					/* Add the event date displays according to the display types */

					// Custom Date Display

					// Get the custom text from the data-attribute object.
					var customDisplay = self._timelineData(eventElement, "customDisplay");

					// If customDisplay is defined in the data-attribute object...
					if(typeof customDisplay !== 'undefined') {

						// Add in the custom Text depending on which insertMethod used.
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + customDisplay +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + customDisplay +'</a>');
						else $arrangementEvent.before(dateLink + customDisplay +'</a>');
					}

					else if(dateTimeDisplay || timeDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + time +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + time +'</a>');
						else $arrangementEvent.before(dateLink + time +'</a>');
					}
				}
				// Date format (DD/MM/YYYY)
				else {
					var date = dataDate,
						// Separate the date at point of /, to get individual date parts
						dateParts = date.split('/'),
						// Remove the leading 0 (zero) from the day
						dayPart = dateParts[0].replace(/^0+/, ''),
						// Remove the leading 0 (zero) from the month
						monthPart = dateParts[1].replace(/^0+/, ''),
						yearPart = dateParts[2];

					/* Add the event date displays according to the display types */

					// Custom Date Display

					// Get the custom text from the data-attribute object.
					var customDisplay = self._timelineData(eventElement, "customDisplay");

					// If customDisplay is defined in the data-attribute object...
					if(typeof customDisplay !== 'undefined') {

						// Add in the custom Text depending on which insertMethod used.
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + customDisplay +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + customDisplay +'</a>');
						else $arrangementEvent.before(dateLink + customDisplay +'</a>');
					}

					else if(dateTimeDisplay || dateDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + date +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + date +'</a>');
						else $arrangementEvent.before(dateLink + date +'</a>');
					}
					else if(dayMonthDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + dayPart + numSuffix(dayPart) + '<br>' + getMonthName(monthPart) +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + dayPart + numSuffix(dayPart) + '<br>' + getMonthName(monthPart) +'</a>');
						else $arrangementEvent.before(dateLink + dayPart + numSuffix(dayPart) + '<br>' + getMonthName(monthPart) +'</a>');
					}
					else if(monthYearDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + getMonthName(monthPart) + '<br>' + yearPart +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + getMonthName(monthPart) + '<br>' + yearPart +'</a>');
						else $arrangementEvent.before(dateLink + getMonthName(monthPart) + '<br>' + yearPart +'</a>');
					}
					else if(yearDisplay) {
						if (insertMethod == 'append') $eventDateDisplay.append(dateLink + yearPart +'</a>');
						// For use with the addEvent method... creates new timeline events and places them where specified.
						else if (insertMethod == 'after') $arrangementEvent.after(dateLink + yearPart +'</a>');
						else $arrangementEvent.before(dateLink + yearPart +'</a>');
					}
				} // End else
			} // End inArray
		}, // End eventDateDisplay() function

		_timelineComponents: function (timelineComponents) {
			var dataAttribute = this._eventContentListData();
			// Cache timeline components
			timelineComponents['eventsContent'] = this.$element.children('.events-content');
			timelineComponents['eventsContentList'] = timelineComponents['eventsContent'].find('li['+ dataAttribute +']');
			timelineComponents['eventsContentSelected'] = timelineComponents['eventsContent'].find('li['+ dataAttribute +'].selected');

			timelineComponents['timelineWrapper'] = timelineComponents['eventsContent'].parent().find('.events-wrapper');
			timelineComponents['eventsWrapper'] = timelineComponents['timelineWrapper'].children('.events');
			timelineComponents['fillingLine'] = timelineComponents['eventsWrapper'].children('.filling-line');
			timelineComponents['timelineEvents'] = timelineComponents['eventsWrapper'].find('a');

			timelineComponents['timelineNavigation'] = timelineComponents['timelineWrapper'].siblings('.timeline-navigation');
		},

		_setup: function (self, timelineComponents, timelineTotalWidth) {
			/* Debounce function for resize events             */

			// Returns a function, that, as long as it continues to be invoked, will not
			// be triggered. The function will be called after it stops being called for
			// N milliseconds. If `immediate` is passed, trigger the function on the
			// leading edge, instead of the trailing.
			function debounce(func, wait, immediate) {
				var timeout;
				return function() {
					var context = this, args = arguments;
					var later = function() {
						timeout = null;
						if (!immediate) func.apply(context, args);
					};
					var callNow = immediate && !timeout;
					clearTimeout(timeout);
					timeout = setTimeout(later, wait);
					if (callNow) func.apply(context, args);
				};
			};

			var id = this.$element.attr('id');

			function _mobileResizeFix(event) {
				var windowWidth = this.$element.data('plugin_'+ this._name)['windowWidth'],
					newWidth = $(window).width();

				if(newWidth !== windowWidth){
					this.refresh();
				}
				this.$element.data('plugin_'+ this._name)['windowWidth'] = newWidth;
			}
			this._setup.mobileResizeFix = _mobileResizeFix;
			// On window resize, change the timeline accordingly.
			$(window).on('resize.'+this._name+'_'+id, debounce($.proxy(this._setup.mobileResizeFix, this), 250));



			//** Navigation button function **//

			// Stop click events on the .inactive buttons
			this.$element
				.on('click.'+this._name, '.timeline-navigation .inactive', function(event){
					event.stopImmediatePropagation();
					return(false);
				})
				// Button on click...
				.on('click.'+this._name, '.timeline-navigation:not(#pausePlay) a', $.proxy(function(event) {
					event.preventDefault();
					var $this = $(event.target);

					this._timelineComponents(timelineComponents);

					timelineTotalWidth = this._setTimelineWidth(timelineComponents);
					// If next button clicked, shows next content
					if($this.is('.next')) this._showNewContent(timelineComponents, timelineTotalWidth, 'next');
					// If prev button clicked shows prev content
					if($this.is('.prev')) this._showNewContent(timelineComponents, timelineTotalWidth, 'prev');
					// If scroll-right button clicked, scrolls timeline right
					if($this.is('.scroll-right')) this._updateSlide(timelineComponents, timelineTotalWidth, 'right');
					// If scroll-left button clicked, scrolls timeline left
					if($this.is('.scroll-left')) this._updateSlide(timelineComponents, timelineTotalWidth, 'left');
				}, this))
				//** Event date function **//
				// Detect click on a single event date = show new event content
				.on('click.'+this._name, '.events a', $.proxy(function(event) {
					event.preventDefault();
					var $this = $(event.target);

					this._timelineComponents(timelineComponents);
					// Remove selected class from all dates.
					this.$element.find('.events').find('a').removeClass('selected');
					// Add class to the event date clicked.
					$this.addClass('selected');
					// Update all other previous event dates for styling
					this._updateOlderEvents($this);
					// Set the timeline width.
					timelineTotalWidth = this._setTimelineWidth(timelineComponents);
					// Update the timeline width and filling line.
					this._updateFilling($this, timelineComponents['fillingLine'], timelineTotalWidth);
					// Change the event content to match the selected event.
					this._updateVisibleContent($this, timelineComponents['eventsContent']);
					// Translate (scroll) the timeline left or right according to the position of the targeted event date
					this._updateTimelinePosition($this, timelineComponents, timelineTotalWidth);
				}, this));

			//** Autoplay **//

			if (this.settings.autoplay == true){
				// Define the progress bar html
				var	$progressBar = '<div class="progressBarWrapper"><div class="progressBar"></div></div>',
					// Find and get the pause button html.
					$pauseButton = timelineComponents['timelineNavigation'].find('.pause')[0];
				// Create the progress bar.
				timelineComponents['eventsContent'].prepend($progressBar);

				// Call the autoplay function.
				this._autoplay(timelineComponents);

				// On click
				this.$element
					// On click of the element pause button, pass data to the event [pausebtnClicked, pausebtnHtml, state] and call the changeButtons function.
					.on('click.'+this._name, '.timeline-navigation .pause', [true, $pauseButton, 'paused'], $.proxy(this._autoplay.changeButtons, this))
					// On click of the element play button, pass data to the event [pausebtnClicked, pausebtnHtml, state] and call the changeButtons function.
					.on('click.'+this._name, '.timeline-navigation .play', [false, $pauseButton, 'playing'], $.proxy(this._autoplay.changeButtons, this));

				// Hover
				if (this.settings.autoplayPause_onHover == true) {
					var checkMQ = this._checkMQ();

					// Only execute hover code if device is tablet or desktop.
					if (checkMQ == 'tablet' || checkMQ == 'desktop') {
						// On hover
						this.$element
							// On mouseenter of the element events-content, pass data to the event [pausebtnClicked, pausebtnHtml, state] and call the changeButtons function.
							.on('mouseenter.'+this._name, '.events-content', [false, $pauseButton, 'paused'], $.proxy(this._autoplay.changeButtons, this))
							// On mouseleave of the element events-content, pass data to the event [pausebtnClicked, pausebtnHtml, state] and call the changeButtons function.
							.on('mouseleave.'+this._name, '.events-content', [false, $pauseButton, 'playing'], $.proxy(this._autoplay.changeButtons, this));
					} // End checkMQ is desktop
				} // End autoplayPause_onHover this.settings



			} // End Autoplay this.settings

			//** Go-to timeline link function **//

			// Linking to a specific date of a timeline

			// Set the go-to selector in a variable
			var goToTimelineLink = $('.goto-horizontal-timeline');

			// If go-to selector exists...
			if(goToTimelineLink.length > 0) {
				// On click
				goToTimelineLink.on('click.'+this._name, gotoTimeline);

				function gotoTimeline(event) {
					// Prevent default click
					event.preventDefault();
					// Prevent every instance of the plugin from firing the function, and concentrate on just the one.
					event.stopImmediatePropagation();
						// Reference the button
					var	$this = $(event.target),
						// Get the go-to href value of the button as the selector
						href = $this.attr('href'),
						// A check to see if href only contains a # (by itself)...
						targetSelf = href == "#";

					// We are using a lonely # to determine if a link is targetting the timeline it sits in (itself)
					if(targetSelf) {
						// We are targeting the timeline the link is in.
							// Get the ID of the outer wrapper of the timeline, from which the link sits in
						var gotoself = '#' + $this.parents('.horizontal-timeline').attr('id');
							// Set the target variable as this timeline.
							$target = $(gotoself);
					}
					// Otherwise we're targetting another timeline.
					else var $target = $(href); // Reference the jQuery object selector only once

					// Get the correct plugin instance from the target data.
					var instanceRef = $target.data('plugin_horizontalTimeline').Timeline;

						// Get the data-gototimeline options object
					var datagoto = $this.data('gototimeline'),
						// Set empty variables
						date,
						scrollSpeed,
						scrollOffset,
						scrollEasing,

						// Get the keys from the data object
						dataDate = datagoto.date,
						dataScrollSpeed = datagoto.scrollspeed,
						dataScrollOffset = datagoto.scrolloffset,
						dataScrollEasing = datagoto.scrolleasing;

					// If the data-gototimeline attribute exists...
					if (typeof datagoto !== 'undefined') {
						// Set the date from the data object
						date = dataDate;

						// The speed, offset, and easing data options are optional,
						// so we need to check for their existence

						// If speed option exists, set the speed from the data object
						if (typeof dataScrollSpeed !== 'undefined') scrollSpeed = dataScrollSpeed;

						// If offset option exists set offset from the data object
						if (typeof dataScrollOffset !== 'undefined') scrollOffset = dataScrollOffset;

						// If easing option exists set easing from the data object
						if (typeof dataScrollEasing !== 'undefined') scrollEasing = dataScrollEasing;
					}

					// If a link is targetting the timeline it sits in (itself), then execute the public method interally to goTo the date.
					if(targetSelf) instanceRef.goTo(date, instanceRef);
					// If not, then use a smooth scroll and then execute the public method interally afterwards.
					else instanceRef.goTo(date, {smoothScroll: true, speed: scrollSpeed, offset: scrollOffset, easing: scrollEasing}, instanceRef);

				} // End gotoTimeline function
			} // End if goToTimelineLink exists

			//** Mouse wheel function **//
			// Requires the jQuery plugin mouse wheel: https://github.com/jquery/jquery-mousewheel
			// Mouse wheel support for "scrolling" the events content.
			if(this.settings.useScrollWheel == true) {
					// The URL to the plugin on CDN
				var url = "https://cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js";

				// Set a global variable to equal the function.
				this._setup.mousewheel = mousewheel;

				// Function to load the Mousewheel plugin (url, type, callback)
				this._addFile(url, 'js', $.proxy(function() {
					// Wait 300ms whilst the Mousewheel script loads
					window.setTimeout($.proxy(function() {
						this.$element.on('mousewheel.'+this._name, '.events-content', $.proxy(this._setup.mousewheel, this));
					}, this), 300); // End setTimeout function
				}, this)); // End addFile function

				/* Mousewheel function */
				function mousewheel(e, delta) {
					this._timelineComponents(timelineComponents);
					timelineTotalWidth = this._setTimelineWidth(timelineComponents);

					// Scroll Up = show previous content
					if (e.deltaY > 0) this._showNewContent(timelineComponents, timelineTotalWidth, 'prev');
					// Scroll Down = show next content
					else this._showNewContent(timelineComponents, timelineTotalWidth, 'next');
					// Prevent the normal document scroll
					e.preventDefault();
				}
			} // End scrollWheel setting


			//** TouchSwipe function **//
			// Requires the jQuery plugin TouchSwipe: http://labs.rampinteractive.co.uk/touchSwipe/demos/index.html
			// TouchSwipe has more events/options than jQuery Mobile
			if(this.settings.useTouchSwipe == true){
					// The URL to the plugin on CDN
				var url = "https://cdnjs.cloudflare.com/ajax/libs/jquery.touchswipe/1.6.18/jquery.touchSwipe.min.js";

				// Set a global variable to equal the function.
				this._setup.swipe = swipe;

				// Function to load the TouchSwipe plugin (url, type, callback)
				this._addFile(url, 'js', $.proxy(function() {
					// Wait 300ms whilst the TouchSwipe script loads
					window.setTimeout($.proxy(function() {

						// On swipe of .events-content, show next/prev event content
						timelineComponents['eventsContent'].swipe({
							// Swipe right to go left (previous)
							swipeRight:$.proxy(function(event, direction, distance, duration, fingerCount) {
								// Show previous content on swipeRight
								this._setup.swipe(this, 'prev');
							}, this),
							// Swipe left to go right (next)
							swipeLeft:$.proxy(function(event, direction, distance, duration, fingerCount) {
								// Show next content on swipeLeft
								this._setup.swipe(this, 'next');
							}, this),
							// Swipe distance... 0 = any distance in px
							threshold:75,
							preventDefaultEvents: false
						}); // End TouchSwipe Event

						/* Swipe function for the timeline wrapper*/
						// So that we can scroll the timeline with a swipe.

						timelineComponents['timelineWrapper'].swipe({
							// Swipe right to scroll the timeline left
							swipeRight:$.proxy(function(event, direction, distance, duration, fingerCount) {
									// Get the current translate value
								var translateValue = this._getTranslateValue(timelineComponents['eventsWrapper']),
									// Get the width of the timeline wrapper.
									wrapperWidth = Number(timelineComponents['timelineWrapper'].width());

								// Translate the timeline to the left (also know as scroll left)
								// according to the amount of distance swiped.
								this._translateTimeline(timelineComponents, distance + translateValue, wrapperWidth - timelineTotalWidth);
							}, this),
							// Swipe left to scroll the timeline right
							swipeLeft:$.proxy(function(event, direction, distance, duration, fingerCount) {
									// Get the current translate value
								var translateValue = this._getTranslateValue(timelineComponents['eventsWrapper']),
									// Get the width of the timeline wrapper.
									wrapperWidth = Number(timelineComponents['timelineWrapper'].width());

								// Translate the timeline to the right (also know as scroll right)
								// according to the amount of distance swiped.
								this._translateTimeline(timelineComponents, -distance + translateValue, wrapperWidth - timelineTotalWidth);
							}, this),
							// Swipe distance... 0 = any distance in px
							threshold:30,
							preventDefaultEvents: false
							}
						); // End TouchSwipe Event
					}, this), 1000); // End setTimeout function
				}, this)); // End addFile function

				// Add a touch-enabled class to the necessary elements.
				timelineComponents['timelineWrapper'].addClass('touch-enabled')
					.parent().siblings('.events-content').addClass('touch-enabled');

				/* Swipe function */
				function swipe(self, direction) {
					self._timelineComponents(timelineComponents);
					timelineTotalWidth = self._setTimelineWidth(timelineComponents);
					self._showNewContent(timelineComponents, timelineTotalWidth, direction);
				}

			} // End useTouchSwipe this.settings

			// Keyboard navigation
			if(this.settings.useKeyboardKeys == true) {

				// Set a global variable to equal the function.
				this._setup.keyboardKeys = keyboardKeys;

				var id = this.$element.attr('id');
				// On keyup
				$(document).on('keyup.'+this._name+'_'+id, $.proxy(this._setup.keyboardKeys, this));

				/* Keyboardkeys function */
				function keyboardKeys(event) {
					this._timelineComponents(timelineComponents);
					timelineTotalWidth = this._setTimelineWidth(timelineComponents);

					// If Left arrow (keyCode 37) AND the timeline is in the viewport, show prev content
					if(event.which=='37' && this._elementInViewport(this.element))
						this._showNewContent(timelineComponents, timelineTotalWidth, 'prev');
					// If Right arrow (keyCode 39) AND the timeline is in the viewport, show next content
					else if(event.which=='39' && this._elementInViewport(this.element))
						this._showNewContent(timelineComponents, timelineTotalWidth, 'next');
				}
			} // End useKeyboardKeys this.settings
		}, // End _setup() function.

		/* Autoplay function */
		_autoplay: function (timelineComponents) {
			// NOTE: if autoplay cycle is paused, clicking any timeline button
			// will not reset the autoplay cycle to play.

			var isPaused,
				tick,
				percentTime,
				current,
				autoplayTimelineTotalWidth,
				dataSpeed,
				speed;

			this._timelineComponents(timelineComponents);

			// Set a global variable to equal the function.
			this._autoplay.countEvents = countEvents;
			this._autoplay.start = start;
			this._autoplay.pause = pause;
			this._autoplay.resume = resume;
			this._autoplay.moved = moved;
			this._autoplay.changeButtons = changeButtons;
			this._autoplay.refresh = refresh;
			this._autoplay.destroy = destroy;

			// Call the start function
			this._autoplay.start(this, timelineComponents);

			// Count events function
			function countEvents() {
				// Get the total number of events to check against
				return timelineComponents['timelineEvents'].length;
			}

			// Start function
			function start(self, timelineComponents) {
				// Reset timer
				percentTime = 0;

				self._timelineComponents(timelineComponents);
				// Get the timeline width
				autoplayTimelineTotalWidth = self._setTimelineWidth(timelineComponents);
				// Run interval every 0.01 second
				tick = setInterval($.proxy(interval, self), 10);
			};
			// Interval function.
			function interval() {
				isPaused = this.$element.data('plugin_'+ this._name)['autoplay']['isPaused'];
				this._timelineComponents(timelineComponents);
				
				// Speed

				// Get the speed from the data attribute of the current events content.
				dataSpeed = this._timelineData(timelineComponents['eventsContent'].find('.selected'),"speed");
				// If the variable doesn't return an undefined value, then set the speed
				// from the data attribute.
				if (typeof dataSpeed !== 'undefined') speed = Number(dataSpeed);
				// Otherwise, set the speed from the settings.
				else speed = Number(this.settings.autoplaySpeed);

				// If isPaused = false AND is in the viewport, start the autoplay cycle, otherwise pause the cycle.
				if(isPaused === false && this._elementInViewport(this.element)){
					// Set percentTime using the speed from the settings.
					// Check media queries...
					var checkMQ = this._checkMQ();
					// We need to adjust the calculations for percentTime because how slow it seems to be on mobile.
					// If mobile, set the correct speed
					if(checkMQ == 'mobile') percentTime += 3 / speed;
					// Everything else set the correct speed.
					else percentTime += 1 / speed;
					// Set the progress bar width
					this.$element.find('.progressBar').css({
						width: percentTime+"%"
					});
					// Recalculate the index of the current event, each time.
					// This is to make sure that if the user navigates to another event while playing or paused,
					// the current index will always reflect the current event,
					// otherwise autoplay may get out of sync.
					current = timelineComponents['eventsWrapper'].find('.selected').index();

					//if percentTime is equal or greater than 100
					if(percentTime >= 100){
						// If dateOrder is normal AND the current index is equal to the total number of events
						// OR dateOrder is reverse AND current index is equal to 1 ...
						if((this.settings.dateOrder == "normal" && current == this._autoplay.countEvents()) || (this.settings.dateOrder == "reverse" && current == 1)) {
							// Go back to the start of the cycle.
							this._showNewContent(timelineComponents, autoplayTimelineTotalWidth, 'start');
							// Recalculate the current index to make sure it's reset back to 1 (the start).
							current = timelineComponents['eventsWrapper'].find('.selected').index();
						}
						else {
							// If dateOrder is normal.
							if (this.settings.dateOrder == "normal") {
								// Go to next event content.
								this._showNewContent(timelineComponents, autoplayTimelineTotalWidth, 'next');
							}
							// Else if dateOrder is reverse.
							else if (this.settings.dateOrder == "reverse") {
								// Go to next event content.
								this._showNewContent(timelineComponents, autoplayTimelineTotalWidth, 'prev');
							}
						}
					}
				} // End isPaused if statement
			} // End Interval function

			// Pause function
			function pause(self) {
				self.$element.data('plugin_'+ self._name)['autoplay']['isPaused'] = true;
			}
			// Resume function
			function resume(self) {
				self.$element.data('plugin_'+ self._name)['autoplay']['isPaused'] = false;
			}
			// Moved function, when an event content has changed via autoplay or by manual navigation.
			function moved(self) {
					// Clear interval
					self._autoplay.destroy();
					// Restart the cycle.
					self._autoplay.start(self, timelineComponents);
			}
			// Change Buttons function
			function changeButtons(event) {
				event.preventDefault();
				// Get the event data
				var data = event.data,
					// Set variables using the corresponding data array selectors.
					pausebtnClicked = data[0],
					$pauseButton = data[1],
					state = data[2],
					// Find the pause play button wrapper.
					$pausePlay = this.$element.find('#pausePlay'),

					// Check if the new object options are defined in the user options, if they are use them,
					// otherwise use the deprecated single options.
					iconClass = (this._options.iconClass != undefined) ? this.settings.iconClass : this.settings,
					iconBase = (this._options.iconClass != undefined) ? iconClass.base : iconClass.iconBaseClass,
					iconPlay = (this._options.iconClass != undefined) ? iconClass.play : iconClass.play_iconClass,

					// Define the play button html
					$playButton = '<a href="" class="'+ iconBase +' '+ iconPlay +' play"></a>';

				// If the event type is click and pausebtnClicked is true (so the pause button was clicked)...
				if (event.type == "click" && pausebtnClicked == true) {
					// Add class to parent to check against it later to stop on hover from reactivating the play cycle.
					$pausePlay.addClass('clicked');
					// Set a mouseEvent data to click on the element to check against later.
					this.$element.data('plugin_'+ this._name)['autoplay']['mouseEvent'] = 'click';
					// Change the button to the play button.
					$pausePlay.html($playButton);
					// Call the pause function to pause autoplay
					this._autoplay.pause(this);
					console.log('Autoplay is '+state+'.');
				}
				// Else if the event type is click and pausebtnClicked is false (so the play button was clicked)...
				else if (event.type == "click" && !pausebtnClicked) {
					// Remove class from the parent
					$pausePlay.removeClass('clicked');
					// Set the mouseEvent data to false on the element.
					this.$element.data('plugin_'+ this._name)['autoplay']['mouseEvent'] = false;
					// Change the button to the pause button.
					$pausePlay.html($pauseButton);
					// Call the resume function to resume the autoplay cycle.
					this._autoplay.resume(this);
					console.log('Autoplay is '+state+'.');
				}
				// If the event type is mouseenter (so it's paused) and the pause play button wrapper doesn't have the clicked class (paused via the pause button)...
				if(event.type == "mouseenter" && !$pausePlay.hasClass('clicked')) {
					// Set a mouseEvent data to hover on the element to check against later.
					this.$element.data('plugin_'+ this._name)['autoplay']['mouseEvent'] = 'hover';
					// Change the button to the play button.
					$pausePlay.html($playButton);
					// Call the pause function to pause autoplay
					this._autoplay.pause(this);
					console.log('Autoplay is '+state+'.');
				}
				// Else if the event type is mouseleave (so it's playing) and the pause play button wrapper doesn't have the clicked class (paused via the pause button)...
				// To stop autoplay resuming the cycle on mouseleave if it's already paused via the pause button.
				else if(event.type == "mouseleave" && !$pausePlay.hasClass('clicked')) {
					// Set the mouseEvent data to false on the element.
					this.$element.data('plugin_'+ this._name)['autoplay']['mouseEvent'] = false;
					// Change the button to the pause button.
					$pausePlay.html($pauseButton);
					// Call the resume function to resume the autoplay cycle.
					this._autoplay.resume(this);
					console.log('Autoplay is '+state+'.');
				}
			} // End changeButtons function
			// Refresh function
			function refresh(self) {
				self._timelineComponents(timelineComponents);
				autoplayTimelineTotalWidth = self._setTimelineWidth(timelineComponents);
			}
			// Destroy function, to destroy the autoplay interval.
			function destroy() {
				clearInterval(tick);
			}
		}, // End autoplay function

		/* Get data from the data-attribute object */
		_timelineData: function (element, type) {
			if (element.data('horizontal-timeline')) {
				var data = element.data('horizontal-timeline');

				if(type == "date") return data.date;
				else if(type == "customDisplay") return data.customDisplay;
				else if (type == "speed") return data.speed;
			}
			// data-date and data-custom-display deprecated as of v2.0.5.alpha.3
			// and will be removed in a later major version.
			else {
				var dataDate = element.data('date'),
					dataCustomDisplay = element.data('custom-display');

				if(type == "date") return dataDate;
				else if(type == "customDisplay") return dataCustomDisplay;
			}
		},
		_eventContentListData: function () {
			// Check if the data-horizontal-timeline attribute exists on the events-content li,
			// If not then return the deprecated data-date.
			if (this.$element.find('li').data('horizontal-timeline')) {
				return "data-horizontal-timeline";
			}
			// data-date deprecated as of v2.0.5.alpha.3
			// and will be removed in a later major version.
			else {
				return "data-date";
			}
		},

		/* Refresh public method
		*  - refreshes the timeline externally after initialisation.
		*  Use it like: $('#example').horizontalTimeline('refresh');
		*/
		refresh: function () {
			var timelineComponents = {};

			this._timelineComponents(timelineComponents);

			// Removes first and last id attributes of the event-content list.
			timelineComponents['eventsContent']
				.find('#first').removeAttr('id').end()
				.find('#last').removeAttr('id').end();

			// Removes first and last classes from the timeline event date
			timelineComponents['eventsWrapper']
				.find('.first').removeClass('first').end()
				.find('.last').removeClass('last').end();

			// Adds classes and IDs.
			this._addIdsAndClasses(timelineComponents);	 // changed

			this._setDatePosition(timelineComponents);
			timelineTotalWidth = this._setTimelineWidth(timelineComponents);
			this._updateFilling(timelineComponents['eventsWrapper']
				.find('a.selected'), timelineComponents['fillingLine'], timelineTotalWidth);

			if(this.settings.autoplay == true) this._autoplay.refresh(this);
			console.log('refreshed #'+this.element.id);
		},

		/* Destroy public method
		*  - destroys the timeline externally after initialisation.
		* Removes all timeline created html and event handlers and resets the elements to the original state.
		*  Use it like: $('#example').horizontalTimeline('destroy');
		*/
		destroy: function () {
			var $this = this.$element,
				id = $this.attr('id'),
				originalEventsContent = $this.data('plugin_'+ this._name)['originalEventsContent'];

			if($('.horizontal-timeline .timeline').length == 1) {
				$('.goto-horizontal-timeline').off('.'+this._name);
				$('body').removeData('plugin_'+ this._name +'_loadedFile');
			}
			$this.removeClass('loaded')
				.off('.'+this._name, '**')
				.find('.timeline').remove().end()
				.find('.events-content').replaceWith(originalEventsContent).swipe("destroy");

			$this.find('.events-wrapper').removeClass('touch-enabled').swipe("destroy");
			$(document).off('.'+this._name+'_'+id);
			$(window).off('.'+this._name+'_'+id);

			if(this.settings.autoplay == true) {
				this._autoplay.destroy();
			}

			$this.removeData('plugin_' + pluginName);

			console.log('destroyed #'+this.element.id);
		},

		/* AddEvent public method
		* - adds a new event to the timeline externally after initialisation.
		* Adds a new event content to the timeline at a specified location.
		* Use it like: $('#example').horizontalTimeline('addEvent', [event content html], 'after', '01/01/2001');
		* (new event content html, insertion method (before or after), an existing unique date to position the new content around.)
		*/
		addEvent: function (html, insertMethod, arrangementDate) {
			var timelineComponents = {};

			this._timelineComponents(timelineComponents);

				// Get the new date from the HTML.
			var	newDate = html.split("date")[1].split('"')[2],
				// Select the specified event content
				$eventContent = timelineComponents['eventsContentList'].filter($.proxy(function(index, element) {
					var data = this._timelineData($(element), "date");
					if (data == arrangementDate) return $(element);
				}, this)),
				// Find the selected event.
				$selectedEvent = timelineComponents['eventsWrapper'].find('a.selected'),
				// Get the existing dates array.
				existingDates = this.$element.data('plugin_'+ this._name)['existingDates'];

			if(jQuery.inArray(newDate, existingDates) == -1) {
				existingDates.push(newDate);
				// If the insertMethod = before, then insert the new content before the specified date.
				if (insertMethod == 'before') $eventContent.before(html);
				// Else the insertMethod = after, insert the new content after the specified date.
				else if (insertMethod == 'after') $eventContent.after(html);

				// Call the create.date function passing the insertMethod and arrangementDate arguments.
				// This creates the new timeline events before or after [insertMethod] specified date [arrangementDate].
				this._createDate(this, insertMethod, arrangementDate);
				// Update the olderEvents.
				this._updateOlderEvents($selectedEvent);
				// Call the refresh function to fresh the timeline accordingly.
				this.refresh();

				/* Custom namespaced event: eventAdded with the data passed to the event as the newEventDate and newEventContent. */
				this.$element.trigger({
					type: "eventAdded."+this._name,
					newEventDate: newDate,
					newEventContent: html
				});
			}
			else return console.warn('The date '+ newDate +' is already in Timeline.');
		},

		/* RemoveEvent public method
		* - removes the specified event from the timeline externally after initialisation.
		* Removes the event and the event content from the timeline using the unique date used in data-date.
		* Use it like: $('#example').horizontalTimeline('removeEvent', '01/01/2001');
		*/
		removeEvent: function (date) {
			var timelineComponents = {};

			this._timelineComponents(timelineComponents);

				// Select the specified timeline event
			var $event = timelineComponents['eventsWrapper'].find("a").filter($.proxy(function(index, element) {
					var data = this._timelineData($(element), "date");
					if (data == date) return $(element);
				}, this)),
				// Select the specified event content
				$eventContent = timelineComponents['eventsContentList'].filter($.proxy(function(index, element) {
					var data = this._timelineData($(element), "date");
					if (data == date) return $(element);
				}, this)),
				$newEvent,
				// Get the existing dates array.
				existingDates = this.$element.data('plugin_'+ this._name)['existingDates'],
				// Find the index of the date in the array.
				index = existingDates.indexOf(date);

			// If there's more than 1 timeline events (We can't remove the very last event)...
			if (timelineComponents['timelineEvents'].length > 1) {
				// If the specified event is selected...
				if($event.is('.selected')) {
					// Remove the selected class from the specified event content
					$eventContent.removeClass('.selected');
					// If a next event exists, select it...
					if ($event.next().length) {
						// Add a selected class to the next timeline event and reference it.
						$newEvent = $event.next().addClass('selected');
						// Add a selected class to the next event content
						$eventContent.next().addClass('selected');
					}
					// If not, then select the previous event...
					else {
						// Add a selected class to the previous timeline event and reference it.
						$newEvent = $event.prev().addClass('selected');
						// Add a selected class to the previous event content.
						$eventContent.prev().addClass('selected');
					}
				}
				// If the specified event isn't selected, then just reference it to pass it to the functions
				// (we don't need to do anything special since it doesn't concern it).
				else $newEvent = timelineComponents['eventsWrapper'].find('a.selected');
				// Update the olderEvents using the newEvent as reference.
				this._updateOlderEvents($newEvent);
				// Remove the timeline event.
				$event.remove();
				// Remove the event content.
				$eventContent.remove();

				// If the existing date exists...
				if (index > -1) {
					// Remove the existing date from the array.
					existingDates.splice(index, 1);
				}

				// Call the refresh function to fresh the timeline accordingly.
				this.refresh();

				/* Custom namespaced event: eventRemoved with the data passed to the event as the removedDate. */
				this.$element.trigger({
					type: "eventRemoved."+this._name,
					removedDate: date,
					removedContent: $eventContent[0].outerHTML
				});
			}
			// If the specified event is the only event, do nothing, since there should always be at least 1 event.
			else {
				console.warn('Timeline must always have at least 1 event after initialisation, therefore it can\'t be removed. Please use the Destroy method instead.');
			}
		}, // End removeEvent() function

		/* goTo public method
		* - go to an event in the timeline externally after initialisation.
		* Changes and goes to the specified event in the timeline.
		* Use it like: $('#example').horizontalTimeline('goTo', '01/01/2001', {"smoothScroll": true, "speed": 500, "offset": 0, "easing": "linear"});
		* ([an existing unique date to go to], {[enable smoothScroll], [scrollSpeed], [scrollOffset], [scrollEasing]})
		* The go-to-timeline links uses this method.
		*/

		// The object that equals itself as the function arguments, sets the defaults for the smoothScroll function. 0+ options can be overridden.
		goTo: function (date, {smoothScroll = false, speed = 500, offset = 0, easing = "linear"} = {}, instanceRef) {
			var timelineComponents = {};
			this._timelineComponents(timelineComponents);
			// If the variable instanceRef is undefined, set it to this instance.
			// Only used if the public method is used. (the go-to links passes the instanceRef as an argument.)
			if (typeof instanceRef == 'undefined') instanceRef = this;

			// Get the existing dates array.
			var existingDates = this.$element.data('plugin_'+ this._name)['existingDates']
				speed = Number(speed),
				offset = Number(offset);

			// If date exists in the timeline, we can then go to it.
			if(jQuery.inArray(date, existingDates) > -1) {

				/* Custom namespaced event: goToTimeline with the data passed to the event as the goToDate and the timelineSelector (jQuery object).
				* (Has to be triggered on the body because of the go-to-timeline links in the DOM.)
				*/
				$('body').trigger({
					type: "goToTimeline."+this._name,
					goToDate: date,
					timelineSelector: instanceRef.$element
				});

				// Find all event dates.
				var	prevDates = timelineComponents['eventsWrapper'].find('a'),
					// Find the targeted event date using the date
					selectedDate = timelineComponents['eventsWrapper'].find("a").filter($.proxy(function(index, element) {
						var data = this._timelineData($(element), "date");
						if (data == date) return $(element);
					}, this)),
					// Get the width value of the events (previously set)
					timelineTotalWidth = this._setTimelineWidth(timelineComponents);

					//** SmoothScroll functions **//
					if (smoothScroll == true) {
						// Smoothly scroll the document to the target
						$('html, body').stop().animate(
							{
								'scrollTop': instanceRef.$element.offset().top - offset
							},
							speed,
							easing,
							function() {
								// Once scrolling/animating the document is complete, update the target timeline.
								goto(instanceRef);
							}
						); // End .animate function
					}
					else goto(instanceRef);
				}
				// The date is not in the timeline, so we can not go to it.
				else return console.warn('The date '+ date +' is not in the Timeline, so we can not go to it.');

				function goto(instanceRef) {
					// Check if the targeted event hasn't already been selected, if not continue the code.
					if (!selectedDate.hasClass('selected')) {
						// Remove all selected classes from dates
						prevDates.removeClass('selected');
						// Add a selected class to the date we are targeting
						selectedDate.addClass('selected');
						// Update other dates as an older event for styling
						instanceRef._updateOlderEvents(selectedDate);
						// Update the filling line up to the selected date
						instanceRef._updateFilling(selectedDate, timelineComponents['fillingLine'], timelineTotalWidth);
						// Update the visible content of the selected event
						instanceRef._updateVisibleContent(selectedDate, timelineComponents['eventsContent']);
					}
					// Translate (scroll) the timeline left or right according to the position of the targeted event date
					instanceRef._updateTimelinePosition(selectedDate, timelineComponents, timelineTotalWidth);
				} // End goto() function
		}, // End goTo() public method function

		_updateSlide: function (timelineComponents, timelineTotalWidth, string) {
			// Retrieve translateX value of timelineComponents['eventsWrapper']
			var translateValue = this._getTranslateValue(timelineComponents['eventsWrapper']),
				wrapperWidth = Number(timelineComponents['timelineWrapper'].width());
			// Translate the timeline to the left/right (also know as scroll left/scroll right)
			if (string == 'right') this._translateTimeline(timelineComponents, translateValue - wrapperWidth, wrapperWidth - timelineTotalWidth);
			else this._translateTimeline(timelineComponents, translateValue + wrapperWidth);
		},

		_showNewContent: function (timelineComponents, timelineTotalWidth, string) {
			// Show prev/next content
				// Find the .selected content
			var visibleContent =  timelineComponents['eventsContent'].find('.selected');

			// If dateOrder is normal...
			if (this.settings.dateOrder == "normal")
				// Find the prev/next content for detection later.
				var newContent = (string == 'next') ?  visibleContent.next() : visibleContent.prev();

			// If dateOrder is reverse
			else if (this.settings.dateOrder == "reverse")
				// Find the prev/next content in reverse fore detection later.
				var newContent = (string == 'next') ?  visibleContent.prev() : visibleContent.next();

			// If a prev/next content exists
			// OR dateOrder is reverse AND string is start (for Autoplay)...
			// This determines whether we can navigate prev or next.
			if (newContent.length > 0 || (this.settings.dateOrder == "reverse" && string == 'start')) {
				// Find the .selected event
				var selectedDate = timelineComponents['eventsWrapper'].find('.selected'),
					newEvent;

				// If start... (For Autoplay), find the first event
				if(string == 'start') {

					// If the dateOrder is normal (starting from the left)...
					if (this.settings.dateOrder == "normal") {
						// Find the first event.
						newEvent = timelineComponents['eventsWrapper'].find('.first');
					}
					// Else if the dateOrder is reverse (starting from the right)...
					else if (this.settings.dateOrder == "reverse") {
						// Find the last event.
						newEvent = timelineComponents['eventsWrapper'].find('.last');
					}
				}
				// If next, find the next event from the current selected event
				else if (string == 'next') newEvent = selectedDate.next('a');

				// If prev, find the prev event from the current selected event
				else if (string == 'prev') newEvent = selectedDate.prev('a');

				this._updateVisibleContent(newEvent, timelineComponents['eventsContent']);

				newEvent.addClass('selected');
				selectedDate.removeClass('selected');

				this._updateFilling(newEvent, timelineComponents['fillingLine'], timelineTotalWidth);
				this._updateOlderEvents(newEvent);
				this._updateTimelinePosition(newEvent, timelineComponents, timelineTotalWidth);
			}
		},

		_updateTimelinePosition: function (event, timelineComponents, timelineTotalWidth) {
				// Get the css left value of the targeted event date
			var eventLeft = Number(event.css('left').replace('px', '')),
				// Get the width value of the .events-wrapper
				timelineWidth = timelineComponents['timelineWrapper'].width();

			this._translateTimeline(timelineComponents, - eventLeft + timelineWidth/2, timelineWidth - timelineTotalWidth);
		},

		_translateTimeline: function (timelineComponents, value, totalTranslateValue) {
			// Only negative translate value
			var value = (value > 0) ? 0 : value;
			// Do not translate more than timeline width
			value = (!(typeof totalTranslateValue === 'undefined') &&  value < totalTranslateValue ) ? totalTranslateValue : value;
			this._setTransformValue(timelineComponents['eventsWrapper'], 'translateX', value+'px');

			// Disable the buttons if necessary
			this._buttonStates(timelineComponents, value, totalTranslateValue);
		},

		_updateFilling: function (selectedEvent, filling, totalTranslateValue) {
			// Change .filling-line length according to the selected event
				// Get the css left value of the selected event and remove the px unit
			var eventLeft = selectedEvent.css('left').replace('px', ''),
				// Get the css width value of the selected event and remove the px unit
				eventWidth = selectedEvent.css('width').replace('px', '');
			// Add the left and width together and divide by 2
			eventLeft = Number(eventLeft) + Number(eventWidth)/2;
			// Divide the eventLeft and the totalTranslateValue to get the filling line value
			var scaleValue = eventLeft/totalTranslateValue;
			// Set the filling line value
			this._setTransformValue(filling, 'scaleX', scaleValue);
		},

		// Fixed intervals between dates specified in the options.
		_setDatePosition: function (timelineComponents) {
			var	distnew = 0,
				distprev = 0,
				startingNum = 0;

			this._setDateIntervals(timelineComponents);

			var checkMQ = this._checkMQ(),
				// Check if the new object options are defined in the user options, if they are use them,
				// otherwise use the deprecated single options.
				minimal = (this._options.dateIntervals != undefined) ? this.settings.dateIntervals.minimal : this.settings.minimalFirstDateInterval;

			if (minimal == true || checkMQ == 'mobile') {
				// Set the 1st date to 0px on the timeline but with a padding left of 10px.
				timelineComponents['timelineEvents'].first().css({'left': '0px','padding-left': '10px'});
				startingNum = 1;
			}
			// When i starts at 1, it means starts at 2nd date.
			for (i = startingNum; i < timelineComponents['timelineEvents'].length; i++) {
				distnew = distprev + dateIntervals;
				timelineComponents['timelineEvents'].eq(i).css('left', distnew + 'px');
				distprev = distnew;
			}

		},

		_setTimelineWidth: function (timelineComponents) {
			var	totalWidth = 0,
				// Get wrapper width
				wrapperWidth = timelineComponents['timelineWrapper'].width(),
				// Get the css left value of the last event date, remove the px unit and add 100 to it.
				lastEventLeft = Number(timelineComponents['timelineEvents'].last().css('left').replace('px', '')) + 100;

			// Set a fail-safe, if lastEventLeft is less than the wrapperWidth then use the wrapperWidth as totalWidth.
			// Stops the timeline width from being too small.
			if (lastEventLeft < wrapperWidth) {
				totalWidth = wrapperWidth;
			}
			else {
				totalWidth = lastEventLeft;
			}
			timelineComponents['eventsWrapper'].css('width', totalWidth+'px');
			this._updateTimelinePosition(timelineComponents['eventsWrapper'].find('a.selected'), timelineComponents, totalWidth);

			return totalWidth;
		},

		_updateVisibleContent: function (event, eventsContent) {
			var eventDate = this._timelineData(event, "date");
				visibleContent = eventsContent.find('.selected'),
				dataAttribute = this._eventContentListData(),
				// Function to find the new content...
				newContent = eventsContent.find('li['+ dataAttribute +']').filter($.proxy(function(index, element) {
					var data = this._timelineData($(element), "date");
					if (data == eventDate) return $(element);
				}, this)),

				newContentHeight = newContent.outerHeight(),

				// Check if the deprecated single options are defined in the user options, if they are use them,
				// otherwise use the new object options.

				// Set the single options into an array to check against.
				optionArray = [this._options.enter_animationClass, this._options.exit_animationClass],

				// A variable to include in an if statement that queries if the single options are undefined.
				singleUndefined = (optionArray[0] == undefined && optionArray[1] == undefined),

				// A variable to include in an if statement that queries if the single option is defined 
				// AND the object option is also defined.
				bothDefined = (optionArray[0] != undefined && this._options.animationClass != undefined)
					|| (optionArray[1] != undefined && this._options.animationClass != undefined),

				// If single option are undefined OR both single and object options are defined
				// then default to the object options, otherwise use the deprecated single option.
				animationObj = (singleUndefined || bothDefined) ? this.settings.animationClass : this.settings,

				// If animationObj equals the object options...

				enterObj = (animationObj == this.settings.animationClass) ? animationObj.enter : animationObj.enter_animationClass,
				exitObj = (animationObj == this.settings.animationClass) ? animationObj.exit : animationObj.exit_animationClass,

				allClasses = exitObj.right + ' ' + exitObj.left + ' ' + enterObj.left + ' ' + enterObj.right;

			// If newContent index is more than the visibleContent index,
			// then we have selected an event to the right.
			if (newContent.index() > visibleContent.index()) {
					// Set the selected and the enter right classes.
				var classEntering = 'selected ' + enterObj.right,
					// Set the exit left class.
					classExiting = exitObj.left;
			}
			// Else, we have selecting an event to the left.
			else {
					// Set the selected and the enter left classes.
				var classEntering = 'selected ' + enterObj.left,
					// Set the exit right class.
					classExiting = exitObj.right;
			}

			/* Add/remove classes to animate them in and out using CSS3. */

			function whichAnimationEvent(){
				var t,
					el = document.createElement("fakeelement"),
					animations = {
						"animation": "animationend",
						"OAnimation": "oAnimationEnd",
						"MozAnimation": "animationend",
						"WebkitAnimation": "webkitAnimationEnd"
					};

				for (t in animations){
					if (el.style[t] !== undefined) return animations[t];
				}
			}

			var animationEvent = whichAnimationEvent(),
			    dataAttribute = this._eventContentListData();

			// Add the enter class to the newContent.
			newContent.addClass(classEntering);
			// Add the exit class to the visibleContent and on animation end...
			visibleContent
				.addClass(classExiting)
				.one(animationEvent, function(e){
					// Remove all enter and exit classes from all the event content.
					eventsContent.find('li['+ dataAttribute +']').removeClass(allClasses);
				})
				// And then remove the selected class.
				.removeClass('selected');

			// Update the height.
			eventsContent.height(newContentHeight+'px');

			// For use with autoplay...
			if (this.settings.autoplay == true) this._autoplay.moved(this);

			/* Custom namespaced event: eventChanged with the data passed to the event as the current selected eventDate. */
			this.$element.trigger({
				type: "eventChanged."+this._name,
				currentEventDate: eventDate
			});

		}, // End _updateVisibleContent function

		_updateOlderEvents: function (event) {
			event.prevAll('a').addClass('older-event').end()
				.nextAll('a').removeClass('older-event');
			if (event.is('.selected')) event.removeClass('older-event');
		},

		_getTranslateValue: function (timeline) {
			var timelineStyle = window.getComputedStyle(timeline.get(0), null),
				timelineTranslate = timelineStyle.getPropertyValue("-webkit-transform") ||
					timelineStyle.getPropertyValue("-moz-transform") ||
					timelineStyle.getPropertyValue("-ms-transform") ||
					timelineStyle.getPropertyValue("-o-transform") ||
					timelineStyle.getPropertyValue("transform");

			if(timelineTranslate.indexOf('(') >=0) {
				var timelineTranslate = timelineTranslate.split('(')[1];
				timelineTranslate = timelineTranslate.split(')')[0];
				timelineTranslate = timelineTranslate.split(',');
				var translateValue = timelineTranslate[4];
			} else {
				var translateValue = 0;
			}
			return Number(translateValue);
		},

		_setTransformValue: function (element, property, value) {
			element.css({
				"-webkit-transform": property + "("+value+")",
				"-moz-transform": property + "("+value+")",
				"-ms-transform": property + "("+value+")",
				"-o-transform": property + "("+value+")",
				"transform": property + "("+value+")"
			});
		},

		/* How to tell if a DOM element is visible in the current viewport?
		http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport */
		_elementInViewport: function (el) {
			var top = el.offsetTop,
				left = el.offsetLeft,
				width = el.offsetWidth,
				height = el.offsetHeight;

			while(el.offsetParent) {
				el = el.offsetParent;
				top += el.offsetTop;
				left += el.offsetLeft;
			}

			return (
				top < (window.pageYOffset + window.innerHeight) &&
				left < (window.pageXOffset + window.innerWidth) &&
				(top + height) > window.pageYOffset &&
				(left + width) > window.pageXOffset
			);
		},

		_setDateIntervals: function (timelineComponents) {
			var checkMQ = this._checkMQ(),
				// Set a minimum value for the intervals.
				minimumInterval = 120,

				// Check if the deprecated single options are defined in the user options, if they are use them,
				// otherwise use the new object options.

				// Set the single options into an array to check against.
				optionArray = [this._options.desktopDateIntervals, this._options.tabletDateIntervals, this._options.mobileDateIntervals],

				// A variable to include in an if statement that queries if the single options are undefined.
				singleUndefined = (optionArray[0] == undefined && optionArray[1] == undefined && optionArray[2] == undefined),

				// A variable to include in an if statement that queries if the single option is defined 
				// AND the object option is also defined.
				bothDefined = (optionArray[0] != undefined && this._options.dateIntervals != undefined) 
					|| (optionArray[1] != undefined && this._options.dateIntervals != undefined) 
					|| (optionArray[2] != undefined && this._options.dateIntervals != undefined),

				// If single options are undefined OR both single and object options are defined
				// then default to the object options, otherwise use the deprecated single options.
				date_intervals = (singleUndefined || bothDefined) ? this.settings.dateIntervals : this.settings,

				// If date_intervals equals the object options...
				desktop = (date_intervals == this.settings.dateIntervals) ? date_intervals.desktop : date_intervals.desktopDateIntervals,

				tablet = (date_intervals == this.settings.dateIntervals) ? date_intervals.tablet : date_intervals.tabletDateIntervals,

				mobile = (date_intervals == this.settings.dateIntervals) ? date_intervals.mobile : date_intervals.mobileDateIntervals;
				
			// If desktop is detected, set dateIntervals to desktop
			if (checkMQ == 'desktop') dateIntervals = desktop;
			// If tablet is detected, set dateIntervals to tablet
			else if (checkMQ == 'tablet') dateIntervals = tablet;
			// If mobile is detected, set dateIntervals to mobile
			else if (checkMQ == 'mobile') dateIntervals = mobile;
			
			// If dateIntervals options are set to below the minimum value, then change it.
			if (dateIntervals < minimumInterval) dateIntervals = minimumInterval;
		},

		_checkMQ: function () {
			// Check for mobile, table or desktop device
			// https://stackoverflow.com/a/14913306/2358222
			return window.getComputedStyle(this.element,':before').content.replace(/'/g, "").replace(/"/g, "");
		},

		//** Button States **//
		_buttonStates: function (timelineComponents, translateValue, totalTranslateValue){
			var nextButton = timelineComponents['timelineNavigation'].find('.next'),
				prevButton = timelineComponents['timelineNavigation'].find('.prev'),

				leftButton = timelineComponents['timelineNavigation'].find('.scroll-left'),
				rightButton = timelineComponents['timelineNavigation'].find('.scroll-right'),

				firstEvent = timelineComponents['timelineWrapper'].find('.first'),
				lastEvent = timelineComponents['timelineWrapper'].find('.last'),
				// Get the wrapper width
				wrapperWidth = timelineComponents['timelineWrapper'].width(),
				// Get the width value of the events (previously set)
				timelineTotalWidth = timelineComponents['eventsWrapper'].width();

			// If wrapper width equals the timeline total width,
			// then disable both scroll left and right buttons
			if(wrapperWidth == timelineTotalWidth){
				leftButton.addClass('inactive');
				rightButton.addClass('inactive');
			}

			/* Prev/Next buttons */
			if (timelineComponents['eventsContentList'].length == 1) {
				prevButton.addClass('inactive');
				nextButton.addClass('inactive');
			}
			else {
				// If first event is selected, then disable the prev button
				if(firstEvent.is('.selected')) prevButton.addClass('inactive');
				// If not, then enable the prev button
				else prevButton.removeClass('inactive');

				// If last event is selected, then disable the next button
				if(lastEvent.is('.selected')) nextButton.addClass('inactive');
				// If not, then enable the next button
				else nextButton.removeClass('inactive');
			}
			/* Scroll left/right buttons */

			// If translate value equals zero, it's the start of the timeline,
			// so disable the scroll left button
			if (translateValue == 0) leftButton.addClass('inactive');
			// If not, then enable the scroll left button
			else leftButton.removeClass('inactive');

			// If translate value equals to the total translate value, it's the end of the timeline,
			// so disable the scroll right button
			if (translateValue == totalTranslateValue) rightButton.addClass('inactive');
			// If not, then enable the scroll right button
			else rightButton.removeClass('inactive');
		}, // End _buttonStates() function

		// Function to add required js and css files dynamically
		// (CDN URL of the plugin, file type JS or CSS, callback function)
		_addFile: function (url, type, callback) {
			// If addRequiredFile is true...
			if (this.settings.addRequiredFile == true) {
					// Set loadedFile variable as body data of the loadedfile array, to check against later
				var loadedFile = $('body').data('plugin_'+ this._name +'_loadedFile'),
					// Declare an empty variable
					fileExists,
					// Variables for script and style
					js = type == 'js',
					css = type == 'css',
					// Get the name from the url
					strip = url.split('libs/'),
					strip = strip[1].split('/'),
					name = strip[0];

				// If js, check if the name is in a src attribute in a <script> tag
				if(js) fileExists = $('script[src*="'+name+'"]');

				// Else if css, check if the name is in a href attribute in a <link> tag
				else if (css) fileExists = $('link[href*="'+name+'"]');

				// If loadedFile is undefined/not set, create a new array for the loaded files.
				if (typeof loadedFile === 'undefined' || loadedFile === null) loadedFile = new Array();

				// If loadedFile array doesn't include the url AND
				// the file doesn't exist in the document...

				// Using !loadedFile.includes(url) would be more ideal,
				// but due to no support in IE11, we can't use it.
				if (loadedFile.indexOf(url) == -1 && !fileExists.length) {

					// File isn't loaded yet...
					// If adding js...
					if(js) {
						console.groupCollapsed(name + ' on ' + this.$element.attr('id') + " timeline");
						console.log('The plugin isn\'t loaded.');

						// Load the plugin dynamically via Ajax.
						$.getScript(url)
							.done(function(script, textStatus) {
								// Then execute it via the callback option
								// Check if callback is a function, if it is then set a variable as the callback to be called.
								if (typeof callback === "function") callback(this);
							})
							.fail(function(jqxhr, settings, exception) {
								console.error("Failed to get " + url + "\n" + jqxhr + "\n" + this.settings + "\n" + exception);
							}); // End $.getScript function

						console.log('It was loaded dynamically.');
					}
					// Else if adding CSS...
					else if (css) {
						console.groupCollapsed(name);
						console.log('The plugin isn\'t loaded.');

						// Add a the CSS file in a new <link> after the last <link> in the head.
						$('<link>').attr({'href':url, 'rel':'stylesheet', 'type':"text/css"}).insertAfter(
							$('head').find('link').last()
						);

						console.log('It was loaded dynamically.');
					}
					// Push/add the url to the loadedFile array to check against.
					loadedFile.push(url);

				}
				// Else if the file exists in the document AND
				// the URL isn't in the loadedFile array...

				// Using !loadedFile.includes(url) would be more ideal,
				// but due to no support in IE11, we can't use it.
				else if (fileExists.length && loadedFile.indexOf(url) == -1) {
					// The file is already loaded in the document via a <script> tag...
					if(js) {
						console.groupCollapsed(name + ' on ' + this.$element.attr('id') + " timeline");
						console.log('The plugin has already been loaded in the document via a <script> tag, no need to load it again.');

						// Execute the plugin via the callback option.
						// Check if callback is a function, if it is then set a variable as the callback to be called.
						if (typeof callback === "function") callback(this);
					}
					// Push/add the url to the loadedFile array to check against.
					loadedFile.push(url);
				}
				// Else the plugin has already been loaded...
				else {
					if(js) {
						console.groupCollapsed(name + ' on ' + this.$element.attr('id') + " timeline");
						console.log('The plugin has already been loaded, no need to load it again.');

						// Execute the plugin via the callback option.
						// Check if callback is a function, if it is then set a variable as the callback to be called.
						if (typeof callback === "function") callback(this);
					}
				}

				if(js) {
					console.log('Executed on:', this.$element);
				}
				console.groupEnd();

				// Save the loadedFile array as data to the body to be able to reload it next time it's accessed.
				$('body').data('plugin_'+ this._name +'_loadedFile', loadedFile);
			} // End if addRequiredFile statement.
			// If addRequiredFile is false we just need to execute the plugin via the callback option.
			else {
				// Check if callback is a function, if it is then set a variable as the callback to be called.
				if (typeof callback === "function") callback(this);
			}
		} // End addFile function
 	}; // End Timeline Prototype

	// A really lightweight plugin wrapper around the constructor,
	// preventing against multiple instantiations and allowing any
	// public function (ie. a function whose name doesn't start
	// with an underscore) to be called via the jQuery plugin,
	// e.g. $(element).defaultPluginName('functionName', arg1, arg2)
	$.fn[pluginName] = function (options) {
		var args = arguments,
			windowWidth = $(window).width(),
		    	// data-date deprecated as of v2.0.5.alpha.3
			// and will be removed in a later major version.
			dataAttribute = ($(this).find('li').data('horizontal-timeline')) ? "data-horizontal-timeline": "data-date",
		    
			dateExists = $(this).find('.events-content').find('li['+ dataAttribute +']').map(function() {
				if ($(this).data('horizontal-timeline')) {
					var data = $(this).data('horizontal-timeline');

					return data.date;
				}
				// data-date deprecated as of v2.0.5.alpha.3
				// and will be removed in a later major version.
				else {
					var dataDate = $(this).data('date');

					return dataDate;
				}
			}).get();

		// Is the first parameter an object (options), or was omitted,
		// instantiate a new instance of the plugin.
		if (options === undefined || typeof options === 'object') {
			return this.each(function () {

				// Only allow the plugin to be instantiated once,
				// so we check that the element has no plugin instantiation yet
				if (!$.data(this, 'plugin_' + pluginName)) {

					// if it has no instance, create a new one,
					// pass options to our plugin constructor,
					// and store the plugin instance
					// in the elements jQuery data object.
					$.data(this, 'plugin_' + pluginName, {
						'originalEventsContent': $(this).find('.events-content').clone()[0],
						'windowWidth': windowWidth,
						'existingDates': dateExists,
						'Timeline': new Timeline(this, options)
					});
					if (options !== undefined && options.autoplay == true) { // changed
						autoplayObj = {
							"isPaused": false,
							"mouseEvent": false
						};

						$(this).data('plugin_'+ pluginName)['autoplay'] = autoplayObj;
					}
				}
			});

		// If the first parameter is a string and it doesn't start
		// with an underscore or "contains" the `init`-function,
		// treat this as a call to a public method.
		} 
		else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {
			// Cache the method call
			// to make it possible
			// to return a value
			var returns;

			this.each(function () {
				var instance = $.data(this, 'plugin_' + pluginName)['Timeline'];

				// Tests that there's already a plugin-instance
				// and checks that the requested public method exists
				if (instance instanceof Timeline && typeof instance[options] === 'function') {

					// Call the method of our plugin instance,
					// and pass it the supplied arguments.
					returns = instance[options].apply( instance, Array.prototype.slice.call( args, 1 ));
				}
			});

			// If the earlier cached method
			// gives a value back return the value,
			// otherwise return this to preserve chainability.
			return returns !== undefined ? returns : this;
		}
	};

})( jQuery, window, document );

================
File: assets/scripts/geneafan/tabs/timeline/timelineEventsStore.js
================
import { makeAutoObservable, action, computed, runInAction } from '../../common/stores/mobx-config.js';
import { groupEvents } from "../../utils/utils.js";

/**
 * Store responsible for managing timeline events data
 */
class TimelineEventsStore {
    // Core data
    events = [];
    groupedEvents = {};

    constructor() {
        makeAutoObservable(this, {
            addEvent: action,
            clearEvents: action,
            setEvents: action,
            
            // Ne plus déclarer getEventsByType comme computed ici
            hasEvents: computed
        });
    }

    // Computed properties avec la syntaxe getter
    get hasEvents() {
        return this.events.length > 0;
    }

    // Transformer en getter pour computed
    get eventsByType() {
        return (type) => this.events.filter(event => event.type === type);
    }

    // Actions
    addEvent = (event) => {
        // Validation basique
        if (!event.type || !event.date || !event.name) {
            console.warn('Invalid event format:', event);
            return;
        }

        // Éviter les doublons basés sur eventId si présent
        if (event.eventId && this.events.some(e => e.eventId === event.eventId)) {
            return;
        }

        // Enrichir l'événement avec des valeurs par défaut si nécessaire
        const enrichedEvent = {
            ...event,
            town: event.town || "lieu inconnu",
            townDisplay: event.townDisplay || event.town || "lieu inconnu",
            age: event.age || null,
            spouse: event.spouse || '',
            sosa: event.sosa || null
        };

        runInAction(() => {
            this.events.push(enrichedEvent);
            this._updateGroupedEvents();
        });
    }

    setEvents = (events) => {
        runInAction(() => {
            this.events = events;
            this._updateGroupedEvents();
        });
    }

    clearEvents = () => {
        runInAction(() => {
            this.events = [];
            this.groupedEvents = {};
        });
    }

    // Helpers (préfixés avec _ pour indiquer qu'ils sont "privés")
    _updateGroupedEvents = () => {
        this.groupedEvents = groupEvents(this.events, 5);
    }

    _getAncestorBranchAndGeneration = (sosaNumber) => {
        const binaryRep = sosaNumber.toString(2);
        const generation = binaryRep.length - 1;
        const firstBit = binaryRep[1];

        return {
            branch: firstBit === '0' ? 'paternal' : 'maternal',
            generation: generation
        };
    }

    formatEvent = (event, eventType) => {
        if (event.sosa) {
            const ancestorInfo = this._getAncestorBranchAndGeneration(event.sosa);
            const color = ancestorInfo.branch === 'paternal' ? 'darkblue' : 'deeppink';
            return `${event.name} (${event.date}) at ${event.town} <span style="color: ${color}">(+ ${ancestorInfo.generation} generations up)</span>`;
        } else {
            return eventType === 'birth'
                ? `${event.name} (${event.date}) at ${event.town}`
                : eventType === 'death'
                ? `${event.name} (${event.date}) at the age of ${event.age} at ${event.town}`
                : `${event.name} (${event.date}) with ${event.spouse} at ${event.town}`;
        }
    }

    // Public getters
    getAllEvents = () => this.events;
    getGroupedEvents = () => this.groupedEvents;
    
    // On peut utiliser eventsByType comme ça : store.eventsByType('birth')
}

const timelineEventsStore = new TimelineEventsStore();
export default timelineEventsStore;

================
File: assets/scripts/geneafan/tabs/timeline/timelineManager.js
================
import timelineStore from './timelineStore.js';
import rootPersonStore from '../../common/stores/rootPersonStore.js';
import { reaction } from '../../common/stores/mobx-config.js';

class TimelineManager {
    constructor() {
        this.timelineTab = document.querySelector('a[href="#tab4"]');
        this.timelineContainer = document.getElementById('ascendantTimeline');
        this.setupReactions();
        this.setupTabListeners();
    }

    setupReactions() {
        // React to root person changes
        reaction(
            () => rootPersonStore.root,
            (root) => {
                if (root) {
                    this.enableTimelineTab();
                } else {
                    this.disableTimelineTab();
                }
            }
        );

        // React to timeline status changes
        reaction(
            () => timelineStore.status,
            (status) => {
                if (status === 'success') {
                    this.enableTimelineTab();
                } else if (status === 'error') {
                    this.disableTimelineTab();
                }
            }
        );
    }

    setupTabListeners() {
        // Initialize timeline when tab becomes visible
        this.timelineTab?.addEventListener('shown.bs.tab', async () => {
            if (timelineStore.status !== 'success') {
                await timelineStore.updateTimelineForRoot();
            }
            
            // Force resize after tab is shown to ensure proper rendering
            if (timelineStore.horizontalTimelineInstance) {
                window.dispatchEvent(new Event('resize'));
            }
        });
    }

    enableTimelineTab() {
        if (this.timelineTab) {
            this.timelineTab.classList.remove('disabled');
        }
    }

    disableTimelineTab() {
        if (this.timelineTab) {
            this.timelineTab.classList.add('disabled');
        }
    }

    // Clean up method
    destroy() {
        timelineStore.dispose();
        this.timelineTab?.removeEventListener('shown.bs.tab');
    }
}

// Initialize the timeline manager when the document is ready
document.addEventListener('DOMContentLoaded', () => {
    window.timelineManager = new TimelineManager();
});

export default TimelineManager;

================
File: assets/scripts/geneafan/tabs/timeline/timelineStore.js
================
import { makeAutoObservable, action, computed, reaction, runInAction } from '../../common/stores/mobx-config.js';
import timelineEventsStore from './timelineEventsStore.js';
import $ from 'jquery';
import rootPersonStore from '../../common/stores/rootPersonStore.js';

/**
 * Store responsible for managing the timeline visualization.
 * Automatically synchronizes with root person changes and manages the horizontal timeline display.
 */
class TimelineStore {
    // State management
    status = 'idle'; // 'idle' | 'loading' | 'success' | 'error'
    errorMessage = null;
    horizontalTimelineInstance = null;

    constructor() {
        makeAutoObservable(this, {
            initializeTimeline: action,
            setStatus: action,
            clearTimeline: action,
            updateTimelineForRoot: action,
            
            // Computed
            currentTimelineHTML: computed,
            isLoading: computed,
            hasError: computed,
            
            // Non-observables
            horizontalTimelineInstance: false,
        });

        // Réagir aux changements de root
        this.rootReactionDisposer = reaction(
            () => rootPersonStore.root,
            async (newRoot) => {
                if (newRoot) {
                    await this.updateTimelineForRoot();
                } else {
                    this.clearTimeline();
                }
            },
            {
                name: 'TimelineStore-RootChangeReaction'
            }
        );
    }

    // Computed properties
    get isLoading() {
        return this.status === 'loading';
    }

    get hasError() {
        return this.status === 'error';
    }

    get currentTimelineHTML() {
        return this.generateTimelineEvents();
    }

    // Actions
    setStatus(newStatus, error = null) {
        this.status = newStatus;
        this.errorMessage = error;

        if (process.env.NODE_ENV === 'development' && error) {
            console.error('Timeline error:', error);
        }
    }

    generateTimelineEvents() {
        if (!timelineEventsStore.hasEvents) return '';
        
        let eventsContentHTML = '<div class="events-content"><ol>';
        
        const eventTypes = [
            { 
                type: 'birth', 
                title: 'Naissances', 
                format: event => timelineEventsStore.formatEvent(event, 'birth') 
            },
            { 
                type: 'death', 
                title: 'Décès', 
                format: event => timelineEventsStore.formatEvent(event, 'death') 
            },
            { 
                type: 'marriage', 
                title: 'Mariages', 
                format: event => timelineEventsStore.formatEvent(event, 'marriage') 
            }
        ];

        const groupedEvents = timelineEventsStore.getGroupedEvents();
        for (const period in groupedEvents) {
            eventsContentHTML += `<li class="box" data-horizontal-timeline='{"date": "${period}"}'>`;

            eventTypes.forEach(({ type, title, format }) => {
                const events = groupedEvents[period][type] || [];
                if (events.length > 0) {
                    eventsContentHTML += `<h4>${title}</h4><ul class="text-start">`;
                    events.forEach(event => {
                        eventsContentHTML += `<li>${format(event)}</li>`;
                    });
                    eventsContentHTML += '</ul>';
                }
            });

            eventsContentHTML += '</li>';
        }

        eventsContentHTML += '</ol></div>';
        return eventsContentHTML;
    }

    async updateTimelineForRoot() {
        try {
            runInAction(() => {
                this.setStatus('loading');
            });

            if (timelineEventsStore.hasEvents) {
                // Mettre à jour le DOM avec le nouveau contenu
                const timelineElement = document.getElementById("ascendantTimeline");
                if (timelineElement) {
                    // Nettoyer l'instance précédente si elle existe
                    this.cleanupTimelineInstance();
                    
                    timelineElement.innerHTML = this.currentTimelineHTML;
                    // Réinitialiser la timeline horizontale
                    await this.initializeHorizontalTimeline();
                    this.setStatus('success');
                } else {
                    throw new Error('Timeline container not found');
                }
            } else {
                this.setStatus('success');
            }
        } catch (error) {
            runInAction(() => {
                this.setStatus('error', error.message);
            });
        }
    }

    async initializeHorizontalTimeline() {
        try {
            if (!window.jQuery) {
                window.$ = $;
                window.jQuery = $;
            }

            await import('./horizontalTimeline.js');

            this.horizontalTimelineInstance = $('#ascendantTimeline').horizontalTimeline({
                dateIntervals: {
                    "desktop": 175,
                    "tablet": 150,
                    "mobile": 120,
                    "minimal": true
                },
                iconClass: {
                    "base": "fas fa-2x",
                    "scrollLeft": "fa-chevron-circle-left",
                    "scrollRight": "fa-chevron-circle-right",
                    "prev": "fa-arrow-circle-left",
                    "next": "fa-arrow-circle-right",
                    "pause": "fa-pause-circle",
                    "play": "fa-play-circle"
                },
                "exit": {
                    "left": "exit-left",
                    "right": "exit-right"
                },
                contentContainerSelector: false
            });
        } catch (error) {
            console.error('Failed to initialize horizontal timeline:', error);
            throw error;
        }
    }

    cleanupTimelineInstance() {
        if (this.horizontalTimelineInstance) {
            if (typeof this.horizontalTimelineInstance.destroy === 'function') {
                this.horizontalTimelineInstance.destroy();
            }
            this.horizontalTimelineInstance = null;
        }
    }

    clearTimeline() {
        this.cleanupTimelineInstance();
        
        runInAction(() => {
            this.setStatus('idle');
        });
        
        const timelineElement = document.getElementById("ascendantTimeline");
        if (timelineElement) {
            timelineElement.innerHTML = '';
        }
    }

    dispose() {
        if (this.rootReactionDisposer) {
            this.rootReactionDisposer();
        }
        this.clearTimeline();
    }
}

const timelineStore = new TimelineStore();
export default timelineStore;

================
File: assets/scripts/geneafan/tabs/tabManager.js
================
import TimelineManager from './timeline/timelineManager.js';
import { googleMapManager } from './familyMap/googleMapManager.js';
import { FanChartManager } from './fanChart/fanChartManager.js';
import { statisticsManager } from './statistics/statisticsManager.js';

export async function initializeTabs() {
    console.log('Tab initialization started');

    try {
        // Initialisation de l'onglet Éventail
        await FanChartManager.initialize();

        // Initialisation de la carte une fois l'onglet visible
        // Initialisation de la carte une fois l'onglet visible
        initializeTabOnVisible('#tab2', () => {
            console.log('🗺️ Map tab is now visible and ready for initialization');
            console.log('⚙️ Starting Google Maps initialization process...');
            googleMapManager.initialize();
        });

        // Initialisation de la Timeline
        new TimelineManager();

        // Initialisation des statistiques une fois l'onglet visible
        initializeTabOnVisible('#tab5', () => {
            console.log('Statistics tab is visible. Initializing statistics...');
            statisticsManager.initialize();
        });

    } catch (error) {
        console.error("Error initializing tabs:", error);
        throw error;
    }
}

function initializeTabOnVisible(tabSelector, initCallback) {
    const tab = document.querySelector(tabSelector);
    if (tab) {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    initCallback();
                    observer.disconnect();
                }
            });
        });
        observer.observe(tab);
    }
}

================
File: assets/scripts/geneafan/utils/dates.js
================
import _ from 'lodash';
import moment from 'moment';

export function parseDate(date) {
    if (!date || date.toLowerCase() === 'date inconnue') return moment.invalid(); // Handle undefined or unknown dates

    if (date.match(/^\d{2}\/\d{2}\/\d{4}$/)) { // "DD/MM/YYYY"
        return moment(date, "DD/MM/YYYY", true); // Strict parsing
    } else if (date.match(/^\d{2}\/\d{4}$/)) { // "MM/YYYY"
        return moment(date, "MM/YYYY", true);
    } else if (date.match(/^\d{4}$/)) { // "YYYY"
        return moment(date, "YYYY", true);
    }
    return moment.invalid(); // Return invalid moment if format is not recognized
}

export function extractYear(dateString) {
    // Check if dateString is null or not a string
    if (dateString === null || typeof dateString !== 'string') {
        return null;
    }

    // Split the date string by '/'
    const parts = dateString.split('/');
    // Check the number of parts
    switch (parts.length) {
    case 1:
        // If dateString is in 'yyyy' format
        return parts[0];
    case 2:
        // If dateString is in 'mm/yyyy' format
        return parts[1];
    case 3:
        // If dateString is in 'dd/mm/yyyy' format
        return parts[2];
    default:
        // If dateString is not in a recognized format
        throw new Error('Invalid date format');
    }
}

export function prefixedDate(date) {
    const mmYYYY = /^\d{2}\/\d{4}$/;
    const YYYY = /^\d{4}$/;
    const ddMMYYYY = /^\d{2}\/\d{2}\/\d{4}$/;

    let prefix = '';

    if (mmYYYY.test(date) || YYYY.test(date)) {
        prefix = 'en';
    } else if (ddMMYYYY.test(date)) {
        prefix = 'le';
    }

    return `${prefix} ${date}`;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
}

export function calculateAge(birthdate, deathdate = null) {
    if (!birthdate) {
        return "";
    }

    const birthFormat = detectDateFormat(birthdate);
    const birthdateMoment = moment(birthdate, birthFormat);

    if (!birthdateMoment.isValid()) {
        return ""; // Invalid birthdate
    }

    let referenceDate = deathdate ? moment(deathdate, detectDateFormat(deathdate)) : moment();

    if (!referenceDate.isValid()) {
        return ""; // Invalid deathdate
    }

    const birthDay = birthdateMoment.date();
    const birthMonth = birthdateMoment.month() + 1; // Month is 0-indexed in moment.js
    const birthYear = birthdateMoment.year();

    const referenceDay = referenceDate.date();
    const referenceMonth = referenceDate.month() + 1;
    const referenceYear = referenceDate.year();

    let month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    if (isLeapYear(birthYear)) {
        month[1] = 29; // Update February days to 29 if it's a leap year
    }

    let adjustedReferenceDay = referenceDay;
    let adjustedReferenceMonth = referenceMonth;
    let adjustedReferenceYear = referenceYear;

    if (birthDay > referenceDay) {
        adjustedReferenceDay += month[referenceMonth - 1];
        adjustedReferenceMonth -= 1;
    }

    if (birthMonth > adjustedReferenceMonth) {
        adjustedReferenceMonth += 12;
        adjustedReferenceYear -= 1;
    }

    let dayDifference = adjustedReferenceDay - birthDay;
    let monthDifference = adjustedReferenceMonth - birthMonth;
    let yearDifference = adjustedReferenceYear - birthYear;

    return yearDifference;
}

export function detectDateFormat(date) {
    // Cette fonction détecte le format de la date en comptant les parties séparées par '/'
    const parts = date.split('/').length;
    switch (parts) {
        case 1: return "YYYY";   // Année seulement
        case 2: return "MM/YYYY"; // Mois et année
        case 3: return "DD/MM/YYYY"; // Jour, mois et année
        default: return "DD/MM/YYYY"; // Format par défaut
    }
}

================
File: assets/scripts/geneafan/utils/geo.js
================
import deburr from 'lodash/deburr';
import replace from 'lodash/replace';
import toLower from 'lodash/toLower';

export function normalizeGeoString(inputString) {
    return toLower(replace(deburr(inputString), /\s/g, "_"));
}

export function cleanTownName(str) {
    const cleanPlace = (place) =>
        (place.split(/,|\(.*|\s\d+\s*$/)[0].replace(/\d+$/, "") || "").trim();
    return cleanPlace(str);
}

export function formatTownName(str) {
    if (typeof str !== "string") {
        str = String(str);
    }
    str = cleanTownName(str);

    str = str.toLowerCase().replace(/(^|[-\s])([a-zà-ÿ])/g, function (match) {
        return match.toUpperCase();
    });

    str = str.replace(/(-D'|-d'| D'| d')(\w)/g, function(match, p1, p2) {
        return "-d'" + p2.toUpperCase();
    });

    const replacements = [
        { pattern: /-Sur-| Sur | s\/ /g, replacement: "-s/-" },
        { pattern: /-Sous-| Sous /g, replacement: "-/s-" },
        { pattern: /-La-| La | la /g, replacement: "-la-" },
        { pattern: /-Le-| Le | le /g, replacement: "-le-" },
        { pattern: /-Les-| Les | les /g, replacement: "-les-" },
        { pattern: /-Lès-| Lès | lès /g, replacement: "-lès-" },
        { pattern: /-Au-| Au | au /g, replacement: "-au-" },
        { pattern: /-Du-| Du | du /g, replacement: "-du-" },
        { pattern: /-De-| De | de /g, replacement: "-de-" },
        { pattern: /-Des-| Des | des /g, replacement: "-des-" },
        { pattern: /-Devant-| Devant | devant /g, replacement: "-devant-" },
        { pattern: /-En-| En | en /g, replacement: "-en-" },
        { pattern: /-Et-| Et | et /g, replacement: "-et-" },
        {
            pattern: /(Saint|Sainte)-|(Saint|Sainte) /g,
            replacement: function (match) {
                return match[0] === "S" ? "St-" : "Ste-";
            },
        },
        {
            pattern: /(Mont-|Mont |^-Mont$)/g,
            replacement: function (match) {
                return match === "-Mont" ? "-Mt" : "Mt-";
            },
        },
        { pattern: /-Madame$/g, replacement: "-Mme" },
        { pattern: /-Vieux$/g, replacement: "-Vx" },
        { pattern: /-Grand$/g, replacement: "-Gd" },
        { pattern: /-Petit$/g, replacement: "-Pt" },
        { pattern: /-Moulineaux$/g, replacement: "-Mlx" },
        {
            pattern: /(Paris|Marseille|Lyon)(-|\s)\b(X{0,3}(I{1,3}|IV|VI{0,3}|IX|X{0,3}V?I{0,3})\b)(ème)?/gi,
            replacement: "$1",
        },
        {
            pattern: /(Paris|Marseille|Lyon)(-|\s)\d{5}/gi,
            replacement: "$1",
        },
        {
            pattern: /(Paris|Marseille|Lyon)(-|\s)?(\d{1,2}(er|e|ème)?)/gi,
            replacement: "$1",
        },
    ];

    replacements.forEach(({ pattern, replacement }) => {
        str = str.replace(pattern, replacement);
    });

    return str;
}

================
File: assets/scripts/geneafan/utils/spinners.js
================
// Function to show a global spinner (e.g., for a modal or loading screen)
export function showGlobalSpinner() {
  const spinner = document.getElementById('loadingSpinner');
  const content = document.getElementById('modalContent');
  if (spinner && content) {
    spinner.style.display = 'block';
    content.style.opacity = '0.5'; // Optionally reduce opacity to indicate loading state
  }
}

// Function to hide the global spinner
export function hideGlobalSpinner() {
  const spinner = document.getElementById('loadingSpinner');
  const content = document.getElementById('modalContent');
  if (spinner && content) {
    spinner.style.display = 'none';
    content.style.opacity = '1'; // Restore original opacity when loading is complete
  }
}

// Function to show a button-specific spinner (e.g., for submit buttons)
export function showButtonSpinner(sanitizedFileId) {
  const spinner = document.getElementById(`shareButtonSpinner-${sanitizedFileId}`);
  if (spinner) {
    spinner.style.display = 'inline-block';
  }
}

// Function to hide a button-specific spinner
export function hideButtonSpinner(sanitizedFileId) {
  const spinner = document.getElementById(`shareButtonSpinner-${sanitizedFileId}`);
  if (spinner) {
    spinner.style.display = 'none';
  }
}

================
File: assets/scripts/geneafan/utils/tooltips.js
================
import { Tooltip } from 'bootstrap';

// Function to initialize tooltips for a given container element
export function initializeTooltips(containerElement) {
  if (!containerElement) {
    console.error('Container element is required to initialize tooltips.');
    return;
  }

  // Find all elements with data-bs-toggle="tooltip" inside the container
  const tooltipTriggerList = containerElement.querySelectorAll('[data-bs-toggle="tooltip"]');

  // Initialize Bootstrap tooltips for each element
  tooltipTriggerList.forEach(tooltipTriggerEl => {
    new Tooltip(tooltipTriggerEl);
    // console.log('Tooltip initialized for:', tooltipTriggerEl);
  });
}

================
File: assets/scripts/geneafan/utils/utils.js
================
import _ from 'lodash';
import familyTownsStore from '../gedcom/familyTownsStore.js';
import { parseDate } from './dates.js';

export const memoize = (fn) => {
    const cache = new Map();
    return (...args) => {
        const key = JSON.stringify(args);
        if (cache.has(key)) {
            return cache.get(key);
        }
        const result = fn(...args);
        cache.set(key, result);
        return result;
    };
};

export function groupEvents(events, yearsGroup = 10) {
    // Parse and filter valid dates
    const validEvents = _.filter(events, event => {
        const parsedDate = parseDate(event.date);
        if (parsedDate.isValid()) {
            event.parsedDate = parsedDate; // Attach parsed date to the event object
            return true;
        }
        return false;
    });

    // Sort events by date
    const sortedEvents = _.sortBy(validEvents, event => event.parsedDate.toISOString());

    // Group events by the specified number of years
    const groupedByYears = _.groupBy(sortedEvents, event => {
        const yearStart = Math.floor(event.parsedDate.year() / yearsGroup) * yearsGroup;
        // Format the start of the interval as "01/01/YYYY"
        return `01/01/${yearStart}`;
    });

    // Further group by event type within each year group
    return _.mapValues(groupedByYears, eventsByDate => _.groupBy(eventsByDate, 'type'));
}

function calculateLocalStorageSize() {
    let total = 0;
    for (let key in localStorage) {
        if (localStorage.hasOwnProperty(key)) {
            total += (localStorage[key].length + key.length) * 2;  // Each character uses 2 bytes
        }
    }
    console.log('Total localStorage size in KB:', total / 1024);
}

// Function to update family towns via a proxy
export async function updateFamilyTownsViaProxy() {
    var alertElement = document.getElementById('alert');
    var alertContent = document.getElementById('alert-content');

    try {
        // Affichage de l'alerte de début
        alertContent.style.whiteSpace = 'pre-line';
        alertContent.textContent = 'Mise à jour des coordonnées géographiques des communes mentionnées dans votre fichier...\nCela peut prendre une à deux minutes. Veuillez patienter...';
        alertElement.classList.remove('d-none');
        alertElement.classList.add('show');

        // Appel direct de la méthode du store
        await familyTownsStore.updateTownsViaProxy();

        // Affichage de l'alerte de succès
        alertElement.classList.remove('alert-primary');
        alertElement.classList.add('alert-success');
        alertContent.textContent = 'Mise à jour des coordonnées géographiques des communes terminée.';
        setTimeout(() => {
            alertElement.classList.add('d-none');
        }, 1800);

    } catch (error) {
        // Gestion des erreurs
        alertElement.classList.remove('alert-primary');
        alertElement.classList.add('alert-danger');
        alertContent.textContent = `Erreur dans la mise à jour des coordonnées géographiques: ${error.message}`;
        throw error;
    }
}

// Function to update individual towns from family towns
export function updateIndividualTownsFromFamilyTowns(individualsCache) {
    const familyTowns = familyTownsStore.getAllTowns();
    console.log('Family towns:', familyTowns);
    
    individualsCache.forEach((individual) => {
        const individualTownKeys = Object.keys(individual.individualTowns || {});
        if (individualTownKeys.length > 0) {
            individualTownKeys.forEach(townKey => {
                const updatedTownInfo = familyTowns[townKey];
                if (updatedTownInfo) {
                    individual.individualTowns[townKey] = {
                        ...individual.individualTowns[townKey],
                        ...updatedTownInfo
                    };
                }
            });
        }
    });
}

export function downloadJSON(data, filename) {
    // Convertir data en une chaîne JSON
    let dataStr = JSON.stringify(data);

    // Créer un objet Blob à partir de la chaîne JSON
    let dataBlob = new Blob([dataStr], {type: 'application/json'});

    // Créer une URL pour l'objet Blob
    let url = URL.createObjectURL(dataBlob);

    // Créer un élément de lien avec l'URL comme href
    let downloadLink = document.createElement('a');
    downloadLink.href = url;
    downloadLink.download = filename;
    downloadLink.textContent = `Download ${filename}`;

    // Styliser le lien
    downloadLink.style.position = 'absolute';
    downloadLink.style.top = '10px';
    downloadLink.style.left = '10px';
    downloadLink.style.backgroundColor = 'red';
    downloadLink.style.color = 'white';
    downloadLink.style.padding = '10px';

    // Ajouter l'élément de lien au document
    document.body.appendChild(downloadLink);
}

export function padTwoDigits(number) {
    return number.toString().padStart(2, '0');
}

export function mmToPoints(mm) {
    return mm * 72 / 25.4;
}

export function mmToPixels(mm) {
    return Math.round(mm * 96 / 25.4);
}

export function debounce(func, wait, immediate) {
    var timeout;
    return function() {
        var context = this, args = arguments;
        var later = function() {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
}

export function getActionWord(eventType, gender) {
    const eventWords = {
        'BIRT': 'Né',
        'DEAT': 'Décédé',
        'MARR': 'Marié'
    };
    const baseWord = eventWords[eventType] || '';

    // Simplification du traitement du sexe
    if (gender === true || gender === 'M') { // Masculin
        return baseWord;
    } else if (gender === false || gender === 'F') { // Féminin
        return baseWord + 'e';
    } else { // Sexe non spécifié
        return baseWord + '(e)';
    }
}
  
 /**
     * Function to validate email format using a regex.
     * @param {string} email - The email to validate.
     * @returns {boolean} - Returns true if the email is valid, otherwise false.
     */
 export function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

================
File: assets/scripts/geneafan/updateTownsDB.worker.js
================
console.log("updateTownsDB worker loaded and running.");

let db; // Variable to store the database connection

function openDB() {
    return new Promise((resolve, reject) => {
        if (db) {
            resolve(db);
            return;
        }
        const request = indexedDB.open("PlacesDatabase", 1);
        request.onupgradeneeded = event => {
            // Gestion de la mise à jour du schéma ici, si nécessaire
            const db = event.target.result;
            if (!db.objectStoreNames.contains('Places')) {
                db.createObjectStore('Places', { keyPath: 'id' });
            }
        };
        request.onsuccess = event => {
            // console.log('Database opened successfully.'); 
            db = event.target.result; // Store the database connection
            resolve(db);
        };
        request.onerror = event => {
            // console.error('Database error during open:', event.target.errorCode);
            reject(event.target.errorCode);
        };
    });
}

self.addEventListener('message', async event => {
    try {
        // console.log('Worker received message:', event.data); // Log the received message
        if (event.data.action === 'updateIndexedDB') {
            const { updatedFamilyTowns } = event.data;
            await updateIndexedDB(updatedFamilyTowns);
            self.postMessage({result: 'Update successful'});
        }
    } catch (error) {
        // console.error('Error handling message:', error);
        self.postMessage({error: error.toString()});
    }
});

async function updateIndexedDB(updatedFamilyTowns) {
    try {
        const db = await openDB();
        const transaction = db.transaction(["Places"], "readwrite");
        const store = transaction.objectStore("Places");
        for (const [key, updatedTown] of Object.entries(updatedFamilyTowns)) {
            store.put({...updatedTown, id: key});
        }
        return new Promise((resolve, reject) => {
            transaction.oncomplete = () => resolve();
            transaction.onerror = (event) => reject(event.target.error);
        });
    } catch (error) {
        console.error('Error in updateIndexedDB:', error);
        throw error;
    }
}

================
File: assets/scripts/vendor/pdfkitFontRegister.js
================
import fs from 'fs';

/**
 * Function to register binary files in the context.
 * @param {Object} ctx - The context containing the binary files.
 */
function registerBinaryFiles(ctx) {
    ctx.keys().forEach(key => {
        // Extracts "./" from the beginning of the key
        fs.writeFileSync(key.substring(2), ctx(key));
    });
}

/**
 * Function to register AFM fonts in the context.
 * @param {Object} ctx - The context containing the AFM font files.
 */
function registerAFMFonts(ctx) {
    ctx.keys().forEach(key => {
        const match = key.match(/([^/]*\.afm$)/);
        if (match) {
            // AFM files must be stored in the data path
            fs.writeFileSync(`data/${match[0]}`, ctx(key).default);
        }
    });
}

// Individually register Helvetica AFM fonts
registerAFMFonts(require.context('pdfkit/js/data', false, /Helvetica.*\.afm$/));

================
File: assets/scss/pages/_index.scss
================
:root {
  --color-dark: #32273b;
  --color-light: #c8a47e;
  --bg-color-light: #f1f1f1;
  --bg-color-dark: #e0e0e0;
  --map-height: 800px;
  --offcanvas-bg-color: #e0e0e0;
  --offcanvas-padding: 20px;
  --tab-height: 100vh; // Remplacez par la hauteur réelle de tab1
  --tab-header-height: 50px;
  --navdepartementColor: #c8a47e;
  --navTextColor: rgb(144, 144, 150);
  --activeColor: #32273b;
}

// Global styles
html {
  @media (prefers-reduced-motion: no-preference) {
    scroll-behavior: smooth;
  }
}

html,
body {
  background-color: var(--bg-color-light);
  color: var(--color-light);
  font-family: 'Montserrat', sans-serif;
  height: 100vh;
  margin: 0;
  min-width: 600px;
  overflow: hidden;
  padding: 0;
}

a {
  text-decoration: none;
}

header {
  background-color: var(--bg-color-light);
  margin-left: 0;
  margin-right: auto;
}

// Overlay styles
#overlay {
  background-color: rgba(255, 255, 255, 0.5);
  height: 100%;
  left: 0;
  position: fixed;
  top: 0;
  visibility: visible;
  width: 100%;
  z-index: 1;

  &.overlay-hidden {
    opacity: 0;
    transition: visibility 0.2s, opacity 0.2s linear;
    visibility: hidden;
  }
}

// Loading styles
#loading {
  left: 50%;
  position: absolute;
  text-align: center;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: 1000;
}

.custom-spinner {
  width: 3rem;
  height: 3rem;
  color: var(--color-dark);
}

// Alert styles
#alert {
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 1000;
}

// Container styles
.container,
.container-fluid {
  padding-left: var(--bs-gutter-x, .75rem);
  padding-right: var(--bs-gutter-x, .75rem);
}

.container {
  height: 100vh;
  max-width: 100%;
}

// Header styles
header {
  background-color: var(--bg-color-light);
  margin-left: 0;
  margin-right: auto;
}

// Input file container styles
.input-file-container {
  display: inline-block;
  overflow: hidden;
  position: relative;

  input[type="file"] {
    opacity: 0;
    position: absolute;
    right: 0;
    top: 0;
  }
}

// Dropdown submenu styles
.dropdown-submenu {
  position: relative;
}

.dropdown-submenu .dropdown-menu {
  top: 0;
  left: 100%;
  margin-top: -1px;
}

// Tooltip styles
.tooltip-inner {
  background-color: #000;
  border-radius: 4px;
  color: #fff;
  max-width: 200px;
  padding: 3px 8px;
  text-align: center;
}

svg#logo {
  overflow: visible;
}

// Offcanvas styles
.offcanvas-body {
  background-color: var(--color-light);
  max-width: none !important;
  overflow: visible;
  padding: 0 !important;
}

.offcanvas.offcanvas-top {
  height: fit-content !important;
}

// Card styles
.card-body {
  padding: 0;
}

.card-header {
  border-bottom: 0;
  padding: 0.75rem 1.25rem;
}

// Row styles
div.row {
  margin: 0;
}

// Input styles
input#file {
  font-size: calc(10px + 1.8vmin);
  opacity: 0;
  position: absolute;
  right: 0;
  top: 0;
}

// Button styles
.btn {
  background-color: var(--color-dark);
  border-color: var(--color-light);
  color: var(--color-light);

  &:hover {
    background-color: var(--color-light);
    border-color: var(--color-dark);
    color: var(--color-dark);
  }
}

div.file-button {
  overflow: hidden;
  position: relative;
}

.small-button {
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
}


// Tab header styles
#tab-header {
  padding-left: 10px;
  padding-right: 10px;
  border-bottom: 1px solid #ccc; /* Filet léger */
}

// Responsive tab header
.dropdown-content-modifiers {
  max-height: 600px !important;
}

.burger-menu {
  position: relative;
}

.more-btn {
  height: 100%;
  cursor: pointer;
  visibility: hidden;

  svg {
    width: 16px;
    height: 16px;
  }
}

.more-content {
  position: absolute;
  top: 40px;
  display: flex;
  padding: 6px;
  flex-direction: column;
  border-color: var(--color-light);
  border-width: 2px;
  width: 150px;
  background: #fff;
  z-index: 10;
  gap: 8px;
  visibility: hidden;
  border-radius: 4px;

  &>li {
    list-style: none;
    width: 100%;
  }

  & .nav-link {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
}

.left-header {
  display: flex;
  justify-content: space-between;
  width: 100%;
  align-items: center;
  margin-right: 20px;

  &>#tab-container {
    flex: 1;
  }
}

// Tab content styles
.tab-content {
  height: calc(100vh - var(--tab-header-height));
  overflow: hidden;
}


// Tab pane styles
.tab-pane {
  height: 100%;
  display: flex;
  flex-direction: column;
}

// Tab1 (fan) styles
#initial-group {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  pointer-events: none;
  position: absolute;
  text-align: center;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  user-select: none;
  width: 100%;
  z-index: 5;
}

// Assurer que la rangée occupe toute la hauteur
#fanDisplay {
  flex: 1;
  position: relative;
  display: flex;
  min-height: 0; // Important pour flex
  overflow: hidden;
}

#fanContainer {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  background-color: var(--bg-color-dark);
}

// Styles SVG 
svg#fan {
  width: auto;
  height: auto;
  max-width: 100%;
  max-height: 100%;
  display: block;
  
  // Override des dimensions physiques pour l'affichage
  &[width],
  &[height] {
    width: auto !important;
    height: auto !important;
  }
}

#controls {
  position: absolute;
  bottom: 10px;
  right: 10px;
  display: flex;
  gap: 5px;
}

#controls button {
  padding: 5px 10px;
  font-size: 16px;
  cursor: pointer;
}

.parameter-row {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  margin-bottom: 1rem;

  label {
    font-weight: bold;
  }
}

// Tab2 (map) styles
#familyMap {
  height: 100%;
  width: 100%;
  min-height: 400px;
  position: relative;  // Ajouté pour le contexte de positionnement

  @media (min-width: 768px) {
    height: 100vh;
  }
}

.map-controls {
  position: absolute;
  top: 10px;
  left: 10px;
  z-index: 1000;
  background: white;
  padding: 10px;
  border-radius: 4px;
  box-shadow: 0 2px 6px rgba(0,0,0,.3);
}

// Family tree styles (tab #3)
#treeContainer {
  display: flex;
  justify-content: center;
  align-items: center;
  max-height: calc(var(--tab-height) - var(--tab-header-height) - 20px);
  width: 100%;

  overflow: hidden;
  position: relative;
}

.blurred rect,
.blurred image,
.blurred text,
.blurred use {
  filter: blur(5px) grayscale(85%);
}

.selected rect {
  fill: #FFCA28 !important;
}

svg.tommy .node.male>rect {
  fill: #039be5;
}

svg.tommy .node.female>rect {
  fill: #FF46A3;
}

[data-l-id] path {
  stroke: var(--color-dark);
  stroke-width: 3px;
}

.field_0 {
  font-family: 'Montserrat', sans-serif;
  text-transform: uppercase;
  fill: #cfcfcf;
}

.form-check-input {
  margin-left: 0.5rem;
}

// Form styles
.form-check-input {
  margin-left: 0.5rem;
}

.form-select {
  background-image: none;
  border: none;
}

.form-control {
  padding: 0 !important;
}

.form-check {
  display: inline-block;
  margin: 0 10px;
}

// Modal styles
#advancedModal .modal-content,
#emailModal .modal-content,
#confirmationModal .modal-content {
  background-color: var(--bg-color-dark);
}

// Person details offcanvas
#personDetails .offcanvas-body {
  background-color: var(--bg-color-dark);
  color: var(--color-dark);
  padding: 20px;
}

// Individual map offcanvas
#individualMapContainer {
  max-width: none;
  width: 50%;

  @media (max-width: 768px) {
    width: 100%;
  }
}

#advanced-parameters {
  right: 10px;
  top: 200px;
}

.box {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  background-color: var(--bg-color-dark);
}

.node {
  stroke: #fff;
  stroke-width: 1.5px;
}

.link {
  stroke: #999;
  stroke-opacity: 0.6;
}

.label {
  font: 10px sans-serif;
}

.event-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.event-header h6 {
  margin: 0;
}

// Gedcom Modal
.error-container {
  margin-top: 10px;
}

.duplicate-email-error {
  color: red;
  font-size: 0.9em;
  display: none; /* Sera modifié en 'block' lorsque des doublons sont détectés */
}

.confirmation-container {
  margin-top: 20px;
}

.confirmation-container ul {
  list-style-type: disc;
  margin-left: 20px;
}

.confirmation-container button {
  margin-top: 10px;
}

.alert {
  padding: 10px;
  margin-top: 20px;
}

// Statistics styles
.tab-pane.statistics-container {
  overflow-y: auto;
  height: 100%;
  padding-bottom: 2rem;
  scroll-padding-top: var(--header-height, 160px); // Valeur de sécurité par défaut
}

// Sticky header avec overview
.sticky-overview {
  position: sticky;
  top: 0;
  z-index: 1020;
  background-color: rgba(255, 255, 255, 0.95);
  border-bottom: 1px solid #dee2e6;
  box-shadow: 0 2px 4px rgba(0,0,0,.05);
  padding: 1rem 0;
}


// Zone de contenu
.statistics-content {
  padding: 1rem 0;
  
  // Sections
  .section-title {
    padding: 1rem 0; // Augmenté pour plus d'espace
    margin-bottom: 1.5rem;
    border-bottom: 2px solid #f0f0f0;
    color: #495057;
  }
  
  // Cards
  .card {
    border: none;
    box-shadow: 0 0 10px rgba(0,0,0,.05);
    transition: transform 0.2s ease-in-out;
    margin-bottom: 1.5rem;
    
    &:hover {
      transform: translateY(-2px);
    }
  }
  
  .chart-container {
    min-height: 300px;
    position: relative;
  }
}

// Navigation pills
.nav-pills {
  .nav-link {
    color: #495057;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    margin: 0 2px;
    
    &:hover {
      background-color: #e9ecef;
    }
    
    &.active {
      background-color: #0d6efd;
      color: white;
    }
  }
}

// Responsive
@media (max-width: 768px) {
  .nav-pills {
    flex-wrap: nowrap;
    overflow-x: auto;
    padding-bottom: 5px;
    
    .nav-link {
      white-space: nowrap;
    }
  }
}

================
File: assets/scss/pages/horizontal-timeline.scss
================
/* -------------------------------- 
 
Horizontal Timeline 2.0
by Studocwho @ yCodeTech

Version: 2.0.5.2
	
Original Horizontal Timeline by CodyHouse

Licensed under the MIT license	
	
Docs at http://horizontal-timeline.ycodetech.co.uk

-------------------------------- */

.horizontal-timeline {
	opacity: 0;
	width: 100%;
	margin: 2em auto;
	-webkit-transition: opacity 0.2s;
	-moz-transition: opacity 0.2s;
	transition: opacity 0.2s;
}
.horizontal-timeline ol {
	margin: 0;
	padding: 0;
	width: 100%;
}
/* Never visible - this is used in jQuery to check the current MQ */
.horizontal-timeline::before {
	content: 'desktop';
	display: none;
}
.horizontal-timeline.loaded {
	opacity: 1;
	margin: 0 !important;
}
.horizontal-timeline .touch-enabled {
	cursor: grab;
}
/* Timeline */
.horizontal-timeline .timeline {
	position: relative;
	height: auto;
	margin: 0 auto;
	display: flex;
	-ms-flex-wrap: wrap;
    	flex-wrap: wrap;
}
.horizontal-timeline .events-wrapper {
	position: relative;
	/* Fixed up a bug where if the date display was split into two lines 
	half of the top was cut off (Changed the height to accommodate) */
	height: 80px;
	overflow: hidden;
	-ms-flex: 1 1 auto!important;
    	flex: 1 1 auto!important;
}
.horizontal-timeline .events {
	position: absolute;
	z-index: 1;
	left: 0;
	bottom: 13%;
	height: 5px;
	/* width will be set using JavaScript */
	background: var(--color-dark);
	-webkit-transition: -webkit-transform 0.4s;
	-moz-transition: -moz-transform 0.4s;
	transition: transform 0.4s;
}
/* Filling line */
.horizontal-timeline .filling-line {
	position: absolute;
	z-index: 1;
	left: 0;
	top: 0;
	height: 100%;
	width: 100%;
	background-color: var(--color-light);
	-webkit-transform: scaleX(0);
	-moz-transform: scaleX(0);
	-ms-transform: scaleX(0);
	-o-transform: scaleX(0);
	transform: scaleX(0);
	-webkit-transform-origin: left center;
	-moz-transform-origin: left center;
	-ms-transform-origin: left center;
	-o-transform-origin: left center;
	transform-origin: left center;
	-webkit-transition: -webkit-transform 0.3s;
	-moz-transition: -moz-transform 0.3s;
	transition: transform 0.3s;
}
/* Event dates on the timeline */
.horizontal-timeline .events a {
	position: absolute;
	bottom: 0;
	z-index: 2;
	text-align: center;
	text-decoration: none;
	padding-bottom: 15px;
	color: var(--color-dark);
	/* Fix bug on Safari - text flickering while timeline translates */
	-webkit-transform: translateZ(0);
	-moz-transform: translateZ(0);
	-ms-transform: translateZ(0);
	-o-transform: translateZ(0);
	transform: translateZ(0);
	user-select: none;
}
/* Dots for the event dates on the timeline */
.horizontal-timeline .events a::after {
	content: '';
	position: absolute;
	left: 40%;
	bottom: -3px;
	height: 12px;
	width: 12px;
	border-radius: 50%;
	background-color:var(--color-dark);
	-webkit-transition: background-color 0.3s, border-color 0.3s;
	-moz-transition: background-color 0.3s, border-color 0.3s;
	transition: background-color 0.3s, border-color 0.3s;
}
/* Stop mouse pointer events on a selected event */
.horizontal-timeline .events a.selected {
	pointer-events: none;
}
.horizontal-timeline .events a.selected::after, 
.horizontal-timeline .events a.older-event::after {
	background-color: var(--color-light);
}
.horizontal-timeline .events a:hover {
	text-decoration: underline;
}
/* Navigation */
.timeline-navigation {
	position: relative;
	top: 3px;
	-webkit-transform: translateY(50%);
	-moz-transform: translateY(50%);
	-ms-transform: translateY(50%);
	-o-transform: translateY(50%);
	transform: translateY(50%);
	z-index: 2;
}
.timeline-navigation#leftNav {
    	left: 1px;
}
.timeline-navigation#rightNav {
	right: 1px;
}
.timeline-navigation a {
	display: inline;
    	text-decoration: none;
    	color: var(--color-dark);
}
.timeline-navigation a:hover {
	color: var(--color-light);
	border-color: var(--color-light);
}

/* Inactive */
.timeline-navigation a.inactive {
	cursor: not-allowed;
	border-color: #d3d3d3;
	color: #d3d3d3;
}
/* Autoplay Pause/Play button */
.timeline-navigation#pausePlay {
	width: 100%;
    	top: -10px;
    	text-align: center;
}
/* Event content */
.horizontal-timeline .events-content {
    position: relative;
    margin: 2em 0;
    margin-left: auto;
    margin-right: auto;
    -webkit-transition: height 0.4s 0.2s;
    -moz-transition: height 0.4s 0.2s;
    transition: height 0.4s 0.2s;
    max-height: 70vh; /* FB */
    overflow-y: auto; /* FB */
}

/* Autoplay progress bar */
.horizontal-timeline .events-content .progressBarWrapper {
	position: absolute;
	width: 100%;
	height: 4px;
	margin-top: -4px;
	padding: 0 20px;
}
.horizontal-timeline .events-content .progressBar {
  	width: 0%;
  	max-width: 100%;
  	height: inherit;
  	background: var(--color-light);
}
.horizontal-timeline .events-content li[data-horizontal-timeline],
/* data-date deprecated as of v2.0.5.alpha.3 */
.horizontal-timeline .events-content li[data-date] {
	position: absolute;
	width: 100%;
	left: 0;
	top: 0;
	margin: auto;
	padding: 15px;
	background-color: var(--bg-color-light);
	border-radius: 20px;
	opacity: 0;
	
	// font-size: 16pt;
	// text-align: left;
	color: var(--color-dark); /* FB */
	
	-webkit-touch-callout: none; /* iOS Safari */
	-webkit-user-select: none; /* Safari */
	-khtml-user-select: none; /* Konqueror HTML */
	-moz-user-select: none; /* Firefox */
	-ms-user-select: none; /* Internet Explorer/Edge */
	user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */
	
	-webkit-transition: opacity 1s;
	-moz-transition: opacity 1s;
	transition: opacity 1s;
}
/* The selected events content */
.horizontal-timeline .events-content li[data-horizontal-timeline].selected,
/* data-date deprecated as of v2.0.5.alpha.3 */
.horizontal-timeline .events-content li[data-date].selected {
	position: relative;
	z-index: 2;
	opacity: 1;
}
/* Event content animations */
.horizontal-timeline .events-content li.enter-right, 
.horizontal-timeline .events-content li.exit-right {
	-webkit-animation-name: timeline-enter-right;
	-moz-animation-name: timeline-enter-right;
	animation-name: timeline-enter-right;
}
.horizontal-timeline .events-content li.enter-left, 
.horizontal-timeline .events-content li.exit-left {
	-webkit-animation-name: timeline-enter-left;
	-moz-animation-name: timeline-enter-left;
	animation-name: timeline-enter-left;
}
.horizontal-timeline .events-content li.exit-right, 
.horizontal-timeline .events-content li.exit-left {
	-webkit-animation-direction: reverse;
	-moz-animation-direction: reverse;
	animation-direction: reverse;
}
/* Speed */
.horizontal-timeline .events-content li.animationSpeed {
	-webkit-animation-duration: 0.4s;
	-moz-animation-duration: 0.4s;
	animation-duration: 0.4s;
}
@-webkit-keyframes timeline-enter-right {
	0% {
		 opacity: 0;
		 -webkit-transform: translateX(100%);
	}
	100% {
		opacity: 1;
		-webkit-transform: translateX(0%);
	}
}
@-moz-keyframes timeline-enter-right {
	0% {
		 opacity: 0;
		 -moz-transform: translateX(100%);
	}
	100% {
		 opacity: 1;
		 -moz-transform: translateX(0%);
	}
}
@keyframes timeline-enter-right {
	0% {
		 opacity: 0;
		 -webkit-transform: translateX(100%);
		 -moz-transform: translateX(100%);
		 -ms-transform: translateX(100%);
		 -o-transform: translateX(100%);
		 transform: translateX(100%);
	}
	100% {
		 opacity: 1;
		 -webkit-transform: translateX(0%);
		 -moz-transform: translateX(0%);
		 -ms-transform: translateX(0%);
		 -o-transform: translateX(0%);
		 transform: translateX(0%);
	}
}
@-webkit-keyframes timeline-enter-left {
	0% {
		 opacity: 0;
		 -webkit-transform: translateX(-100%);
	}
	100% {
		 opacity: 1;
		 -webkit-transform: translateX(0%);
	}
}
@-moz-keyframes timeline-enter-left {
	0% {
		 opacity: 0;
		 -moz-transform: translateX(-100%);
	}
	100% {
		 opacity: 1;
		 -moz-transform: translateX(0%);
	}
}
@keyframes timeline-enter-left {
	0% {
		 opacity: 0;
		 -webkit-transform: translateX(-100%);
		 -moz-transform: translateX(-100%);
		 -ms-transform: translateX(-100%);
		 -o-transform: translateX(-100%);
		 transform: translateX(-100%);
	}
	100% {
		 opacity: 1;
		 -webkit-transform: translateX(0%);
		 -moz-transform: translateX(0%);
		 -ms-transform: translateX(0%);
		 -o-transform: translateX(0%);
		 transform: translateX(0%);
	}
}
@media only screen and (min-width: 1100px) {
	.horizontal-timeline {
		margin: 6em auto;
	}
}
@media only screen and (min-width: 501px) and (max-width: 1100px) {
	/* Never visible - this is used in jQuery to check the current MQ */
	.horizontal-timeline::before {
		content: 'tablet';
	}
}
@media only screen and (max-width: 500px) {
	/* Never visible - this is used in jQuery to check the current MQ */
	.horizontal-timeline::before {
		content: 'mobile';
	}
}
@media only screen and (max-width: 1100px) {
	.horizontal-timeline .timeline {
		padding-bottom: 40px !important;
	}
	.timeline-navigation#leftNav {
		-ms-flex-direction: column-reverse !important;
		flex-direction: column-reverse !important;
	}
	.timeline-navigation#rightNav {
		-ms-flex-direction: column !important;
    	flex-direction: column !important;
	}
	.timeline-navigation#leftNav,
	.timeline-navigation#rightNav {
		display: -ms-flexbox !important;
		display: flex !important;
		top: -5px !important;
	}
	.timeline-navigation#pausePlay {
		top: 20px !important;
	}
}

================
File: assets/scss/vendors/_bootstrap.scss
================
// Required
@import "~bootstrap/scss/variables";
@import "~bootstrap/scss/mixins";
@import '~bootstrap/scss/maps';

// Optional
@import "~bootstrap/scss/root";
@import "~bootstrap/scss/reboot";
@import "~bootstrap/scss/type";
@import "~bootstrap/scss/images";
@import "~bootstrap/scss/grid";
@import "~bootstrap/scss/tables";
@import "~bootstrap/scss/forms";
@import "~bootstrap/scss/buttons";
@import "~bootstrap/scss/transitions";
@import "~bootstrap/scss/dropdown";
@import "~bootstrap/scss/button-group";
@import "~bootstrap/scss/nav";
@import "~bootstrap/scss/navbar";

@import "~bootstrap/scss/breadcrumb";
@import "~bootstrap/scss/pagination";
@import "~bootstrap/scss/badge";
@import "~bootstrap/scss/alert";
@import "~bootstrap/scss/progress";
@import "~bootstrap/scss/list-group";
@import "~bootstrap/scss/close";
@import "~bootstrap/scss/toasts";
@import "~bootstrap/scss/modal";
@import "~bootstrap/scss/tooltip";
@import "~bootstrap/scss/popover";
@import "~bootstrap/scss/carousel";
@import "~bootstrap/scss/spinners";
@import "~bootstrap/scss/utilities";
@import "~bootstrap/scss/utilities/api";
@import "~bootstrap/scss/maps";
@import "~bootstrap/scss/card";

================
File: assets/scss/main.scss
================
$white: #ffffff;

$theme-colors: (
    "light":      #efebe5,
    "dark":       #df4d40,
    "primary":    #1a4f71,
    "secondary":  #3f799c,
    "info":       #4da8c2,
    "accent1":    #a51e08,
    "accent2":    #66d2cf,
    "accent3":    #93bdbe,
    "success":    #0cb261,
    "warning":    #e9ce0a,
    "danger":     #fb040a,
);

// Import Bootstrap functions
@import "~bootstrap/scss/functions";

// Import Bootstrap and other vendor styles
@import "./vendors/bootstrap";

// Import custom styles
@import "./pages/index";
@import "./pages/horizontal-timeline";

// Import Bootstrap components as needed
@import "node_modules/bootstrap/scss/offcanvas";

// Import font
@font-face {
  font-family: 'Montserrat';
  font-style: normal;
  font-weight: normal;
  src: url("https://static1.squarespace.com/static/61d847565e8825750f6808c1/t/64230b452dfc586bc97d2d87/1680018245260/montserrat-v25-latin-regular.woff2") format("woff2");
  font-display: swap;
  }

================
File: assets/geneafan.js
================
// Import new initialization system
import { initializeApplication } from './scripts/geneafan/core/app.js';

// Styles
import './scss/main.scss'

// Assets contexts
require.context('./other', true);
require.context('./images/icons', true);
require.context('./images', true);

// Initialize with new system, fallback to old if needed
document.addEventListener("DOMContentLoaded", async () => {
    console.log("Application initialization starting...");
    
    try {
        // Try new initialization system
        await initializeApplication();
        console.log("Application initialized successfully with new system");
    } catch (error) {
        console.error("Error with new initialization system, falling back to old system:", error);
    }
});

================
File: locales/en.json
================
{
  "common": {
    "is_plural": "function(c){return c !== 1;}",
    "new": "New",
    "loading_ellipsis": "Loading...",
    "please_wait": "Please wait a few seconds.",
    "other_services": "Other apps",
    "beta_capital": "BETA",
    "help": "Help",
    "close": "Close",
    "export": "Export",
    "print_ellipsis": "Print...",
    "download": "Download",
    "none": "None",
    "contact": "Contact",
    "news": "News",
    "show_more_ellipsis": "Show more...",
    "and": "and",
    "or": "or",
    "no_result": "No result",
    "previous": "Previous",
    "next": "Next",
    "to": "to",
    "language": "Language"
  },

  "home": {
    "title": "Free genealogical tools and services",
    "arbreomatic": {
      "image_alt": "Arbre-o-matic cover",
      "title": "Geneafan",
      "description": "Tool to design genealogical fans."
    },
    "insee": {
      "image_alt": "INSEE cover",
      "title": "French register of deceased persons",
      "description": "Search among all the persons of French nationality who died after 1970."
    }
  },

  "geneafan": {
    "title": "Geneafan",
    "description": "Genealogical fan geneator",
    "view_fan_chart": "Fan View",
    "view_family_map": "Map View",
    "view_family_tree": "Tree View",
    "view_ascendant_timeline": "Timeline",
    "gedcom_file": "Your Gedcom file",
    "privacy": "No data is sent to the server: everything takes place in your web browser",
    "special_characters": {
      "title": "Some characters do not display correctly ?",
      "text": "When exporting your data from the software of platform, please check that the Gedcom file encoding is set to <strong>UTF-8</strong>. This tool <em>does not support</em> extended ASCII."
    },
    "load_gedcom": "GEDCOM",
    "your_gedcom_file": "Your Gedcom file",
    "or_try_sample": "Our Gedcom sample file",
    "sample_files": "Gedcom samples",
    "formats": "Available format: PDF",
    "choose_sample_below": "If you do not own a Gedcom file or simply want to test the service you may load an existing one from the list below:",
    "sample_files_list": {
      "american_presidents": "American Presidents family",
      "royal92": "European Royal family (Royal92)",
      "shakespeare": "Shakespeare family",
      "bach": "Bach family"
    },
    "great_thanks_to": "Sincere thanks to",
    "root": "Root",
    "choose_root": "Select the root individual",
    "choose_root_placeholder": "Select a person...",
    "print_or_download": "Print or download your family tree in the desired format",
    "vector_formats": "Vector formats",
    "raster_formats": "Raster format",
    "file_type_list": {
      "pdf_watermark": "PDF with watermark (immediate download)",
      "pdf": "PDF",
      "svg": "SVG",
      "png_transparent": "Transparent PNG",
      "png_white_background": "PNG (white background)"
    },
    "click_to_load_ellipsis": "Click to load a Gedcom file...",
    "or_drag_and_drop": "or drag and drop a file",
    "zoom_in": "Zoom in",
    "zoom_out": "Zoom out",
    "zoom_reset": "Center",
    "full_screen_toggle":"Full Screen",
    "use_mouse": "Use the mouse to browse the preview",
    "informations": "Informations",
    "generation_count": "Generation count:",
    "dates_format": "Dates format :",
    "date_yyyy": "YYYY",
    "date_ddmmyyyy": "DD/MM/YYYY",
    "display_invalid_dates": "Display invalid dates anyway",
    "places_format": "Places format:",
    "places_format_list": {
      "full": "Display the entire place",
      "city_only": "Only display the town",
      "nothing": "Don't show places"
    },
    "display_marriages": "Marriages",
    "names_order": "Names order:",
    "names_order_list": {
      "given_surname": "Given name(s) then surname(s)",
      "surname_given": "Surname(s) then given name(s)"
    },
    "names_to_display": "Given names to display:",
    "names_to_display_list": {
      "all": "All",
      "first": "First one only"
    },
    "substitute_missing_events": "Substitute missing events",
    "substitute_missing_events_hint": "Use the baptism when the birth is not specified",
    "recent_people": "Contemporary people",
    "informations_to_hide": "Informations to hide:",
    "informations_to_hide_list": {
      "none": "None",
      "events": "Event only",
      "all_but": "Everything besides the root individual name",
      "all": "Everything without any exceptions"
    },
    "affected_generations": "Affected generations:",
    "format": "Format",
    "display_empty_boxes": "Empty Boxes",
    "fan_angle": "Fan angle:",
    "choose_an_angle": "Choose a value.",
    "chronology": "Chronology",
    "adapt_text_layout": "Dynamic Text Orientation",
    "annotations": "Annotations",
    "primary_title": "Primary title (optional):",
    "measurements": "Measurements",
    "title_title": "Title",
    "title_size": "Title's size:",
    "title_margin": "Title's margin:",
    "strokes": "Strokes",
    "stroke_weight": "Strokes weight:",
    "box_sizes": "Box sizes",
    "box_sizes_list": {
      "generation_1": "Generation 1:",
      "generation_2_4": "Generations 2 to 4:",
      "generation_5_8": "Generations 5 to 8:",
      "generation_9_plus": "Generation 9 and beyond:"
    },
    "raster_size": "Size of the raster file",
    "width_pixels": "Width (pixels):",
    "colors": "Colors",
    "individual_box": "Individual box:",
    "marriage_box": "Marriage box:",
    "automatic_text_contrast": "Automatic text contrast",
    "dynamic_coloring": "Dynamic coloring:",
    "dynamic_coloring_list": {
      "disabled": "Disabled",
      "gender": "Gender",
      "generation": "Generation",
      "age_at_death": "Age at death",
      "age_at_marriage": "Age at marriage",
      "birth_date": "Birth date",
      "birth_town": "Birth town",
      "birth_departement": "Birth state",
      "surname": "Surname",
      "can_sign": "Can sign",
      "occupation": "Occupation",
      "children_count": "Children count"
    },
    "color_list": {
      "color_1": "Color 1:",
      "color_2": "Color 2:"
    },
    "min_value": "Minimum value:",
    "max_value": "Maximum value:",
    "automatic_palette": "Automatic color palette",
    "random_assignment": "Random color assignment",
    "color_saturation": "Saturation",
    "color_value": "Value",
    "custom_palette": "Custom color palette (soon)",

    "newsletter": "Newsletter",
    "get_informed": "Get informed of the new features:",
    "email_address": "E-mail address",
    "example_email": "address@example.com",
    "subscribe": "Subscribe",
    "for_any_suggestion": "If you have any question, suggestion or bug report:",
    "a_contact_form_is_available": "a contact form is available here",
    "feedback_is_appreciated": "Your feedback is greatly appreciated!",

    "done_by": "Designed and hosted by",
    "inspired_by": "Model inspired by",
    "diagram_made_with": "Diagram made with",
    "printing_with": "; printing with",
    "interface_with": "; user-interface with",
    "to_be_used_with": "To be used with a modern web browser",
    "source_code_on": "Source code on GitHub",
    "an_error_occurred": "An error occurred",
    "your_browser_is_incompatible": "Sadly your browser is not compatible.",

    "cannot_read_this_file": "Couldn't interpret this file",
    "no_individual_selected": "No individual selected",
    "genealogy": "Genealogy",
    "genealogical_fan": "Genealogical fan",
    "discover_fan": "Click here to discover the genealogical fan",
    "tooltip_full_screen": "Full screen",
    "tooltip_fan_parameters": "Display fan parameters"
  }
}

================
File: locales/fr.json
================
{
    "common": {
        "is_plural": "function(c){return c > 1;}",
        "new": "Nouveau",
        "loading_ellipsis": "Chargement...",
        "please_wait": "Merci de patienter quelques instants.",
        "other_services": "Autres services",
        "beta_capital": "BÊTA",
        "help": "Aide",
        "close": "Fermer",
        "export": "3. Téléchargez votre éventail",
        "print_ellipsis": "Imprimer...",
        "download": "Export PDF",
        "none": "Aucun",
        "contact": "Contact",
        "news": "Nouveautés",
        "show_more_ellipsis": "Afficher plus...",
        "and": "et",
        "or": "ou",
        "no_result": "Aucun résultat",
        "previous": "Précédent",
        "next": "Suivant",
        "to": "à",
        "language": "Langue"
    },

    "home": {
        "title": "Outils et services généalogiques gratuits",
        "arbreomatic": {
            "image_alt": "Couverture Arbre-o-matic",
            "title": "<em>Genealogies</em>",
            "description": "Générateur d'éventail généalogique."
        },
        "insee": {
            "image_alt": "Couverture INSEE",
            "title": "Fichier des décès de l'INSEE",
            "description": "Recherchez dans la base des décès survenus depuis 1970."
        }
    },

    "geneafan": {
        "title": "Genealogies",
        "description": "Générateur d'éventail généalogique",
        "view_fan_chart": "Ascendance",
        "view_family_map": "Lieux",
        "view_family_tree": "Arbre",
        "view_ascendant_timeline": "Chronologie",
        "view_statistics": "Statistiques",
        "gedcom_file": "1. Chargez votre fichier GEDCOM",
        "privacy": "Vos données sont protégées&#8239;: tout se passe dans&#8239;votre&#8239;navigateur !",
        "special_characters": {
            "title": "Certains caractères ne s'affichent pas correctement ?",
            "text": "Vérifier lors de l'exportation depuis votre logiciel ou plateforme que l'encodage du fichier Gedcom est bien paramétré sur <strong>UTF-8</strong>. Cet outil <em>ne supporte pas</em> l'ASCII étendu."
        },
        "load_gedcom": "GEDCOM",
        "your_gedcom_file": "Charger un fichier Gedcom",
        "or_try_sample": "Utiliser le fichier Gedcom de test",
        "sample_files": "Fichiers Gedcom échantillon",
        "choose_sample_below": "Si vous ne possédez pas de fichier Gedcom ou bien que vous souhaitez tester le service, il est possible d'en charger un parmi la liste suivante&#8239;:",
        "sample_files_list": {
            "american_presidents": "Famille des présidents américains",
            "royal92": "Familles royales européennes (Royal92)",
            "shakespeare": "Famille Shakespeare",
            "bach": "Famille Bach"
        },
        "great_thanks_to": "Un grand merci à",
        "root": "2. Personnalisez votre éventail",
        "choose_root": "Sélectionnez la personne au centre de l'éventail",
        "choose_root_placeholder": "Sélectionnez une personne...",
        "formats": "Format disponible : PDF",
        "print_or_download": "Possibilité d'imprimer votre arbre ou d'en télécharger une copie dans le format souhaité",
        "vector_formats": "Formats vectoriels",
        "raster_formats": "Formats matriciels",
        "file_type_list": {
            "pdf_watermark": "PDF avec filigrane (téléchargement immédiat)",
            "pdf": "PDF sans filigrane (envoi par courriel en 5')",
            "svg": "Image SVG",
            "png_transparent": "PNG transparent",
            "png_white_background": "PNG avec fond blanc"
        },
        "click_to_load_ellipsis": "Cliquez ici pour charger votre fichier Gedcom.<BR>Vous pouvez aussi glisser-déposer le fichier.",
        "or_drag_and_drop": "Si vous préférez utiliser notre fichier de test, cliquez sur le menu <em>Import GEDCOM</em> ci-dessus.",
        "zoom_in": "Agrandir",
        "zoom_out": "Diminuer",
        "zoom_reset": "Recentrer",
        "full_screen_toggle": "Plein Écran",
        "use_mouse": "Pour déplacer l'éventail : déplacer la souris tout en maintenant un clic gauche",
        "informations": "Informations",
        "generation_count": "Générations&#8239;:&#8239;",
        "dates_format": "Format des dates&#8239;:",
        "date_yyyy": "AAAA",
        "date_ddmmyyyy": "JJ/MM/AAAA",
        "display_invalid_dates": "Afficher les dates invalides",
        "places_format": "Format des lieux&#8239;:",
        "places_format_list": {
            "full": "Afficher le lieu complet",
            "city_only": "Afficher la ville uniquement",
            "nothing": "Ne pas afficher les lieux"
        },
        "display_marriages": "Mariages&#8239;:&#8239;",
        "names_order": "Ordre des noms&#8239;:",
        "names_order_list": {
            "given_surname": "Prénom(s) puis patronyme(s)",
            "surname_given": "Patronyme(s) puis prénom(s)"
        },
        "names_to_display": "Prénoms à afficher&#8239;:",
        "names_to_display_list": {
            "all": "Tous",
            "first": "Premier seulement"
        },
        "substitute_missing_events": "Substituer les événements manquants",
        "substitute_missing_events_hint": "Utiliser le baptême lorsque la naissance n'est pas spécifiée",
        "recent_people": "Contemporains",
        "informations_to_hide": "Informations à masquer&#8239;:",
        "informations_to_hide_list": {
            "none": "Aucune",
            "events": "Événements seulement",
            "all_but": "Toutes sauf le nom de l'individu central",
            "all": "Toutes sans exception"
        },
        "affected_generations": "Générations concernées&#8239;:",
        "format": "Format",
        "display_empty_boxes": "Cases vides&#8239;:&#8239;",
        "fan_angle": "Ouverture&#8239;:&#8239;",
        "choose_an_angle": "Choisissez une valeur.",
        "chronology": "Chronologie",
        "adapt_text_layout": "Orientation auto des textes&#8239;:&#8239",
        "annotations": "Annotations",
        "primary_title": "Titre principal (facultatif)&#8239;:",
        "measurements": "Mesures",
        "title_title": "Titre",
        "title_size": "Taille du titre&#8239;:",
        "title_margin": "Espacement du titre&#8239;:",
        "strokes": "Tracés",
        "stroke_weight": "Épaisseur des traits&#8239;:",
        "box_sizes": "Taille des cases",
        "box_sizes_list": {
            "generation_1": "Génération 1&#8239;:",
            "generation_2_4": "Générations 2 à 4&#8239;:",
            "generation_5_8": "Générations 5 à 8&#8239;:",
            "generation_9_plus": "Génération 9 et au-delà&#8239;:"
        },
        "raster_size": "Taille du fichier matriciel",
        "width_pixels": "Largeur (pixels)&#8239;:",
        "colors": "Couleurs",
        "individual_box": "Case individu&#8239;:",
        "marriage_box": "Case mariage&#8239;:",
        "automatic_text_contrast": "Contraste automatique du texte",
        "dynamic_coloring": "Coloriage dynamique&#8239;:",
        "dynamic_coloring_list": {
            "disabled": "Désactivé",
            "gender": "Sexe",
            "generation": "Génération",
            "age_at_death": "Âge au décès",
            "age_at_marriage": "Âge au mariage",
            "birth_date": "Date de naissance",
            "birth_town": "Ville de naissance",
            "birth_departement": "Département de naissance",
            "surname": "Patronyme",
            "can_sign": "Sait signer",
            "occupation": "Profession",
            "children_count": "Nombre d'enfants"
        },
        "color_list": {
            "color_1": "Couleur 1&#8239;:",
            "color_2": "Couleur 2&#8239;:"
        },
        "min_value": "Valeur minimale&#8239;:",
        "max_value": "Valeur maximale&#8239;:",
        "automatic_palette": "Palette automatique",
        "random_assignment": "Attribution aléatoire",
        "color_saturation": "Saturation",
        "color_value": "Lumière",
        "custom_palette": "Palette personnalisée (à venir)",

        "newsletter": "Lettre d'information",
        "get_informed": "Restez informé des dernières nouveautés&#8239;:",
        "email_address": "Courriel",
        "example_email": "adresse@exemple.fr",
        "subscribe": "S'abonner",
        "for_any_suggestion": "Pour toute suggestion de fonctionnalité, rapport de bug, ou autre&#8239;:",
        "a_contact_form_is_available": "un formulaire de contact se trouve ici",
        "feedback_is_appreciated": "Vos retours sont très appréciés !",

        "done_by": "Réalisé et hébergé par",
        "inspired_by": "Modèle inspiré de",
        "diagram_made_with": "Diagramme conçu avec",
        "printing_with": " ; impression avec",
        "interface_with": " ; interface avec",
        "to_be_used_with": "À utiliser avec un navigateur moderne",
        "source_code_on": "Code source sur GitHub",
        "an_error_occurred": "Une erreur est survenue",
        "your_browser_is_incompatible": "Votre navigateur n'est malheureusement pas compatible.",

        "cannot_read_this_file": "Impossible d'interpréter ce fichier",
        "no_individual_selected": "Aucune personne sélectionnée",
        "genealogy": "Généalogie",
        "genealogical_fan": "Éventail généalogique",
        "discover_fan": "Cliquez ici pour découvrir l'éventail généalogique",
        "tooltip_full_screen": "Plein écran",
        "tooltip_fan_parameters": "Affichez les paramètres de l'éventail"
    }
}

================
File: .env.development
================
# .env.development
CLERK_PUBLISHABLE_KEY=pk_test_ZHluYW1pYy1tb2xseS01MC5jbGVyay5hY2NvdW50cy5kZXYk

================
File: .env.production
================
# .env.production
CLERK_PUBLISHABLE_KEY=pk_live_Y2xlcmsuZ2VuZWFsb2dpZS5hcHAk

================
File: .gitignore
================
node_modules
dist

================
File: babel.config.js
================
module.exports = {
    presets: [
      ['@babel/preset-env', { targets: "defaults" }]
    ],
    plugins: ['lodash'] // Add the lodash plugin here
  };

================
File: geneafanCert.crt
================
-----BEGIN CERTIFICATE-----
MIIDtTCCAp2gAwIBAgIUeRadpzYoknNGhKaEltSecFbirqcwDQYJKoZIhvcNAQEL
BQAwajELMAkGA1UEBhMCRlIxDDAKBgNVBAgMA0lERjEOMAwGA1UEBwwFUEFSSVMx
DDAKBgNVBAoMA0tPVDEOMAwGA1UEAwwFQlJBQ1ExHzAdBgkqhkiG9w0BCQEWEGZi
cmFjcUBrb3RzYXMuZnIwHhcNMjQwNjIyMjEzNzUzWhcNMjUwNjIyMjEzNzUzWjBq
MQswCQYDVQQGEwJGUjEMMAoGA1UECAwDSURGMQ4wDAYDVQQHDAVQQVJJUzEMMAoG
A1UECgwDS09UMQ4wDAYDVQQDDAVCUkFDUTEfMB0GCSqGSIb3DQEJARYQZmJyYWNx
QGtvdHNhcy5mcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALsQAWW6
VzwsKv/PYn2dLiVMEMN3tGXSAisRRrKqKnXzso/1bmxH7PrJhUylS/wfS0wXiWfV
MtOTv/nSVBIfXf1Iorzw/G16uLy3v0HCzit1tmgXgQJavd7C7unz3jDEDzLRZsfW
IRg59adVr42zffqXeqk5WpU2HU1Qw4X+b47aaB7Y/+/OjJyYzPisAhO1SoAmpi0Q
mjh5w8uUt3lBQCDFWSkVrxC3J0Pp5Cs7EXFoJh/+MeUZ7Y3d3+oCY02q4+WfoD7F
vCem3MyiTu1laINliTXgojMjlgoxKnDLhe0fKbRh1DwfYVrIyxSiGQsYP9NYJVX2
9ojtrU3JcPcLZWcCAwEAAaNTMFEwHQYDVR0OBBYEFDyXs7lZeou9ezl/8UPIdZci
LhMFMB8GA1UdIwQYMBaAFDyXs7lZeou9ezl/8UPIdZciLhMFMA8GA1UdEwEB/wQF
MAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFBQFrTUDuIDGhxvzuZ67f6z0eHuptqc
RB2R6uH5uwvl5+foJMs/9KwWFSkt/TN6rci4Wxdm8widHLzl6gLASbTryvZ5piDO
LEZjRmHO/u8lQnwDfQeD6xEczxf5B2F5pP63hCxoGl6jU33eW82GOmWT05gTVQ3c
AI2emy1THSYXGFTqYhHjk0CHgXNVITWur60IP1ASnpfW0URtLvol8bENZkpJ+pKv
/uCMZ9X5vO3FPA4VPiJYsFCWs6aKPkHBPVv5WiE6u44AQ6m/3nosjxvfay373lyb
lWQV7LNkD3FKalrqJAfl0xhCHLe0et6p1XvMHzO2NGCQXUJwpJ8toDk=
-----END CERTIFICATE-----

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Genalog.ie / Frank Bracq - https://genealog.ie

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
  "name": "geneafan",
  "version": "0.2.0",
  "description": "Genealogical fan generator",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/FlorianCassayre/Arbre-o-matic.git"
  },
  "keywords": [
    "gedcom",
    "genealogy",
    "visualization"
  ],
  "author": "Frank Bracq, based on work by F.Cassayre",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/FlorianCassayre/Arbre-o-matic/issues"
  },
  "homepage": "https://genealographie.fr",
  "main": "index.js",
  "scripts": {
    "build": "cross-env NODE_OPTIONS=--max-old-space-size=8000 webpack --mode production --progress",
    "dev:fr": "webpack serve --config-name config-fr --mode development --progress --stats verbose",
    "dev:en": "webpack serve --config-name config-en --mode development",
    "dev:watch": "webpack --mode development --watch --progress",
    "start": "webpack serve --mode development --open --progress",
    "build:profile": "cross-env NODE_OPTIONS=--max-old-space-size=4096 node --inspect-brk node_modules/webpack/bin/webpack.js --mode production --profile",
    "prod": "npm run build",
    "watch": "npm run dev:watch",
    "lint": "eslint assets/scripts/**/*.js",
    "clean": "rimraf dist"
  },
  "dependencies": {
    "@balkangraph/familytree.js": "^1.9.36",
    "@clerk/clerk-js": "^5.26.3",
    "@googlemaps/js-api-loader": "^1.16.6",
    "@googlemaps/markerclusterer": "^2.5.3",
    "@popperjs/core": "^2.11.8",
    "@uppy/aws-s3": "^4.1.0",
    "@uppy/core": "^4.2.0",
    "blob-stream": "^0.1.3",
    "bootstrap": "^5.2.0",
    "bootstrap5-toggle": "^5.0.4",
    "core-js": "^3.35.1",
    "d3": "^7.9.0",
    "fast-json-patch": "^3.1.1",
    "jquery": "^3.5.1",
    "jsdom": "^24.1.0",
    "jsonpointer": "^5.0.1",
    "lodash": "^4.17.21",
    "mobx": "^6.13.0",
    "moment": "^2.30.1",
    "os-browserify": "^0.3.0",
    "panzoom": "^9.4.3",
    "parse-gedcom": "^1.0.5",
    "path-browserify": "^1.0.1",
    "pdfkit": "^0.15.0",
    "popper.js": "^1.16.1",
    "screenfull": "^6.0.2",
    "svg-to-pdfkit": "^0.1.8",
    "tinycolor2": "^1.6.0",
    "tom-select": "^2.3.1",
    "uuid": "^9.0.1",
    "vercel": "^34.1.7",
    "workbox-window": "^7.0.0",
    "xmldom": "^0.6.0"
  },
  "devDependencies": {
    "@babel/core": "^7.24.4",
    "@babel/preset-env": "^7.24.4",
    "@zainulbr/i18n-webpack-plugin": "^2.0.3",
    "assert": "^2.1.0",
    "autoprefixer": "^10.4.19",
    "babel-eslint": "^10.1.0",
    "babel-loader": "^9.1.3",
    "babel-plugin-lodash": "^3.3.4",
    "babel-plugin-search-and-replace": "^1.0.1",
    "babel-plugin-transform-remove-console": "^6.9.4",
    "brfs": "^2.0.2",
    "browserify-zlib": "^0.2.0",
    "buffer": "^6.0.3",
    "cross-env": "^7.0.3",
    "crypto-browserify": "^3.12.0",
    "css-loader": "^7.1.1",
    "css-minimizer-webpack-plugin": "^7.0.0",
    "dotenv": "^16.4.5",
    "dotenv-webpack": "^8.1.0",
    "eslint": "^5.16.0",
    "file-loader": "^6.2.0",
    "html-loader": "^5.0.0",
    "html-webpack-plugin": "^5.6.0",
    "image-webpack-loader": "^4.2.0",
    "mini-css-extract-plugin": "^2.9.0",
    "postcss-loader": "^8.1.1",
    "precss": "^4.0.0",
    "process": "^0.11.10",
    "raw-loader": "^4.0.2",
    "resolve-url-loader": "^5.0.0",
    "rimraf": "^6.0.1",
    "sass": "^1.75.0",
    "sass-loader": "^14.2.1",
    "stream-browserify": "^3.0.0",
    "string-replace-webpack-plugin": "^0.1.3",
    "style-loader": "^4.0.0",
    "transform-loader": "^0.2.4",
    "util": "^0.12.5",
    "webpack": "^5.91.0",
    "webpack-bundle-analyzer": "^4.10.2",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.0.4",
    "webpack-manifest-plugin": "^5.0.0",
    "worker-loader": "^3.0.8"
  }
}

================
File: README.md
================
- npm install
- npm run dev
- UI in English available at /en/index.html

![Geneafan](https://github.com/user-attachments/assets/f70b4150-e456-4776-bf10-053e57c79772)



## Licence

================
File: structure.ini
================
GENEAFAN/
├── assets/
│   ├── html/
│   │   └── index.ejs
│   ├── scripts/
│   │   ├── geneafan.js
│   │   ├── geneafan/
│   │   │   ├── ascendantTimeline.js
│   │   │   ├── downloads.js
│   │   │   ├── eventlistners.js   
│   │   │   ├── fan.js
│   │   │   ├── main.js
│   │   │   ├── mapManager.js
│   │   │   ├── parse.js
│   │   │   ├── state.js
│   │   │   ├── ui.js
│   │   │   ├── utils.js
│   │   │   └── vendor/
│   │   │       ├── bootstrap-colorpicker.js
│   │   │       ├── bootstrap.js
│   │   │       ├── d3.js
│   │   │       ├── familytree.js
│   │   │       ├── horizontalTimeline.js
│   │   │       ├── jquery.js
│   │   │       ├── parse-gedcom.js
│   │   │       ├── pdfkit.js
│   │   │       ├── seedrandom.js
│   │   │       └── svg-to-pdkkit.js
│   └── scss/
│       ├── main.scss
│       └── pages/
│           └── _index.scss
├── dist/
├── locales/
│   ├── en.json
│   └── fr.json
├── node_modules/
├── package-lock.json
├── package.json
├── .env
└── webpack.config.js

================
File: TODO.md
================
## À faire

- Afficher un message lorsqu'aucun aperçu n'est affiché
- Améliorer le système de détection d'erreur et afficher un composant "alert" bootstrap
- Ajouter d'autres paramètres d'affichage de lieu
- Corriger le bouton individu qui ne remplit pas l'espace comme devrait le faire un élément `col-12`
- Ajouter un lecteur de fichier CSV pour définir une palette de couleurs personnalisée
- Ajouter un paramètre de modification de l'épaisseur des traits
- Le contraste automatique ne fonctionne pas encore sur les cases "mariage"
- Le nom du fichier téléchargé devrait indiquer le nom de l'individu dont il est question (ex. "Eventail généalogique de X")
- Ajouter un paramètre pour modifier la taille des marges
- Ajouter deux paramètres titre et sous-titre
- Ajouter un paramètre optionnel et désactivé par défaut qui afficherait un lien vers le site pour faire connaître le service
- Ajouter une 9ème et éventuellement 10ème génération avec une police de caractères plus petite
- Ajouter un paramètre pour afficher les métiers des quatre premières générations

================
File: update.sh
================
#!/bin/bash

# Exit on failure
set -e

# Set current working directory
cd "$(dirname "$0")"

# Pull changes (if any)
git pull

# Install npm packages
npm install

# Clean build directory
rm -rf dist

# Build production artifact
npm run prod

# Set newly built artifact to production
rm -rf production
mv dist production

================
File: vercel.json
================
{
    "build": {
      "env": {
        "GENERATE_SOURCEMAP": "true"
      }
    }
  }

================
File: webpack.config.js
================
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const StringReplacePlugin = require("string-replace-webpack-plugin");
const I18nPlugin = require('@zainulbr/i18n-webpack-plugin');
const crypto = require("crypto");
const webpack = require('webpack');
const TerserPlugin = require('terser-webpack-plugin');
const { WebpackManifestPlugin } = require('webpack-manifest-plugin');
const Dotenv = require('dotenv-webpack');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');

// Workaround for MD4 algorithm used by Webpack in crypto hashing
const crypto_orig_createHash = crypto.createHash;
crypto.createHash = algorithm => crypto_orig_createHash(algorithm === "md4" ? "sha256" : algorithm);

// Load language files for localization
const locale = {
    en: require('./locales/en.json'),
    fr: require('./locales/fr.json')
};

const defaultLocale = 'fr';

// Function to generate a page URL based on the selected language
function pageUrl(lang, pageRel) {
    return lang === defaultLocale ? pageRel : `${lang}/${pageRel}`;
}

// Function to map language to locale format
function langToLocale(lang) {
    return lang === 'fr' ? 'fr-FR' : lang === 'en' ? 'en-US' : null;
}

// Function to generate the full URL for a page
function urlGenerator(lang, page) {
    return `https://arbre.app/${pageUrl(lang, page)}`.replace(/\/$/, "");
}

module.exports = (env, argv) => {
    const isProduction = argv.mode === 'production';

    const babelConf = {
        loader: 'babel-loader',
        options: {
            presets: [
                ['@babel/preset-env', { targets: "defaults" }]
            ],
            compact: false,
            plugins: [
                // Remove console.log statements in production
                ...(isProduction ? ['transform-remove-console'] : []),
            ],
        }
    };
    // Create a configuration for each locale
    return Object.keys(locale).map((lang, index) => {
        const globals = {
            lang: lang,
            locale: langToLocale(lang),
            urlGenerator: page => urlGenerator(lang, page),
            urlGeneratorLang: urlGenerator
        };

        // Assign unique ports for each language configuration
        const port = 8080 + index;  // e.g., 8080 for fr, 8081 for en, etc.

        return {
            name: `config-${lang}`, // Unique name for each configuration
            devtool: isProduction ? false : 'eval-source-map', // Disable source maps in production
            entry: {
                geneafan: './assets/geneafan.js', // Entry point for the application
            },
            output: {
                path: path.resolve(__dirname, 'dist'), // Output directory
                filename: './js/[name].bundle.[contenthash].js', // Bundle output with hash
                globalObject: 'self'
            },
            stats: {
                errorDetails: true,
                children: true,
            },
            optimization: {
                splitChunks: {
                    chunks: 'all',
                    minSize: 20000,
                    maxSize: 200000,
                    cacheGroups: {
                        vendors: {
                            test: /[\\/]node_modules[\\/]/,
                            name: 'vendors',
                            chunks: 'all',
                            priority: -10,
                            reuseExistingChunk: true,
                        },
                        commons: {
                            name: 'commons',
                            minChunks: 2,
                            priority: 10,
                            reuseExistingChunk: true,
                            enforce: true,
                        },
                        default: false, // Disable default chunk group to avoid conflicts
                    },
                },
                minimize: isProduction, // Minimize assets in production
                minimizer: [
                    new TerserPlugin({
                        terserOptions: {
                            compress: {
                                drop_console: isProduction, // Remove console logs in production
                            },
                        },
                        parallel: true, // Enable parallel minification
                    }),
                    new CssMinimizerPlugin(),
                ],
            },
            performance: {
                hints: 'warning',
                maxAssetSize: 200000,
                maxEntrypointSize: 400000,
            },
            resolve: {
                fallback: {
                    'stream': require.resolve('stream-browserify'),
                    'zlib': require.resolve('browserify-zlib'),
                    'util': require.resolve('util/'),
                    'crypto': require.resolve('crypto-browserify'),
                    'buffer': require.resolve('buffer'),
                    "path": require.resolve("path-browserify"),
                    "os": require.resolve("os-browserify/browser"),
                },
                alias: {
                    fs: 'pdfkit/js/virtual-fs.js',
                    'process/browser': 'process/browser.js'
                }
            },
            // Webpack Dev Server configuration
            devServer: {
                static: path.join(__dirname, 'dist'), // Serve static files from dist folder
                port: port,  // Use a different port for each locale
                open: true,  // Automatically open the app in the default browser
                hot: true,  // Enable Hot Module Replacement (HMR)
                client: {
                    logging: 'info',  // Show logs in the browser console
                },
            },
            module: {
                rules: [
                    {
                        test: /\.js$/, // JavaScript files
                        exclude: /node_modules\/(lodash|@clerk\/clerk-js|fontkit)/, // Exclude specific modules
                        use: babelConf
                    },
                    {
                        test: /\.js$/,
                        include: /(pdfkit|saslprep|unicode-trie|unicode-properties|dfa|linebreak|panzoom)/,
                        use: babelConf
                    },
                    {
                        test: /\.mjs$/, // Support for .mjs files
                        include: /node_modules/,
                        type: 'javascript/auto',
                        use: babelConf
                    },
                    {
                        enforce: 'post',
                        test: /fontkit[/\\]index.js$/,
                        use: {
                            loader: "transform-loader?brfs"
                        }
                    },
                    {
                        enforce: 'post',
                        test: /unicode-properties[/\\]index.js$/,
                        use: {
                            loader: "transform-loader?brfs"
                        }
                    },
                    {
                        enforce: 'post',
                        test: /linebreak[/\\]src[/\\]linebreaker.js/,
                        use: {
                            loader: "transform-loader?brfs"
                        }
                    },
                    { test: /src[/\\]assets/, loader: 'arraybuffer-loader' }, // Load arraybuffer
                    { test: /\.afm$/, loader: 'raw-loader' }, // Load raw files (fonts)
                    {
                        test: /\.(html)$/, // HTML loader
                        loader: 'html-loader',
                        options: {
                            interpolate: true,
                            minimize: false, // Do not minimize HTML
                        },
                        exclude: /node_modules/,
                    },
                    {
                        test: /\.(css|sass|scss)$/, // CSS, Sass, and SCSS files
                        use: [
                            MiniCssExtractPlugin.loader, // Extract CSS into files
                            'css-loader',
                            'resolve-url-loader',
                            'postcss-loader',
                            'sass-loader'
                        ],
                        exclude: /node_modules/,
                    },
                    {
                        test: /\.(jpe?g|png|gif|svg)$/, // Image files
                        use: [
                            {
                                loader: 'file-loader',
                                options: {
                                    outputPath: (url, resourcePath, context) => `images/${url}`,
                                    name: '[name].[ext]',
                                },
                            },
                            {
                                loader: 'image-webpack-loader',
                                options: {
                                    disable: !isProduction, // Disable in development
                                    mozjpeg: {
                                        progressive: true,
                                        quality: 75
                                    },
                                },
                            }
                        ],
                    },
                    {
                        type: 'javascript/auto',
                        test: /(favicon\.ico|site\.webmanifest|manifest\.json|browserconfig\.xml|robots\.txt|humans\.txt)$/, // Handle various assets
                        loader: 'file-loader',
                        options: {
                            name: '[name].[ext]',
                        },
                        exclude: /node_modules/,
                    },
                    {
                        test: /\.(woff(2)?|ttf|eot)(\?[a-z0-9=.]+)?$/, // Font files
                        loader: 'file-loader',
                        options: {
                            outputPath: 'fonts',
                            name: '[name].[ext]',
                        },
                        exclude: /node_modules/,
                    },
                    {
                        test: /\.css$/, // CSS from node_modules
                        include: /node_modules/,
                        use: [
                            'style-loader',
                            'css-loader'
                        ]
                    },
                    {
                        test: /\.js$/,
                        use: {
                            loader: StringReplacePlugin.replace({
                                replacements: [
                                    {
                                        pattern: /trimLeft\(\)/ig, // Replace deprecated trimLeft with trim
                                        replacement: () => 'trim()'
                                    }
                                ]
                            })
                        }
                    }
                ],
            },
            plugins: [
                new webpack.ProgressPlugin(), // Show progress bar during build
                new Dotenv({
                    path: isProduction ? './.env.production' : './.env.development', // Load environment variables
                    safe: false,
                }),
                new HtmlWebpackPlugin({
                    template: './assets/html/index.ejs', // Template for HTML file
                    templateParameters: globals,
                    filename: pageUrl(lang, 'index.html'),
                    chunks: ['geneafan', 'commons', 'i18n'],
                    hash: true,
                }),
                new MiniCssExtractPlugin({
                    filename: './css/[name].css' // Output CSS filename
                }),
                new WebpackManifestPlugin({
                    fileName: 'asset-manifest.json', // Generate manifest file
                    publicPath: 'dist/'
                }),
                new webpack.ProvidePlugin({
                    Buffer: ['buffer', 'Buffer'], // Provide Buffer globally
                }),
                new webpack.DefinePlugin({
                    'process.env.NODE_ENV': JSON.stringify(argv.mode), // Define environment mode
                }),
                new StringReplacePlugin(), // Replace strings in files
                new I18nPlugin(locale[lang], { nested: true }), // Internationalization plugin
                new webpack.ProvidePlugin({
                    process: 'process/browser', // Provide browser process object
                }),
                ...(process.env.ANALYZE ? [new BundleAnalyzerPlugin()] : []), // Analyze bundle if requested
            ]
        };
    });
};
