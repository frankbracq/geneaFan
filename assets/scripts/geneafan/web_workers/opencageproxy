addEventListener("fetch", event => {
    event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
    if (request.method === "OPTIONS") {
        return handleCorsPreflight();
    }

    if (request.method !== "POST") {
        return new Response("Méthode non supportée", { status: 405 });
    }

    const { familyTowns } = await request.json();
    const keys = Object.keys(familyTowns);
    const updatedTowns = {};

    for (const key of keys) {
        const town = familyTowns[key];
        // Vérifier si la ville est déjà dans le KV avant de procéder
        const existingData = await TOWNS_KV.get(key);
        if (existingData) {
            updatedTowns[key] = JSON.parse(existingData); // Utilisez les données existantes
        } else {
            // La ville n'existe pas dans le KV, nécessite une mise à jour via OpenCage
            const updatedTown = await updateTownInfo(town, key); // Notez que updateTownInfo accepte maintenant la clé comme argument
            updatedTowns[key] = updatedTown;
            await sleep(1100); // Attendre pour respecter la limite de taux d'OpenCage
        }
    }

    // Modifiez cette ligne pour retirer l'encapsulation de `familyTowns`
    return new Response(JSON.stringify(updatedTowns), {
        status: 200,
        headers: corsHeaders(),
    });
}

// Cette fonction doit maintenant accepter 'key' comme argument
async function updateTownInfo(town, key) {
    const apiKey = "99e74b82fb724c21bc055e46d60f3eb0";
    let query = town.town; 
    if (town.departement) query += `, ${town.departement}`;
    if (town.country) query += `, ${town.country}`;

    const url = `https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(query)}&key=${apiKey}&pretty=1`;

    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error("Failed to fetch from OpenCage");
        const data = await response.json();

        const firstResult = data.results[0];
        if (firstResult) {
            town.latitude = firstResult.geometry.lat.toString();
            town.longitude = firstResult.geometry.lng.toString();
        
            if (firstResult.components.county) {
                town.departement = firstResult.components.county;
            }
            if (firstResult.components.country) {
                town.country = firstResult.components.country;
            }
        
            // Update townDisplay based on country
            if (town.country === 'France') {
                town.townDisplay = `${firstResult.components._normalized_city} (${firstResult.components.county})`;
            } else {
                town.townDisplay = `${firstResult.components._normalized_city} (${firstResult.components.country})`;
            }
        }

        // Enregistre la ville mise à jour dans KV en utilisant la clé fournie
        await TOWNS_KV.put(key, JSON.stringify(town));
        return town;
    } catch (error) {
        console.error("Error updating town info:", error);
        return town; // En cas d'erreur, retourne la ville sans mise à jour
    }
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function handleCorsPreflight() {
    return new Response(null, {
        status: 204,
        headers: corsHeaders(),
    });
}

function corsHeaders() {
    return {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type",
    };
}
