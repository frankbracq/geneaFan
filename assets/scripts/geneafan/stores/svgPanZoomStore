import { makeAutoObservable, action } from './mobx-config';
import svgPanZoom from 'svg-pan-zoom';

class SvgPanZoomStore {
    instance = null;
    isFullscreen = false;
    isGrabbing = false;

    constructor() {
        makeAutoObservable(this, {
            initialize: action,
            destroy: action,
            reset: action,
            resize: action,
            setFullscreen: action,
            setGrabbing: action,
            updateViewport: action
        });
    }

    initialize = (selector = '#fan', options = {}) => {
        if (this.instance) {
            this.destroy();
        }

        const defaultOptions = {
            zoomEnabled: true,
            controlIconsEnabled: true,
            fit: true,
            center: true,
            preventMouseEventsDefault: true
        };

        this.instance = svgPanZoom(selector, {
            ...defaultOptions,
            ...options,
            beforePan: () => {
                if (!this.instance) return;
                // Empêcher le pan si on est en train de faire un drag sur un élément
                return !this.isGrabbing;
            },
            onZoom: (newZoom) => {
                if (!this.instance) return;
                // Gérer le zoom ici si nécessaire
                options.onZoom?.(newZoom);
            }
        });

        // Gérer les événements de la molette avec Ctrl
        const mapElement = document.querySelector(selector);
        if (mapElement) {
            mapElement.addEventListener('wheel', this.handleWheel, { passive: false });
            mapElement.addEventListener('dblclick', this.handleDoubleClick, true);
        }

        return this.instance;
    };

    cleanup = () => {
        this.destroy();
        // Nettoyer les autres ressources potentielles...
    };

    destroy = action(() => {
        if (this.instance) {
            // Supprimer tous les événements
            const mapElement = document.querySelector('#fan');
            if (mapElement) {
                // Nettoyer les événements spécifiques
                mapElement.removeEventListener('wheel', this.handleWheel);
                mapElement.removeEventListener('dblclick', this.handleDoubleClick);
                
                // Nettoyer les événements du mode grabbing
                const handlers = mapElement._mouseHandlers;
                if (handlers) {
                    mapElement.removeEventListener('mousedown', handlers.handleMouseDown);
                    mapElement.removeEventListener('mouseup', handlers.handleMouseUp);
                    delete mapElement._mouseHandlers;
                }
            }
            
            // Détruire l'instance
            this.instance.destroy();
            this.instance = null;
            
            // Réinitialiser les états
            this.isFullscreen = false;
            this.isGrabbing = false;
        }
    });

    handleWheel = (event) => {
        if (event.ctrlKey) {
            event.preventDefault();
        }
    };

    handleDoubleClick = (event) => {
        event.stopImmediatePropagation();
    };

    reset = () => {
        if (this.instance) {
            this.instance.reset();
        }
    };

    resize = () => {
        if (this.instance) {
            this.instance.resize();
            this.instance.fit();
            this.instance.center();
        }
    };

    updateViewport = () => {
        if (this.instance) {
            this.instance.updateBBox();
            this.instance.fit();
            this.instance.center();
        }
    };

    setFullscreen = (isFullscreen) => {
        this.isFullscreen = isFullscreen;
        if (this.instance) {
            if (isFullscreen) {
                this.instance.disableDblClickZoom();
            } else {
                this.instance.enableDblClickZoom();
                this.reset();
            }
        }
    };

    setGrabbing = (isGrabbing) => {
        this.isGrabbing = isGrabbing;
        const fanElement = document.getElementById('fan');
        if (fanElement) {
            fanElement.style.cursor = isGrabbing ? 'grabbing' : (this.isFullscreen ? 'grab' : 'default');
        }
    };

    // Getters utiles
    get isInitialized() {
        return this.instance !== null;
    }
}

const svgPanZoomStore = new SvgPanZoomStore();
export default svgPanZoomStore;
