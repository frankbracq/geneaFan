import MarkerDisplayManager from '../managers/markerDisplayManager.js';
import { layerManager } from '../managers/layerManager.js';
import { storeEvents, EVENTS } from '../../../common/stores/storeEvents.js';

/**
 * Classe de base pour les stores de calques cartographiques
 * Abstrait les fonctionnalit√©s communes √† tous les calques
 */
class BaseLayerStore {
    constructor(layerName) {
        this.layerName = layerName;
        // Standardisation : par d√©faut, le nom de la couche de marqueurs est identique au nom du calque
        this.markerLayerName = layerName;
        this.markerDisplayManager = new MarkerDisplayManager();
        this.map = null;
        this.disposers = new Set();

        // √âcouter les changements de visibilit√© du calque
        const layerChangeDisposer = storeEvents.subscribe(
            EVENTS.VISUALIZATIONS.MAP.LAYERS.CHANGED,
            (data) => {
                if (data.layer === this.layerName) {
                    this.applyVisibility(data.state);
                }
            }
        );

        this.disposers.add(layerChangeDisposer);
    }

    /**
 * Initialise le store avec une instance de Google Maps
 * @param {google.maps.Map} map - Instance Google Maps
 * @returns {boolean} - Statut de l'initialisation
 */
    initialize(map) {
        // V√©rifier que la carte est valide
        if (!map || !(map instanceof google.maps.Map)) {
            console.error(`‚ùå Instance de carte invalide pour ${this.layerName}Store`);
            return false;
        }

        console.log(`üöÄ Initialisation de ${this.layerName}Store`);
        this.map = map;

        try {
            // Initialiser le cluster s'il ne l'est pas d√©j√†
            if (!this.markerDisplayManager.isInitialized()) {
                if (!this.createClusterMarker || typeof this.createClusterMarker !== 'function') {
                    console.error(`‚ùå M√©thode createClusterMarker manquante dans ${this.constructor.name}`);
                    return false;
                }

                this.markerDisplayManager.initializeCluster(map, this.createClusterMarker.bind(this));
            }

            return true;
        } catch (error) {
            console.error(`‚ùå Erreur lors de l'initialisation de ${this.layerName}Store:`, error);
            return false;
        }
    }

    /**
     * M√©thode abstraite pour cr√©er un marqueur de cluster
     * @param {Object} params - Param√®tres du cluster
     */
    createClusterMarker(params) {
        throw new Error('createClusterMarker doit √™tre impl√©ment√© par les classes d√©riv√©es');
    }

    /**
     * Change la visibilit√© du calque
     * @param {boolean} visible - √âtat de visibilit√©
     */
    toggleVisibility(visible) {
        storeEvents.emit(EVENTS.VISUALIZATIONS.MAP.LAYERS.CHANGED, {
            layer: this.layerName,
            state: visible
        });
    }

    /**
 * Obtient les limites g√©ographiques de tous les marqueurs du calque
 * M√©thode mutualis√©e qui inclut tous les marqueurs, m√™me ceux masqu√©s par un clusterer
 * @returns {google.maps.LatLngBounds|null} Limites g√©ographiques ou null
 */
    getBounds() {
        if (!this.markerDisplayManager) return null;

        const bounds = new google.maps.LatLngBounds();
        let hasMarkers = false;

        // R√©cup√©rer les marqueurs de la couche principale
        const layerMarkers = this.markerDisplayManager.layers.get(this.markerLayerName);

        if (layerMarkers && layerMarkers.size > 0) {
            console.log(`üìä Calcul des bounds pour ${layerMarkers.size} marqueurs de ${this.layerName}`);

            // Parcourir TOUS les marqueurs, peu importe s'ils sont visibles ou masqu√©s par un cluster
            layerMarkers.forEach((marker, key) => {
                if (marker && marker.position) {
                    bounds.extend(marker.position);
                    hasMarkers = true;
                }
            });

            console.log(`‚úÖ Bounds calcul√©s incluant ${hasMarkers ? 'tous les' : 'aucun'} marqueurs pour ${this.layerName}`);
        } else {
            console.log(`‚ö†Ô∏è Aucun marqueur trouv√© pour la couche ${this.markerLayerName}`);
        }

        // Si aucun marqueur trouv√© et que nous sommes dans un calque sp√©cifique,
        // on peut essayer avec les autres couches
        if (!hasMarkers) {
            this.markerDisplayManager.layers.forEach((markers, layerName) => {
                if (layerName !== this.markerLayerName) { // √âviter la duplication
                    markers.forEach(marker => {
                        if (marker && marker.position) {
                            bounds.extend(marker.position);
                            hasMarkers = true;
                        }
                    });
                }
            });
        }

        return hasMarkers ? bounds : null;
    }

    /**
 * Applique l'√©tat de visibilit√© aux marqueurs
 * @param {boolean} visible - √âtat de visibilit√©
 */
    applyVisibility(visible) {
        if (!this.map) return;

        if (visible) {
            // 1. Pr√©paration du calque avant affichage (hook pour la classe d√©riv√©e)
            this.prepareLayerBeforeShow();

            // 2. S'assurer que le cluster est bien initialis√©
            if (!this.markerDisplayManager.isInitialized()) {
                this.markerDisplayManager.initializeCluster(this.map, this.createClusterMarker.bind(this));
            }

            // 3. Pr√©parer/rafra√Æchir les marqueurs si n√©cessaire (hook pour la classe d√©riv√©e)
            this.updateLayerMarkers();

            // 4. Rendre les marqueurs visibles
            const layerMarkers = this.markerDisplayManager.layers.get(this.markerLayerName);
            if (layerMarkers) {
                layerMarkers.forEach(marker => {
                    marker.map = this.map;
                });
            }

            // 5. Ajouter les marqueurs au cluster avec d√©lai configurable
            const config = layerManager.getLayerConfig(this.layerName);
            const delay = config ? config.clusterDelay : 0;

            if (delay > 0) {
                setTimeout(() => {
                    console.log(`üìç Ajout des marqueurs au cluster apr√®s d√©lai (${delay}ms)`);
                    this.markerDisplayManager.addMarkersToCluster(this.map);

                    // 5.1 Si c'est le calque familial, initialiser les bounds pour optimiser le centrage futur
                    if (this.layerName === 'family' && typeof this.initializeMapBounds === 'function') {
                        console.log('üó∫Ô∏è Initialisation des bounds pour le calque familial');
                        this.initializeMapBounds();
                    }

                    // Centrage diff√©r√© apr√®s que les marqueurs ont √©t√© ajout√©s
                    setTimeout(() => {
                        // 6. Actions post-affichage (hook pour la classe d√©riv√©e)
                        this.afterLayerShown();
                    }, 100);
                }, delay);
            } else {
                console.log('üìç Ajout des marqueurs au cluster sans d√©lai');
                this.markerDisplayManager.addMarkersToCluster(this.map);

                // 5.1 Si c'est le calque familial, initialiser les bounds pour optimiser le centrage futur
                if (this.layerName === 'family' && typeof this.initializeMapBounds === 'function') {
                    console.log('üó∫Ô∏è Initialisation des bounds pour le calque familial');
                    this.initializeMapBounds();
                }

                // Centrage diff√©r√© apr√®s que les marqueurs ont √©t√© ajout√©s
                setTimeout(() => {
                    // 6. Actions post-affichage (hook pour la classe d√©riv√©e)
                    this.afterLayerShown();
                }, 100);
            }
        } else {
            console.log(`üîç D√©sactivation du calque ${this.layerName}`);
            this.markerDisplayManager.toggleLayerVisibility(this.markerLayerName, false, this.map);

            // 7. Actions apr√®s masquage (hook pour la classe d√©riv√©e)
            this.afterLayerHidden();
        }
    }

    /**
     * Hook: Pr√©parations avant affichage du calque
     * √Ä surcharger par les classes d√©riv√©es si n√©cessaire
     */
    prepareLayerBeforeShow() {
        // Impl√©mentation par d√©faut vide
    }

    /**
     * Hook: Mise √† jour des marqueurs du calque
     * √Ä surcharger par les classes d√©riv√©es si n√©cessaire
     */
    updateLayerMarkers() {
        // Impl√©mentation par d√©faut vide
    }

    /**
     * Hook: Actions apr√®s affichage du calque
     * √Ä surcharger par les classes d√©riv√©es si n√©cessaire
     */
    afterLayerShown() {
        // Impl√©mentation par d√©faut vide
    }

    /**
     * Hook: Actions apr√®s masquage du calque
     * √Ä surcharger par les classes d√©riv√©es si n√©cessaire
     */
    afterLayerHidden() {
        // Impl√©mentation par d√©faut vide
    }

    /**
     * M√©thode par d√©faut pour cr√©er un marqueur de cluster
     * Peut √™tre surcharg√©e par les classes d√©riv√©es
     */
    createClusterMarker({ count, position }) {
        throw new Error('createClusterMarker doit √™tre impl√©ment√© par les classes d√©riv√©es');
    }

    /**
 * Nettoie les ressources utilis√©es par le store
 */
    cleanup() {
        console.log(`üßπ Nettoyage des ressources pour ${this.layerName}Store`);

        // 1. Nettoyage des marqueurs et de leurs √©couteurs
        if (this.markerDisplayManager) {
            const layerMarkers = this.markerDisplayManager.layers.get(this.markerLayerName);
            if (layerMarkers) {
                layerMarkers.forEach((marker, key) => {
                    // Supprimer tous les √©couteurs d'√©v√©nements Google Maps
                    if (marker) {
                        google.maps.event.clearInstanceListeners(marker);
                        marker.map = null;
                    }
                });
            }

            // Nettoyer les marqueurs apr√®s avoir supprim√© les √©couteurs
            this.markerDisplayManager.clearMarkers(this.markerLayerName);
        }

        // 2. Nettoyage des disposers MobX pour √©viter les fuites m√©moire
        this.disposers.forEach(disposer => {
            if (typeof disposer === 'function') {
                disposer();
            }
        });
        this.disposers.clear();

        // 3. R√©initialisation des r√©f√©rences
        this.map = null;

        console.log(`‚úÖ Nettoyage termin√© pour ${this.layerName}Store`);
    }
}

export default BaseLayerStore;